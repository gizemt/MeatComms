// TODO: Function Panel type with id: 1019 and name: "struct nicomplexnumber[]" could not be resolved; Aliasing nicomplexnumber to System.Int32 to use nicomplexnumber array appropriately in functions and P/Invoke calls.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Measurement Studio for niScope 4.300.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NIMultiThreadConsole
{
    using System;
    using System.Runtime.InteropServices;
    using nicomplexnumber = System.Int32;


    public class niScope : object, System.IDisposable
    {

        private System.Runtime.InteropServices.HandleRef _handle;

        private bool _disposed = true;

        ~niScope() { Dispose(false); }


        /// <summary>
        /// This function creates an IVI instrument driver session, typically using the C session instrument handle.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The instrument handle that is used to create an IVI instrument driver session.
        /// </param>
        public niScope(System.IntPtr Instrument_Handle)
        {
            this._handle = new System.Runtime.InteropServices.HandleRef(this, Instrument_Handle);
            this._disposed = false;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_init</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus <span class="Monospace">niScope_init</span> (ViRsrc resourceName, ViBoolean IDQuery, ViBoolean resetDevice, ViSession* vi);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Performs the following initialization actions:</p>
        /// <ul>
        /// <li>Creates a new IVI  instrument driver session</li>
        /// <li>Opens a session to the specific driver using the interface and address you specify in the <strong>resourceName</strong></li>
        /// <li>Queries the instrument ID and checks that it is valid for NI-SCOPE, if the <strong>IDQuery</strong> is set to <span class="Monospace">VI_TRUE</span></li>
        /// <li>Resets the digitizer to a known state, if  <strong>resetDevice</strong> is set to <span class="Monospace">VI_TRUE</span></li>
        /// <li>Sends initialization commands to set the instrument to the state necessary for the operation of the instrument driver</li>
        /// <li>Returns an instrument handle that you use to identify the instrument in all subsequent instrument driver function calls</li>
        /// </ul>
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    
        ///     <li><a href="digitizers.chm::/Programming_Flow.html">NI-SCOPE  Programming Flow</a></li>   <li><a href="digitizers.chm::/Getting_Started_with_NI-SCOPE.html">NI-SCOPE Tutorial</a></li>       </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Resource_Name">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">resourceName</td>
        /// 			<td class="paramDataType">ViRsrc</td>
        /// 			<td><strong>resourceName</strong> specifies the resource name of the device to initialize.
        /// 
        /// 	<h3>resourceName Examples</h3>
        /// 
        /// 		<table class="Bordered">
        /// 			<tr>
        /// 				<th class="Bordered">Example& #</th>
        /// 				<th class="Bordered">Device Type</th>
        /// 				<th class="Bordered">Syntax</th>
        /// 				<th class="Bordered">Variable</th>
        /// 			</tr>
        /// 			<tr>
        /// 				<td class="Bordered"><div align="center">1</div></td>
        /// 				<td class="Bordered">Traditional NI-DAQ device</td>
        /// 				<td class="Bordered">DAQ::<em>1</em></td>
        /// 				<td>(<em>1</em> = device number)</td>
        /// 			</tr>
        /// 			<tr>
        /// 				<td class="Bordered"><div align="center">2</div></td>
        /// 				<td class="Bordered">NI-DAQmx device</td>
        /// 				<td class="Bordered"><em>myDAQmxDevice</em></td>
        /// 				<td class="Bordered">(<em>myDAQmxDevice</em> = device name)</td>
        /// 			</tr>
        /// 			<tr>
        /// 				<td class="Bordered"><div align="center">3</div></td>
        /// 				<td class="Bordered">NI-DAQmx device</td>
        /// 				<td class="Bordered">DAQ::<em>myDAQmxDevice</em></td>
        /// 				<td class="Bordered">(<em>myDAQmxDevice</em> = device name)</td>
        /// 			</tr>
        /// 			<tr>
        /// 				<td class="Bordered"><div align="center">4</div></td>
        /// 				<td class="Bordered">NI-DAQmx device</td>
        /// 				<td class="Bordered">DAQ::<em>2</em></td>
        /// 				<td class="Bordered">(<em>2</em> = device name)</td>
        /// 			</tr>
        /// 			<tr>
        /// 				<td class="Bordered"><div align="center">5</div></td>
        /// 				<td class="Bordered">IVI logical name or IVI virtual name</td>
        /// 				<td class="Bordered"><em>myLogicalName</em></td>
        /// 				<td class="Bordered">(<em>myLogicalName</em> = name)</td>
        /// 			</tr>
        /// 		</table>
        /// 
        /// <p class="Body">For Traditional NI-DAQ devices, the syntax is DAQ::<em>n</em>, where <em>n</em> is the device number assigned by MAX, as shown in Example 1.</p> 
        /// 
        /// <p class="Body">For NI-DAQmx devices, the syntax is just the device name specified in MAX, as shown in Example 2. Typical default names for NI-DAQmx devices in MAX are Dev1 or PXI1Slot1. You can rename an NI-DAQmx device by right-clicking on the name in MAX and entering a new name.</p>
        /// 
        /// <p class="Body">An alternate syntax for NI-DAQmx devices consists of DAQ::<em>NI-DAQmx device name</em>, as shown in Example 3. This naming convention allows for the use of an NI-DAQmx device in an application that was originally designed for a Traditional NI-DAQ device. For example, if the application expects DAQ::1, you can rename the NI-DAQmx device to 1 in MAX and pass in DAQ::1 for the resource name, as shown in Example 4.</p>
        /// 
        /// <p class="Body">If you use the DAQ::<em>n</em> syntax and an NI-DAQmx device name already exists with that same name, the NI-DAQmx device is matched first.</p> 
        /// 
        /// <p class="Body">You can also pass in the name of an IVI logical name or an IVI virtual name configured with the IVI Configuration utility, as shown in Example 5. A logical name identifies a particular virtual instrument. A virtual name identifies a specific device and specifies the initial settings for the session.</p>
        /// 
        /// <table class="borderless"><tr>
        /// <td class="Icon"><img src="caution.gif"></td>
        /// <td colspan=2><span class="Dark-Red"><strong>Caution</strong>& & Traditional NI-DAQ and NI-DAQmx device names are not case-sensitive. However, all IVI names, such as logical names, are case-sensitive. If you use logical names, driver session names, or virtual names in your program, you must make sure that the name you use matches the name in the IVI Configuration Store file exactly, without any variations in the case of the characters.</span></td></tr></table>
        /// 
        /// 			</td>
        /// 		</tr>
        /// 		</table></body>
        /// </html>
        /// </param>
        /// <param name="ID_Query">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless">
        /// 		<tr>
        /// 			<td class="paramName">idQuery</td>
        /// 			<td class="paramDataType">ViBoolean</td>
        /// 			<td>Specify whether  to perform an ID query.
        /// 			
        /// 			<p class="Body">When you set this parameter to <span class="Monospace">VI_TRUE</span>, 
        /// 			NI-SCOPE verifies that the device you initialize is a type that it supports.</p>
        /// 
        /// <p class="Body">When you set this parameter to <span class="Monospace">VI_FALSE</span>, the 
        /// function initializes the device without performing an ID query.</p>
        /// 
        /// <p class="Body"><strong>Defined Values</strong></p>
        /// 
        /// <p class="Body"><span class="Monospace">VI_TRUE</span>&#8212;Perform ID query<br>
        /// <span class="Monospace">VI_FALSE</span>&#8212;Skip ID query</p>
        /// 
        /// <p class="Body"><strong>Default Value</strong>: <span class="Monospace">VI_TRUE</span></p>
        /// 			</td>
        /// 		</tr>
        /// 		</table></body>
        /// </html>
        /// </param>
        /// <param name="Reset_Device">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless">
        /// 		<tr>
        /// 			<td class="paramName">resetDevice</td>
        /// 			<td class="paramDataType">ViBoolean</td>
        /// 			<td>Specify whether to reset the device during the initialization process.
        /// 
        /// 			<table class="Borderless"><tr>
        /// 			<td class="Icon"><img src="note.gif"></td>
        /// 			<td><strong>Note</strong>& & For the NI 5112, repeatedly resetting   the device may cause 
        /// 			excessive wear on the electromechanical relays. Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/5112_Relays.html')">NI 5112 Electromechanical Relays</a> for recommended programming practices.</td></tr>
        /// 			</table>
        /// 			<p class="Body"><strong>Defined Values</strong></p>
        /// 			<p class="Body"><span class="Monospace">VI_TRUE</span>&#8212;Reset device<br>
        /// 			<span class="Monospace">VI_FALSE</span>&#8212;Do not reset device</p>
        /// 			<p class="Body"><strong>Default Value</strong>: <span class="Monospace">VI_TRUE</span></p>
        /// 			
        /// 			</td>
        /// 		</tr>
        /// 		</table></body>
        /// </html>
        /// </param>
        public niScope(string Resource_Name, bool ID_Query, bool Reset_Device)
        {
            System.IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.init(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), out instrumentHandle);
            this._handle = new System.Runtime.InteropServices.HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_InitWithOptions</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_InitWithOptions </h1>
        /// <H2>C Function Prototype</H2>
        /// <p class="syntax">ViStatus niScope_InitWithOptions (ViRsrc 
        /// resourceName, ViBoolean IDQuery, ViBoolean resetDevice, ViString optionString, 
        /// ViSession* newVi);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// <P class = "Body">Performs the following initialization actions:</P>
        /// <UL>
        ///   <LI>Creates a new IVI instrument driver and optionally sets the initial state 
        ///   of the following session properties: Range Check, Cache, Simulate, Record 
        ///   Value Coercions </li>
        ///   <LI>Opens a session to the specified device using the interface and address 
        ///   you specify for the <strong>resourceName</strong>  </li>
        ///   <LI>Resets the digitizer to a known state if  <strong>resetDevice</strong>  is set 
        ///   to <span class="Monospace">VI_TRUE</span> </li>
        ///   <LI>Queries the instrument ID and verifies that it is valid for this 
        ///   instrument driver if the <strong>IDQuery</strong> is set to <span class="Monospace">VI_TRUE</span></li>
        ///   <LI>Returns an instrument handle that you use to identify the instrument in 
        ///   all subsequent instrument driver function calls </LI></UL>
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Programming_Flow.html">NI-SCOPE  Programming Flow</a></li>               </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Resource_Name">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_InitWithOptions</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">resourceName</TD>
        ///     <TD class="paramDataType">ViRsrc</TD>
        ///     <TD>Specifies the resource name of the device to initialize<br><br>
        /// 
        ///       <table class="Bordered">
        /// 	  <tr><th class="Bordered">Example</th><th class="Bordered">Device Type</th><th class="Bordered">Syntax</th></tr>
        /// <tr>
        /// <td class="Bordered" align ="center">1</td>
        /// <td class="Bordered">Traditional NI-DAQ device</td>
        /// <td class="Bordered">DAQ::1  (1 = device number)</td>
        /// </tr>
        /// <tr>
        /// <td class="Bordered" align ="center">2</td>
        /// <td class="Bordered">NI-DAQmx device	</td>
        /// <td>myDAQmxDevice  (myDAQmxDevice = device name)</td>
        /// </tr>
        /// <tr>
        /// <td class="Bordered" align ="center">3</td>
        /// <td class="Bordered">NI-DAQmx device		</td>
        /// <td class="Bordered">DAQ::myDAQmxDevice	(myDAQmxDevice = device name)</td>
        /// </tr>
        /// <tr>
        /// <td class="Bordered" align ="center">4</td>
        /// <td class="Bordered">NI-DAQmx device	</td>
        /// <td>DAQ::2	(2 = device name)</td>
        /// </tr>
        /// <tr>
        /// <td class="Bordered" align ="center">5</td><td class ="Bordered">IVI  logical name or IVI  virtual name</td>
        /// <td class="Bordered">myLogicalName  		(myLogicalName = name)</td>
        /// </tr></table>
        /// 
        ///       <P class = "Body">For Traditional NI-DAQ devices, the syntax is 
        ///       DAQ::<EM>n</EM>, where <EM>n</EM> is the device number assigned by MAX, as 
        ///       shown in Example 1. </p>
        ///       <P class = "Body">For NI-DAQmx devices, the syntax is just the device name 
        ///       specified in MAX, as shown in Example 2. Typical default names for 
        ///       NI-DAQmx devices in MAX are Dev1 or PXI1Slot1. You can rename an NI-DAQmx 
        ///       device by right-clicking on the name in MAX and entering a new name. </p>
        ///       <P class = "Body">An alternate syntax for NI-DAQmx devices consists of 
        ///       DAQ::NI-DAQmx device name, as shown in Example 3. This naming convention 
        ///       allows for the use of an NI-DAQmx device in an application that was 
        ///       originally designed for a Traditional NI-DAQ device. For example, if the 
        ///       application expects DAQ::1, you can rename the NI-DAQmx device to 1 in MAX 
        ///       and pass in DAQ::1 for the resource name, as shown in Example 4. </p>
        ///       <P class = "Body">If you use the DAQ::<EM>n</EM> syntax and an NI-DAQmx device 
        ///       name already exists with that same name, the NI-DAQmx device is matched 
        ///       first. </p>
        ///       <P class = "Body">You can also pass in the name of an IVI logical name or an 
        ///       IVI virtual name configured with the IVI Configuration utility, as shown 
        ///       in Example 5. A logical name identifies a particular virtual instrument. A 
        ///       virtual name identifies a specific device and specifies the initial 
        ///       settings for the session. </P>
        ///       <TABLE class="Borderless-Wide">
        ///         <TBODY>
        ///         <TR>
        ///           <TD class=Icon><IMG src="caution.gif"></TD>
        ///           <TD><SPAN class = "Dark-Red"><STRONG>Caution</STRONG>& & Traditional NI-DAQ 
        ///             and NI-DAQmx device names are not case-sensitive. However, all IVI 
        ///             names, such as logical names, are case-sensitive. If you use logical 
        ///             names, driver session names, or virtual names in your program, you 
        ///             must make sure that the name you use matches the name in the IVI 
        ///             Configuration Store file exactly, without any variations in the case 
        ///             of the characters.</span> </TD>
        /// 		</TR>
        /// 		</TBODY>
        /// 	</TABLE></td>
        /// 	</tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="ID_Query">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless">
        /// 		<tr>
        /// 			<td class="paramName">idQuery</td>
        /// 			<td class="paramDataType">ViBoolean</td>
        /// 			<td>Specify whether  to perform an ID query.
        /// 			
        /// 			<p class="Body">When you set this parameter to <span class="Monospace">VI_TRUE</span>, 
        /// 			NI-SCOPE verifies that the device you initialize is a type that it supports.</p>
        /// 
        /// <p class="Body">When you set this parameter to <span class="Monospace">VI_FALSE</span>, the 
        /// function initializes the device without performing an ID query.</p>
        /// 
        /// <p class="Body"><strong>Defined Values</strong></p>
        /// 
        /// <p class="Body"><span class="Monospace">VI_TRUE</span>&#8212;Perform ID query<br>
        /// <span class="Monospace">VI_FALSE</span>&#8212;Skip ID query</p>
        /// 
        /// <p class="Body"><strong>Default Value</strong>: <span class="Monospace">VI_TRUE</span></p>
        /// 			</td>
        /// 		</tr>
        /// 		</table></body>
        /// </html>
        /// </param>
        /// <param name="Reset_Device">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_InitWithOptions</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr>
        ///     <td class="paramName">resetDevice</td>
        ///     <td class="paramDataType">ViBoolean</td>
        ///     <td>Specify whether to reset the device during the initialization 
        /// 			process.			
        /// 			
        /// 			<table class="Borderless"><tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td><strong>Note</strong>& & For the NI 5112, repeatedly resetting   the device may cause 
        /// excessive wear on the electromechanical relays. Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/5112_Relays.html')">NI 5112 Electromechanical Relays</a> for recommended programming practices.</td></tr></table>
        ///       
        /// <P class = "Body">Default Value: <span class="Monospace">VI_TRUE</span></p>
        /// 
        /// <P class = "Body"><STRONG>Defined Values</STRONG></P>
        ///       <P class = "Body"><span class="Monospace">VI_TRUE</span> (1)&#8212;Reset device</P>
        ///       <P class = "Body"><span class="Monospace">VI_FALSE</span> (0)&#8212;Do not reset device</P></td></tr>
        /// 	  
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Option_String">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_InitWithOptions</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">optionString</td>
        ///     <td class="paramDataType"></td>
        ///     <td>Specifies initialization commands. The following table 
        ///       lists the attributes and the name you use in the <strong>optionString</strong>  
        ///       to identify the attribute.<br><br>
        ///       <TABLE class = "Bordered">
        ///         <TBODY>
        ///         <TR>
        ///           <TH class = "Bordered">Attribute Name</TH>
        ///           <TH class = "Bordered">Attribute Values</TH></tr>
        ///         <TR>
        ///           <TD class = "Bordered">RangeCheck - NISCOPE_ATTR_RANGE_CHECK</TD>
        ///           <TD class = "Bordered"><span class="Monospace">VI_TRUE</span>, <span class="Monospace">VI_FALSE</span></TD></TR>
        ///         <TR>
        ///           <TD class = "Bordered">QueryInstrStatus - 
        ///           NISCOPE_QUERY_INSTRUMENT_STATUS</TD>
        ///           <TD class = "Bordered"><span class="Monospace">VI_TRUE</span>, <span class="Monospace">VI_FALSE</span></TD></TR>
        ///         <TR>
        ///           <TD class = "Bordered">Cache - NISCOPE_ATTR_CACHE</TD>
        ///           <TD class = "Bordered"><span class="Monospace">VI_TRUE</span>, <span class="Monospace">VI_FALSE</span></TD></TR>
        ///         <TR>
        ///           <TD class = "Bordered">Simulate - NISCOPE_ATTR_SIMULATE</TD>
        ///           <TD class = "Bordered"><span class="Monospace">VI_TRUE</span>, <span class="Monospace">VI_FALSE</span></TD></TR></TBODY></TABLE>
        ///       <P class = "Body">Default Values: 
        ///       &#34;Simulate=0,RangeCheck=1,QueryInstrStatus=1,Cache=1&#34;</P>
        ///       <P class = "Body">You can use the option string to simulate a device. The 
        ///       DriverSetup flag specifies the model that is to be simulated and the type 
        ///       of the model. One example to simulate an NI& PXI-5102 would be as 
        ///       follows:</P>
        ///       <P class = "Body">Option String: <span class="Monospace">Simulate = 1, DriverSetup = Model:5102; 
        ///       BoardType:PXI</span></P>
        ///       <P class = "Body">Refer to the example  <span class="Monospace">niScope EX Simulated Acquisition</span> for 
        ///       more information on simulation.</P>
        ///        <p class="Body"> You can also use the option string to  attach an accessory such as the NI& 5900 to your digitizer session to allow the seamless use  of the accessory: 
        /// <P class = "Body">Option String: <span class="Monospace">DriverSetup = Accessory:Dev1</span></p>
        ///  <P class = "Body">Refer to the example  <span class="Monospace">niScope EX External Amplifier</span> for more information. </p> 
        ///  
        /// </td></tr>
        /// </table></body>
        /// </param>
        public niScope(string Resource_Name, bool ID_Query, bool Reset_Device, string Option_String)
        {
            System.IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.InitWithOptions(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), Option_String, out instrumentHandle);
            this._handle = new System.Runtime.InteropServices.HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// Gets the instrument handle.
        /// </summary>
        /// <value>
        /// The value is the IntPtr that represents the handle to the instrument.
        /// </value>
        public System.IntPtr Handle
        {
            get
            {
                return this._handle.Handle;
            }
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_AutoSetup</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_AutoSetup</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_AutoSetup (ViSession vi);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Automatically configures the instrument.
        ///  When you call this function, the digitizer senses the input signal and automatically 
        /// configures many of the instrument settings. If a signal is detected on a channel, the driver chooses the smallest available vertical range that is larger than the signal range. For example, if the signal is  a 1.2& V<sub>pk-pk</sub>
        /// sine wave, and the device supports 1& V and 2& V vertical ranges, the driver will choose the 2& V
        ///  vertical range for that channel.</p>
        ///  
        ///  <p class ="body">
        ///  If no signal is found on any analog input channel, a warning is returned, and all channels are enabled. A channel is considered to have a signal present if the signal is at least 10% of the smallest vertical range available for that channel.
        /// </p>
        /// <p class="Body">The following settings are changed:
        /// </p>
        /// <table class="Borderless">
        /// <tr><td colspan="2"><strong>General</strong></td></tr>
        /// <tr><td>Acquisition mode</td><td>Normal</td></tr>
        /// <tr><td>Reference clock</td><td>Internal</td></tr>
        /// <tr><td colspan="2"><strong>Vertical</strong>
        /// </td></tr>
        /// <tr><td>Vertical coupling</td><td>AC (DC for NI& 5621)</td></tr>
        /// <tr><td>Vertical bandwidth& & & </td><td>Full</td></tr>
        /// <tr><td>Vertical range</td><td>Changed by auto setup</td></tr>
        /// <tr><td>Vertical offset</td><td>0 V</td></tr>
        /// <tr><td>Probe attenuation</td><td>Unchanged by auto setup</td></tr>
        /// <tr><td>Input impedance</td><td>Unchanged by auto setup</td></tr>
        /// <tr><td colspan="2"><strong>Horizontal</strong>
        /// </td></tr>
        /// <tr><td>Sample rate</td><td>Changed by auto setup</td></tr>
        /// <tr><td>Min record length</td><td>Changed by auto setup</td></tr>
        /// <tr><td>Enforce realtime</td><td>True</td></tr>
        /// <tr><td>Number of Records</td><td>Changed to 1</td></tr>
        /// <tr><td colspan="2"><strong>Triggering</strong>
        /// </td></tr>
        /// <tr><td>Trigger type</td><td>Edge if signal present, otherwise immediate</td></tr>
        /// <tr><td>Trigger channel</td><td>Lowest numbered channel with a signal present</td></tr>
        /// <tr><td>Trigger slope</td><td>Positive</td></tr>
        /// <tr><td>Trigger coupling</td><td>DC</td></tr>
        /// <tr><td>Reference position</td><td>50%</td></tr>
        /// <tr><td>Trigger level</td><td>50% of signal on trigger channel</td></tr>
        /// <tr><td>Trigger delay</td><td>0</td></tr>
        /// <tr><td>Trigger holdoff</td><td>0</td></tr>
        /// <tr><td>Trigger output</td><td>None</td></tr></table>
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Configuring_an_Acquisition_Using_Auto_Setup.html">Configuring an Acquisition Using Auto_Setup</a></li>               </ul>
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int AutoSetup()
        {
            int pInvokeResult = PInvoke.AutoSetup(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureAcquisition</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureAcquisition
        /// </h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ConfigureAcquisition(ViSession vi, ViInt32 acquisitionType);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Configures how the digitizer acquires data and fills the waveform record.</p>
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Acquisition_Functions.html">Acquisition Functions</a></li>               </ul>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Acquisition_Type">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureAcquisition</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">acquisitionType</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specifies the manner in which the digitizer acquires data and fills the waveform record; NI-SCOPE 
        /// sets  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ACQUISITION_TYPE.html')"><span class="Monospace">NISCOPE_ATTR_ACQUISITION_TYPE</span></A>  to this value.
        /// 
        /// <p class="Body"><strong>Defined Values</strong></p>
        /// 
        /// <p class="Body"><span class="Monospace">NISCOPE_VAL_NORMAL</span></p>
        /// <p class="Body"><span class="Monospace">NISCOPE_VAL_FLEXRES</span></p>
        /// <p class="Body"><span class="Monospace">NISCOPE_VAL_DDC</span></p>
        /// 
        /// 
        /// <table class="Borderless">
        /// <tr><td class="Icon"><img src="note.gif"></td>
        /// <td><strong>Note</strong>& & <span class="Monospace">NISCOPE_VAL_DDC</span> applies to the NI& 5620/5621 only. To use 
        ///  DDC mode in the NI& 5142/5622, leave   <strong>acquisitionType</strong> set to <span class="Monospace">NISCOPE_VAL_NORMAL</span> and 
        ///  set <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_DDC_ENABLED.html')"><span class="Monospace">NISCOPE_ATTR_DDC_ENABLED</span></a> to True.</td></tr></table>
        /// 
        /// </td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureAcquisition(int Acquisition_Type)
        {
            int pInvokeResult = PInvoke.ConfigureAcquisition(this._handle, Acquisition_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureHorizontalTiming</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureHorizontalTiming</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ConfigureHorizontalTiming (ViSession vi, ViReal64 minSampleRate, ViInt32 minNumPts, ViReal64 refPosition, ViInt32 numRecords, ViBoolean enforceRealtime);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Configures the common properties of the horizontal subsystem for a multirecord acquisition in terms of minimum sample rate.
        /// </p>
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Configuring_Horizontal.html">Configuring the Horizontal Settings</a></li>  <li><a href="nitclk.chm::/niTClk_overview.html">NI-TClk Overview</a></li>
        ///         <li><a href="digitizers.chm::/Horizontal_Parameters.html">Coercions of Horizontal Parameters</a></li>
        ///   </ul>
        /// 
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Min_Sample_Rate">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureHorizontalTiming</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">minSampleRate</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The sampling rate for the acquisition. Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MIN_SAMPLE_RATE.html')"><span class="Monospace">NISCOPE_ATTR_MIN_SAMPLE_RATE</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Min_Num_Pts">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureHorizontalTiming</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">minNumPts</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The minimum number of points you need in the record for each channel; call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualRecordLength.html')"><span class="Monospace">niScope_ActualRecordLength</span></a> to obtain the actual record length used.
        /// 
        /// <p class = "Body">Valid Values: 
        ///  Greater than 1; limited by available memory</p></td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Ref_Position">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureHorizontalTiming</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">refPosition</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The position of the Reference Event in the waveform record specified as a percentage.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Num_Records">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureHorizontalTiming</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">numRecords</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The number of records to acquire</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Enforce_Realtime">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureHorizontalTiming</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">enforceRealtime</td>
        /// <td class="paramDataType">ViBoolean</td>
        /// <td>Indicates whether the digitizer enforces real-time measurements or allows equivalent-time 
        /// (RIS) measurements; not all digitizers support RIS&#8212;refer to 
        /// <a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')">Features Supported by Device</a> for more 
        /// information. <p class ="Body">Default value: <span class="Monospace">VI_TRUE</span></p>
        /// 
        /// <p class="Body"><strong>Defined Values</strong>
        /// </p>
        /// <p class="Body"><span class="Monospace">VI_TRUE</span>&#8212;Allow real-time acquisitions only 
        /// </p>
        /// <p class="Body"><span class="Monospace">VI_FALSE</span>&#8212;Allow real-time and equivalent-time acquisitions</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureHorizontalTiming(double Min_Sample_Rate, int Min_Num_Pts, double Ref_Position, int Num_Records, bool Enforce_Realtime)
        {
            int pInvokeResult = PInvoke.ConfigureHorizontalTiming(this._handle, Min_Sample_Rate, Min_Num_Pts, Ref_Position, Num_Records, System.Convert.ToUInt16(Enforce_Realtime));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureChanCharacteristics
        /// </h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ConfigureChanCharacteristics (ViSession vi, ViConstString channelList, ViReal64 inputImpedance, ViReal64 maxInputFrequency);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Configures the attributes that control the electrical characteristics of the channel&#8212;the input impedance and the bandwidth.</p>
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Configure_Chan_Characteristics.html">Using Configure Chan Characteristics </a></li>   <li><a href="digitizers.chm::/Impedance_and_Impedance_Matching.html">Impedance and Impedance Matching</a></li> 
        ///             </ul>
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Input_Impedance">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">inputImpedance</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The input impedance for the channel; NI-SCOPE sets  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_INPUT_IMPEDANCE.html')"><span class="Monospace">NISCOPE_ATTR_INPUT_IMPEDANCE</span></A>  to this value.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Max_Input_Frequency">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">maxInputFrequency</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The bandwidth for the channel; NI-SCOPE sets  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MAX_INPUT_FREQUENCY.html')"><span class="Monospace">NISCOPE_ATTR_MAX_INPUT_FREQUENCY</span></A> to this value.
        /// Pass  0 for this value to use the hardware default bandwidth. Pass &#8211;1 for this value to achieve full bandwidth.</td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureChanCharacteristics(string Channel_List, double Input_Impedance, double Max_Input_Frequency)
        {
            int pInvokeResult = PInvoke.ConfigureChanCharacteristics(this._handle, Channel_List, Input_Impedance, Max_Input_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureVertical</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureVertical</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ConfigureVertical (ViSession vi, ViConstString channelList, ViReal64 range, ViReal64 offset, ViInt32 coupling, ViReal64 probeAttenuation, ViBoolean enabled);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Configures the most commonly configured attributes of the digitizer vertical subsystem, such as the range, offset, coupling, probe attenuation, and the channel.</p>
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Configuring_Vertical.html">Configuring the Vertical Settings</a></li>   <li><a href="digitizers.chm::/Programming_Flow.html">NI-SCOPE  Programming Flow</a></li>   <li><a href="digitizers.chm::/Vertical_Parameters.html">Coercions of Vertical Parameters</a></li>
        ///      </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Range">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureVertical</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">range</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>Specifies the vertical range Refer to  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_VERTICAL_RANGE.html')"><span class="Monospace">NISCOPE_ATTR_VERTICAL_RANGE</span></A> 
        /// for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Offset">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureVertical</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">offset</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>Specifies the vertical offset. Refer to  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_VERTICAL_OFFSET.html')"><span class="Monospace">NISCOPE_ATTR_VERTICAL_OFFSET</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Coupling">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureVertical</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">coupling</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specifies how to couple the input signal. Refer to 
        ///  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_VERTICAL_COUPLING.html')"><span class="Monospace">NISCOPE_ATTR_VERTICAL_COUPLING</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Probe_Attenuation">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureVertical</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">probeAttenuation</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>Specifies the probe attenuation. Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_PROBE_ATTENUATION.html')"><span class="Monospace">NISCOPE_ATTR_PROBE_ATTENUATION</span></A>
        /// for valid values.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Enabled">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureVertical</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">enabled</td>
        /// <td class="paramDataType">ViBoolean</td>
        /// <td>Specifies whether the channel is enabled for acquisition. Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_CHANNEL_ENABLED.html')"><span class="Monospace">NISCOPE_ATTR_CHANNEL_ENABLED</span></A> for more information.</td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureVertical(string Channel_List, double Range, double Offset, int Coupling, double Probe_Attenuation, bool Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureVertical(this._handle, Channel_List, Range, Offset, Coupling, Probe_Attenuation, System.Convert.ToUInt16(Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ActualRecordLength</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ActualRecordLength
        /// </h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ActualRecordLength (ViSession vi, ViInt32* recordLength);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Returns the actual number of points the digitizer acquires for each channel. After configuring the digitizer for an acquisition, call this function to determine the size of the waveforms that the digitizer acquires. The value is equal to or greater than the minimum number of points specified in any of the Configure Horizontal functions.</p>
        /// 
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>   
        ///  <li><a href="digitizers.chm::/Sample_Rate.html">Sample Rate</a></li> 
        ///  
        /// 
        ///   <li><a href="digitizers.chm::/Horizontal_Parameters.html">Coercions of Horizontal Parameters</a></li>          </ul>
        /// 
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Record_Length">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ActualRecordLength</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">recordLength</td>
        /// <td class="paramDataType">ViInt32*</td>
        /// <td>Returns the actual number of points the digitizer acquires for each channel; NI-SCOPE returns the value held in the <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_HORZ_RECORD_LENGTH.html')"><span class="Monospace">NISCOPE_ATTR_HORZ_RECORD_LENGTH</span></A> attribute.</td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ActualRecordLength(out int Record_Length)
        {
            int pInvokeResult = PInvoke.ActualRecordLength(this._handle, out Record_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ActualNumWfms</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ActualNumWfms</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ActualNumWfms (ViSession vi, ViConstString channelList, ViInt32* numWfms);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Helps you to declare appropriately sized waveforms. NI-SCOPE handles the channel list parsing for you. 
        /// </p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Num_Wfms">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ActualNumWfms</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">numWfms</td>
        /// <td class="paramDataType">ViInt32*</td>
        /// <td>Returns the number of records times the number of channels; if you are operating in DDC mode (NI& 5620/5621 only), this value is multiplied by two.</td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ActualNumWfms(string Channel_List, out int Num_Wfms)
        {
            int pInvokeResult = PInvoke.ActualNumWfms(this._handle, Channel_List, out Num_Wfms);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ActualMeasWfmSize</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ActualMeasWfmSize
        /// </h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ActualMeasWfmSize(ViSession vi, ViInt32 arrayMeasFunction, ViInt32* measWfmSize);</p>
        /// 
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <p class="Body">Returns the total available size of an array measurement acquisition. 
        /// </p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Array_Meas_Function">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ActualMeasWfmSize</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">arrayMeasFunction</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The <a href="javascript:LaunchMergedHelp('Digitizers.chm', 'Array_Measurements_refs.html')">array measurement</a> to perform.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Meas_Waveform_Size">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ActualMeasWfmSize</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">measWfmSize</td>
        /// <td class="paramDataType">ViInt32*</td>
        /// <td>Returns the size (in number of samples) of the resulting analysis waveform.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ActualMeasWfmSize(int Array_Meas_Function, out int Meas_Waveform_Size)
        {
            int pInvokeResult = PInvoke.ActualMeasWfmSize(this._handle, Array_Meas_Function, out Meas_Waveform_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_SampleMode</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_SampleMode
        /// </h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_SampleMode (ViSession vi, ViInt32* sampleMode);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Returns the sample mode the digitizer is currently using. 
        /// </p>
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Sampling_Methods.html">Sampling Methods</a></li>             </ul>
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Sample_Mode">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_SampleMode</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">sampleMode</td>
        /// <td class="paramDataType">ViInt32*</td>
        /// <td>Returns the sample mode the digitizer is currently using; NI-SCOPE returns the value of the <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_SAMPLE_MODE.html')"><span class="Monospace">NISCOPE_ATTR_SAMPLE_MODE</span></A> attribute.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int SampleMode(out int Sample_Mode)
        {
            int pInvokeResult = PInvoke.SampleMode(this._handle, out Sample_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_SampleRate</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_SampleRate</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_SampleRate (ViSession vi, ViReal64* actualSampleRate);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Returns the effective sample rate, in samples per second, of the acquired waveform using the current configuration. 
        /// Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Horizontal_Parameters.html')">Coercions of Horizontal Parameters</a> for more information about sample rate coercion.</p>
        /// 
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>   
        ///  <li><a href="digitizers.chm::/Sample_Rate.html">Sample Rate</a></li>  
        /// <li><a href="digitizers.chm::/Horizontal_Parameters.html">Coercions of Horizontal Parameters</a></li>
        ///     <li><a href="digitizers.chm::/Sample_Clock.html">Sample Clock</a></li>      </ul>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Sample_Rate">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_SampleRate</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">actualSampleRate</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>Returns the effective sample rate of the acquired waveform the digitizer acquires for each channel; the driver returns the value held in the <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_HORZ_SAMPLE_RATE.html')"><span class="Monospace">NISCOPE_ATTR_HORZ_SAMPLE_RATE</span></A> attribute.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int SampleRate(out double Sample_Rate)
        {
            int pInvokeResult = PInvoke.SampleRate(this._handle, out Sample_Rate);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureTriggerDigital</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ConfigureTriggerDigital (ViSession vi, ViConstString triggerSource, ViInt32 slope, ViReal64 holdoff, ViReal64 delay);</p>
        /// 
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <p class="Body">Configures the common properties of a digital trigger. 
        /// </p>
        /// 
        /// 
        /// <p class="Body">
        /// 
        /// When you initiate an acquisition, the digitizer waits for the start trigger, which is configured through the <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ACQ_ARM_SOURCE.html')"><span class="Monospace">NISCOPE_ATTR_ACQ_ARM_SOURCE</span></a> (Start Trigger Source) attribute. The default is immediate. Upon receiving the start trigger the digitizer begins sampling pretrigger points. After the digitizer finishes sampling pretrigger points, the digitizer waits for a reference (stop) trigger that you specify with a function such as this one. Upon receiving the reference trigger the digitizer finishes the acquisition after completing posttrigger sampling. With each Configure Trigger function, you specify configuration parameters such as the trigger source and the amount of trigger delay.
        /// </p>
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Notes</strong>& & For multirecord acquisitions, all records after the first record are started by using the Advance Trigger Source. The default is immediate. 
        /// 
        /// <p class="Body">You can adjust the amount of pre-trigger and post-trigger 
        /// samples using the reference position parameter on the <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureHorizontalTiming.html')"><span class="Monospace">niScope_ConfigureHorizontalTiming</span></a> function. 
        /// The default is half of the record length.</p>
        /// 
        /// 
        /// <p class="Body">Some features are not supported by all digitizers. Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')">Features 
        /// Supported by Device</a>  for more information.</p>
        /// 
        /// <p class="Body">Digital triggering is not supported in RIS mode.</p>
        /// </td></tr></table>
        /// 
        /// 
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Digital_Triggers.html">Digital Triggers</a></li>             
        /// 
        /// <li><a href="digitizers.chm::/RIS.html">Equivalent-Time Sampling and Random Interleaved Sampling</a></li>   </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Trigger_Source">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">triggerSource</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>Specifies the trigger source. Refer to 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_SOURCE.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_SOURCE</span></A> for defined values.</td></tr>
        /// 
        /// 
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Slope">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">slope</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specifies whether you want a rising edge or a falling edge to trigger the digitizer.
        /// 
        /// Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_SLOPE.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_SLOPE</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Holdoff">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">holdoff </td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The length of time the digitizer waits after detecting a trigger before enabling NI-SCOPE to detect 
        /// another trigger.  Refer to  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_HOLDOFF.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_HOLDOFF</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Delay">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">delay </td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>How long the digitizer waits after receiving the trigger to start acquiring data. Refer to
        ///  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_DELAY_TIME.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_DELAY_TIME</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureTriggerDigital(string Trigger_Source, int Slope, double Holdoff, double Delay)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerDigital(this._handle, Trigger_Source, Slope, Holdoff, Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerEdge</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureTriggerEdge
        /// </h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ConfigureTriggerEdge (ViSession vi, ViConstString triggerSource, ViReal64 level, ViInt32 slope, ViInt32 triggerCoupling, ViReal64 holdoff, ViReal64 delay);</p>
        /// 
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <p class="Body">Configures common properties for analog edge triggering. 
        /// </p>
        /// 
        /// 
        /// 
        /// <p class="Body">
        /// 
        /// When you initiate an acquisition, the digitizer waits for the start trigger, which is configured through the <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ACQ_ARM_SOURCE.html')"><span class="Monospace">NISCOPE_ATTR_ACQ_ARM_SOURCE</span></a> (Start Trigger Source) attribute. The default is immediate. Upon receiving the start trigger the digitizer begins sampling pretrigger points. After the digitizer finishes sampling pretrigger points, the digitizer waits for a reference (stop) trigger that you specify with a function  such as this one. Upon receiving the reference trigger the digitizer finishes the acquisition after completing posttrigger sampling. With each Configure Trigger function, you specify configuration parameters such as the trigger source and the amount of trigger delay.
        /// </p>
        /// <table class="Borderless"><tr><td class="Icon"><img src="note.gif"></td><td>
        /// <strong>Note</strong>& & Some features are not supported by all digitizers. Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')">Features Supported by Device</a> for more information. </td></tr></table>
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Edge_Triggers.html">Edge Triggers</a></li>               </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Trigger_Source">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">triggerSource</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>Specifies the trigger source. Refer to 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_SOURCE.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_SOURCE</span></A> for defined values.</td></tr>
        /// 
        /// 
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Level">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerEdge</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">level</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The voltage threshold for the trigger. Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_LEVEL</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Slope">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">slope</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specifies whether you want a rising edge or a falling edge to trigger the digitizer.
        /// 
        /// Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_SLOPE.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_SLOPE</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Trigger_Coupling">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerEdge</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">triggerCoupling</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Applies coupling and filtering options to the trigger signal. Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_COUPLING.html')">
        /// <span class="Monospace">NISCOPE_ATTR_TRIGGER_COUPLING</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Holdoff">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">holdoff </td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The length of time the digitizer waits after detecting a trigger before enabling NI-SCOPE to detect 
        /// another trigger.  Refer to  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_HOLDOFF.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_HOLDOFF</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Delay">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">delay </td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>How long the digitizer waits after receiving the trigger to start acquiring data. Refer to
        ///  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_DELAY_TIME.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_DELAY_TIME</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureTriggerEdge(string Trigger_Source, double Level, int Slope, int Trigger_Coupling, double Holdoff, double Delay)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerEdge(this._handle, Trigger_Source, Level, Slope, Trigger_Coupling, Holdoff, Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerVideo</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureTriggerVideo</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ConfigureTriggerVideo (ViSession vi,                                            ViConstString triggerSource,
        ///                                                  ViBoolean enableDCRestore,
        ///                                                  ViInt32 signalFormat,
        ///                                                  ViInt32 event,
        ///                                                  ViInt32 lineNumber, 
        ///                                                  ViInt32 polarity,
        ///                                                  ViInt32 triggerCoupling,
        ///                                                  ViReal64 holdoff,
        ///                                                  ViReal64 delay);
        /// </p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <p class="Body">Configures the common properties for video triggering, including the signal format, TV event, line number, polarity, and enable DC restore. A video trigger occurs when the digitizer finds a valid video signal sync. 
        /// </p>
        /// 
        /// 
        /// 
        /// 
        /// <p class="Body">
        /// 
        /// When you initiate an acquisition, the digitizer waits for the start trigger, which is configured through the <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ACQ_ARM_SOURCE.html')"><span class="Monospace">NISCOPE_ATTR_ACQ_ARM_SOURCE</span></a> (Start Trigger Source) attribute. The default is immediate. Upon receiving the start trigger the digitizer begins sampling pretrigger points. After the digitizer finishes sampling pretrigger points, the digitizer waits for a reference (stop) trigger that you specify with a function  such as this one. Upon receiving the reference trigger the digitizer finishes the acquisition after completing posttrigger sampling. With each Configure Trigger function, you specify configuration parameters such as the trigger source and the amount of trigger delay. 
        /// </p>
        /// <table class="Borderless"><tr><td class="Icon"><img src="note.gif"></td><td>
        /// <strong>Note</strong>& & Some features are not supported by all digitizers. Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')">Features Supported by Device</a> for more information. </td></tr></table>
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Trigger_Source">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">triggerSource</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>Specifies the trigger source. Refer to 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_SOURCE.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_SOURCE</span></A> for defined values.</td></tr>
        /// 
        /// 
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Enable_DC_Restore">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerVideo</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">enableDCRestore</td>
        /// <td class="paramDataType">ViBoolean</td>
        /// <td>Offsets each video line so the clamping level (the portion of the video line between the 
        /// end of the color burst and the beginning of the active image) is moved to zero volt. Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ENABLE_DC_RESTORE.html')"><span class="Monospace">NISCOPE_ATTR_ENABLE_DC_RESTORE</span></a> for defined values.</td></tr>
        /// 
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Signal_Format">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerVideo</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">signalFormat </td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specifies the type of video signal sync the digitizer should look for.  Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TV_TRIGGER_SIGNAL_FORMAT.html')"><span class="Monospace">NISCOPE_ATTR_TV_TRIGGER_SIGNAL_FORMAT</span></a> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Event">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerVideo</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">event </td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specifies the TV event you want to trigger on. You can trigger on a specific or on the next coming line or field of the signal.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Line_Number">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerVideo</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">lineNumber </td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Selects the line number to trigger on. The line number range covers an entire 
        /// frame and is referenced as shown on <a href="javascript:LaunchHelp('Digitizers.chm::/gray_scale_image.html')">Vertical Blanking and 
        /// Synchronization Signal</a>. Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TV_TRIGGER_LINE_NUMBER.html')"><span class="Monospace">NISCOPE_ATTR_TV_TRIGGER_LINE_NUMBER</span></a> for more information.
        /// <p class="Body">Default value: 1</p>
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Polarity">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerVideo</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">polarity</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specifies the polarity of the video signal sync.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Trigger_Coupling">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerEdge</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">triggerCoupling</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Applies coupling and filtering options to the trigger signal. Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_COUPLING.html')">
        /// <span class="Monospace">NISCOPE_ATTR_TRIGGER_COUPLING</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Holdoff">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">holdoff </td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The length of time the digitizer waits after detecting a trigger before enabling NI-SCOPE to detect 
        /// another trigger.  Refer to  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_HOLDOFF.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_HOLDOFF</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Delay">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">delay </td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>How long the digitizer waits after receiving the trigger to start acquiring data. Refer to
        ///  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_DELAY_TIME.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_DELAY_TIME</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureTriggerVideo(string Trigger_Source, bool Enable_DC_Restore, int Signal_Format, int Event, int Line_Number, int Polarity, int Trigger_Coupling, double Holdoff, double Delay)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerVideo(this._handle, Trigger_Source, System.Convert.ToUInt16(Enable_DC_Restore), Signal_Format, Event, Line_Number, Polarity, Trigger_Coupling, Holdoff, Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerHysteresis</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureTriggerHysteresis</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ConfigureTriggerHysteresis (ViSession vi, ViConstString triggerSource, ViReal64 level, ViReal64 hysteresis, ViInt32 slope, ViInt32 triggerCoupling, ViReal64 holdoff, ViReal64 delay);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Configures common properties for analog hysteresis triggering. This kind of trigger specifies an additional value, specified in the <strong>hysteresis</strong> parameter, that a signal must pass through before a trigger can occur. This additional value acts as a kind of buffer zone that keeps noise from triggering an acquisition. 
        /// </p>
        /// 
        /// 
        /// <p class="Body">
        /// 
        /// When you initiate an acquisition, the digitizer waits for the start trigger, which is configured through the <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ACQ_ARM_SOURCE.html')"><span class="Monospace">NISCOPE_ATTR_ACQ_ARM_SOURCE</span> (Start Trigger Source)</a>. The default is immediate. Upon receiving the start trigger the digitizer begins sampling pretrigger points. After the digitizer finishes sampling pretrigger points, the digitizer waits for a reference (stop) trigger that you specify with a function such as this one. Upon receiving the reference trigger the digitizer finishes the acquisition after completing posttrigger sampling. With each Configure Trigger function, you specify configuration parameters such as the trigger source and the amount of trigger delay.
        /// </p>
        /// <table class="Borderless"><tr><td class="Icon"><img src="note.gif"></td><td>
        /// <strong>Note</strong>& & Some features are not supported by all digitizers. Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')">Features Supported by Device</a> for more information. </td></tr></table>
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Hysteresis_Triggers.html">Hysteresis Triggers</a></li>               </ul>
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Trigger_Source">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">triggerSource</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>Specifies the trigger source. Refer to 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_SOURCE.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_SOURCE</span></A> for defined values.</td></tr>
        /// 
        /// 
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Level">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerEdge</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">level</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The voltage threshold for the trigger. Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_LEVEL</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Hysteresis">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerHysteresis</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">hysteresis</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The size of the hysteresis window on either side of the <strong>level</strong> in volts; the digitizer triggers when the trigger signal passes through the hysteresis value you specify with this parameter, has the slope you specify with <strong>slope</strong>, and passes through the <strong>level</strong>. 
        /// 
        /// Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_HYSTERESIS.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_HYSTERESIS</span></A> for defined values.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Slope">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">slope</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specifies whether you want a rising edge or a falling edge to trigger the digitizer.
        /// 
        /// Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_SLOPE.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_SLOPE</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Trigger_Coupling">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerEdge</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">triggerCoupling</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Applies coupling and filtering options to the trigger signal. Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_COUPLING.html')">
        /// <span class="Monospace">NISCOPE_ATTR_TRIGGER_COUPLING</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Holdoff">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">holdoff </td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The length of time the digitizer waits after detecting a trigger before enabling NI-SCOPE to detect 
        /// another trigger.  Refer to  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_HOLDOFF.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_HOLDOFF</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Delay">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">delay </td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>How long the digitizer waits after receiving the trigger to start acquiring data. Refer to
        ///  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_DELAY_TIME.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_DELAY_TIME</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureTriggerHysteresis(string Trigger_Source, double Level, double Hysteresis, int Slope, int Trigger_Coupling, double Holdoff, double Delay)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerHysteresis(this._handle, Trigger_Source, Level, Hysteresis, Slope, Trigger_Coupling, Holdoff, Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerImmediate</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureTriggerImmediate
        /// </h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ConfigureTriggerImmediate (ViSession vi);</p>
        /// 
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <p class="Body">Configures common properties for immediate triggering. Immediate triggering means the digitizer triggers itself. 
        /// </p>
        /// 
        /// 
        /// <p class="Body">When you initiate an acquisition, the digitizer waits for a trigger. You specify the type of trigger that the digitizer waits for with a Configure Trigger function, such as <span class="Monospace">niScope_ConfigureTriggerImmediate</span>. 
        /// </p>
        /// 
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Immediate_Triggers.html">Immediate Triggers</a></li>             </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureTriggerImmediate()
        {
            int pInvokeResult = PInvoke.ConfigureTriggerImmediate(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerSoftware</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureTriggerSoftware
        /// </h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ConfigureTriggerSoftware (ViSession vi, ViReal64 holdoff, ViReal64 delay);</p>
        /// 
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <p class="Body">Configures common properties for software triggering. 
        /// </p>
        /// 
        /// 
        /// 
        /// 
        /// <p class="Body">
        /// 
        /// When you initiate an acquisition, the digitizer waits for the start trigger, which is configured through the 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ACQ_ARM_SOURCE.html')"><span class="Monospace">NISCOPE_ATTR_ACQ_ARM_SOURCE</span></a> 
        /// (Start Trigger Source) attribute. The default is immediate. Upon receiving the start trigger 
        /// the digitizer begins sampling pretrigger points. After the digitizer finishes sampling 
        /// pretrigger points, the digitizer waits for a reference (stop) trigger that you specify with a 
        /// function  such as this one. Upon receiving the reference trigger the digitizer finishes the 
        /// acquisition after completing posttrigger sampling. With each Configure Trigger function, you 
        /// specify configuration parameters such as the trigger source and the amount of trigger delay. </P>
        /// <p class="Body">
        /// To trigger the acquisition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_SendSoftwareTriggerEdge.html')"><span class="Monospace">niScope_SendSoftwareTriggerEdge</span></a>. 
        /// </p>
        /// <table class="Borderless"><tr><td class="Icon"><img src="note.gif"></td><td><strong>Note</strong>& & 
        /// Some features are not supported by all digitizers. Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')">Features Supported by Device</a>  for more information. </td></tr></table>
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Software_Triggers.html">Software Triggers</a></li>               </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Holdoff">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">holdoff </td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The length of time the digitizer waits after detecting a trigger before enabling NI-SCOPE to detect 
        /// another trigger.  Refer to  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_HOLDOFF.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_HOLDOFF</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Delay">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">delay </td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>How long the digitizer waits after receiving the trigger to start acquiring data. Refer to
        ///  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_DELAY_TIME.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_DELAY_TIME</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureTriggerSoftware(double Holdoff, double Delay)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerSoftware(this._handle, Holdoff, Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerWindow</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureTriggerWindow</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ConfigureTriggerWindow (ViSession vi, ViConstString triggerSource, ViReal64 lowLevel, ViReal64 highLevel, ViInt32 windowMode, ViInt32 triggerCoupling, ViReal64 holdoff, ViReal64 delay);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Configures common properties for analog window triggering. A window trigger occurs when a signal enters or leaves a window you specify with the <strong>high level</strong> or <strong>low level</strong> parameters. 
        /// </p>
        /// 
        /// 
        /// <p class="Body">
        /// 
        /// When you initiate an acquisition, the digitizer waits for the start trigger, which is configured through the 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ACQ_ARM_SOURCE.html')"><span class="Monospace">NISCOPE_ATTR_ACQ_ARM_SOURCE</span></a> 
        /// (Start Trigger Source) attribute. The default is immediate. Upon receiving the start trigger 
        /// the digitizer begins sampling pretrigger points. After the digitizer finishes sampling 
        /// pretrigger points, the digitizer waits for a reference (stop) trigger that you specify with a 
        /// function  such as this one. Upon receiving the reference trigger the digitizer finishes the 
        /// acquisition after completing posttrigger sampling. With each Configure Trigger function, you 
        /// specify configuration parameters such as the trigger source and the amount of trigger delay. </P>
        /// <p class="Body">
        /// To trigger the acquisition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_SendSoftwareTriggerEdge.html')"><span class="Monospace">niScope_SendSoftwareTriggerEdge</span></a>. 
        /// </p>
        /// 
        /// <table class="Borderless"><tr><td class="Icon"><img src="note.gif"></td><td><strong>Note</strong>& & 
        /// Some features are not supported by all digitizers. Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')">Features 
        /// Supported by Device</a>  for more information. </td></tr></table>
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Window_Triggers.html">Window Triggers</a></li>               </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Trigger_Source">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">triggerSource</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>Specifies the trigger source. Refer to 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_SOURCE.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_SOURCE</span></A> for defined values.</td></tr>
        /// 
        /// 
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Low_Level">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerWindow</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">lowLevel</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>Passes the voltage threshold you want the digitizer to use for low  triggering.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="High_Level">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerWindow</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">highLevel</td> 
        /// <td class="paramDataType">ViReal64</td>
        /// <td>Passes the voltage threshold you want the digitizer to use for high  triggering.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Window_Mode">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerWindow</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">windowMode </td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specifies whether you want the trigger to occur when the signal enters or leaves a window.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Trigger_Coupling">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerEdge</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">triggerCoupling</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Applies coupling and filtering options to the trigger signal. Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_COUPLING.html')">
        /// <span class="Monospace">NISCOPE_ATTR_TRIGGER_COUPLING</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Holdoff">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">holdoff </td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The length of time the digitizer waits after detecting a trigger before enabling NI-SCOPE to detect 
        /// another trigger.  Refer to  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_HOLDOFF.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_HOLDOFF</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Delay">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">delay </td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>How long the digitizer waits after receiving the trigger to start acquiring data. Refer to
        ///  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_DELAY_TIME.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_DELAY_TIME</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureTriggerWindow(string Trigger_Source, double Low_Level, double High_Level, int Window_Mode, int Trigger_Coupling, double Holdoff, double Delay)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerWindow(this._handle, Trigger_Source, Low_Level, High_Level, Window_Mode, Trigger_Coupling, Holdoff, Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_SendSoftwareTriggerEdge</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_SendSoftwareTriggerEdge</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_SendSoftwareTriggerEdge (ViSession vi,
        ///                                                    ViInt32 whichTrigger);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Sends the selected trigger to the digitizer. Call this function if you 
        /// called <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureTriggerSoftware.html')"><span class="Monospace">niScope_ConfigureTriggerSoftware</span></a>
        ///  when you want the Reference trigger to occur.  You can also call this function to override a misused edge, digital,
        ///  or hysteresis trigger. If you have configured  
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ACQ_ARM_SOURCE.html')"><span class="Monospace">NISCOPE_ATTR_ACQ_ARM_SOURCE</span></a>,   <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ARM_REF_TRIG_SRC.html')">
        /// <span class="Monospace">NISCOPE_ATTR_ARM_REF_TRIG_SRC</span></a>, or   <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ADV_TRIG_SRC.html')"><span class="Monospace">NISCOPE_ATTR_ADV_TRIG_SRC</span></a>, call 
        ///  this function when you want to send the corresponding trigger to the digitizer.
        /// </p>
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Software_Triggers.html">Software Triggers</a></li>               </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Which_Trigger">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_SendSoftwareTriggerEdge</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">whichTrigger</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specifies the type of trigger to send to the digitizer.
        /// <p class = "Body"><strong>Defined Values</strong></p>
        /// <p class ="Body"><span class="Monospace">NISCOPE_VAL_SOFTWARE_TRIGGER_START            (0L)</span> <br>
        /// <span class="Monospace"> NISCOPE_VAL_SOFTWARE_TRIGGER_ARM_REFERENCE    (1L)</span><br>
        /// <span class="Monospace">NISCOPE_VAL_SOFTWARE_TRIGGER_REFERENCE        (2L)</span><br>
        /// <span class="Monospace">NISCOPE_VAL_SOFTWARE_TRIGGER_ADVANCE          (3L)</span> <br>
        /// </p></td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int SendSoftwareTriggerEdge(int Which_Trigger)
        {
            int pInvokeResult = PInvoke.SendSoftwareTriggerEdge(this._handle, Which_Trigger);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_AdjustSampleClockRelativeDelay</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_AdjustSampleClockRelativeDelay</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_AdjustSampleClockRelativeDelay(ViSession 
        /// vi, ViReal64 delay);</p>                                               
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// <p class="Body">Configures the relative sample clock delay (in seconds) when using the internal clock.  Each time this function is called, the sample clock is delayed from the reference clock  by the specified amount of time.</p>
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Sample_Clock.html">Sample Clock</a></li>    <li><a href="digitizers.chm::/Reference_Clock.html">Reference Clock/Phase-Lock Loop</a></li>  <li><a href="nitclk.chm::/niTClk_overview.html">NI-TClk Overview</a></li>
        ///          </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Delay">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">delay </td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>How long the digitizer waits after receiving the trigger to start acquiring data. Refer to
        ///  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_DELAY_TIME.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_DELAY_TIME</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int AdjustSampleClockRelativeDelay(double Delay)
        {
            int pInvokeResult = PInvoke.AdjustSampleClockRelativeDelay(this._handle, Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureClock</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureClock</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ConfigureClock (ViSession vi, ViConstString inputClockSource, ViConstString outputClockSource, ViConstString clockSyncPulseSource, ViBoolean masterEnabled);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Configures the attributes for synchronizing the digitizer to a reference or sending the digitizer's reference clock output to be used as a synchronizing clock for other digitizers.</p>
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & Some features are not supported by all digitizers. Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')">Features Supported by Device</a> for more information.</td></tr></table>
        /// 
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Sample_Clock.html">Sample Clock</a></li>  <li><a href="digitizers.chm::/Sample_Rate.html">Sample Rate</a></li>  
        /// <li><a href="digitizers.chm::/Horizontal_Parameters.html">Coercions of Horizontal Parameters</a></li></ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Input_Clock_Source">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureClock</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">inputClockSource</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>Specifies the input source for the reference clock to which the 100& MHz sample clock is phase-locked. Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_INPUT_CLOCK_SOURCE.html')"><span class="Monospace">NISCOPE_ATTR_INPUT_CLOCK_SOURCE</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Output_Clock_Source">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureClock</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">outputClockSource</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>Specifies the output source for the reference clock to which another scope's sample clock can be phased-locked. Refer to  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_OUTPUT_CLOCK_SOURCE.html')"><span class="Monospace">NISCOPE_ATTR_OUTPUT_CLOCK_SOURCE</span></A> for more information</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Clock_Sync_Pulse_Source">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureClock</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">clockSyncPulseSource</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td> For the NI& 5102, specifies the line on which the sample clock is sent or received. For the NI& 5112/5620/5621/5911, specifies the line on which the one time sync pulse is sent or received. This line should be the same for all devices to be synchronized. 
        /// 
        ///  Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_CLOCK_SYNC_PULSE_SOURCE.html')"><span class="Monospace">NISCOPE_ATTR_CLOCK_SYNC_PULSE_SOURCE</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Master_Enabled">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureClock</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">masterEnabled</td>
        /// <td class="paramDataType">ViBoolean</td>
        /// <td>Specifies whether you want the device to be a master or a slave.  The master device is typically the 
        /// originator of the trigger signal and clock sync pulse.  For a standalone device, set this attribute 
        /// to <span class="Monospace">VI_FALSE</span>.  
        /// 
        /// <p class="Body">Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MASTER_ENABLE.html')"><span class="Monospace">NISCOPE_ATTR_MASTER_ENABLE</span></A> for more information.</p></td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureClock(string Input_Clock_Source, string Output_Clock_Source, string Clock_Sync_Pulse_Source, bool Master_Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureClock(this._handle, Input_Clock_Source, Output_Clock_Source, Clock_Sync_Pulse_Source, System.Convert.ToUInt16(Master_Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureTriggerOutput</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureTriggerOutput
        /// </h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ConfigureTriggerOutput (ViSession vi, ViInt32 triggerEvent, ViConstString triggerOutput);</p>
        /// 
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & This function is obsolete. Consider using <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ExportSignal.html')"><span class="Monospace">niScope_ExportSignal</span></a> instead.</td></tr></table>
        /// 
        /// <p class="Body">Configures the digitizer to generate a signal pulse that other digitizers can detect when configured for digital triggering. </p>
        /// 
        /// 
        /// <p class="Body">
        /// For Traditional NI-DAQ devices, exported signals are still present in the route after the session is closed. 
        /// You must clear the route before closing the session,  or call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_reset.html')"><span class="Monospace">niScope_reset</span></a>.</p>
        /// 
        /// <p class = "body">
        ///  To clear the route,  call this function  again and route NISCOPE_VAL_NONE
        ///   to the line that you had exported. 
        /// 
        /// For example, if you originally called this function  with the trigger event   NISCOPE_VAL_STOP_TRIGGER_EVENT
        ///  routed to the trigger output  NISCOPE_VAL_RTSI_0, 
        /// you would call this function again with   NISCOPE_VAL_NONE routed to 
        /// NISCOPE_VAL_RTSI_0 to clear the route.</P>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Trigger_Event">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureTriggerOutput</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">triggerEvent</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specifies the condition in which this device  generates a digital pulse.</td> </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Trigger_Output">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureTriggerOutput</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">triggerOutput</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>Specifies the hardware signal line on which the digital pulse is generated.
        /// <p class="Body"><strong>Valid Values</strong></p>
        /// <p class="Body"><span class="Monospace">NISCOPE_VAL_NO_EVENT</span><br>
        /// <span class="Monospace">NISCOPE_VAL_STOP_TRIGGER_EVENT</span> <br>
        /// 
        /// <span class="Monospace">NISCOPE_VAL_START_TRIGGER_EVENT</span> <br>
        /// 
        /// <span class="Monospace">NISCOPE_VAL_END_OF_ACQUISITION_EVENT</span> <br>
        /// 
        /// <span class="Monospace">NISCOPE_VAL_END_OF_RECORD_EVENT</span> </p>
        /// 
        /// </td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureTriggerOutput(int Trigger_Event, string Trigger_Output)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerOutput(this._handle, Trigger_Event, Trigger_Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ExportSignal</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ExportSignal</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ExportSignal (ViSession vi,
        ///                                         ViInt32 signal,
        ///                                         ViConstString signalIdentifier,
        ///                                         ViConstString outputTerminal);</p>
        /// 
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & This function replaces <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureTriggerOutput.html')"><span class="Monospace">niScope_ConfigureTriggerOutput</span></a>.
        /// </td></tr></table>
        /// <p class="Body">Configures the digitizer to generate a signal that other devices can detect 
        /// when configured for digital triggering or sharing clocks.  The <strong>signal</strong> parameter 
        /// specifies what condition causes the digitizer to generate the signal.  
        /// The <strong>outputTerminal</strong> parameter specifies where to send the signal  on the hardware 
        /// (such as a PFI connector or RTSI line).</p>
        ///  
        ///  <p class ="Body">In cases where multiple instances of a particular signal exist, use the <strong>signalIdentifier</strong> input to specify 
        ///  which instance to control.  For normal signals, only one instance exists and you should leave 
        ///  this parameter set to the empty string. You can call this function multiple times  and set each available line 
        ///  to a different signal.</p>
        /// <p class ="Body"> To unprogram a specific line on device, call this function with 
        /// the signal you no longer want to export and  
        /// set <strong>outputTerminal</strong> to  <span class="Monospace">NISCOPE_VAL_NONE</span>.</p>
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>        <li><a href="digitizers.chm::/Triggers.html">Triggering</a></li>   <li><a href="digitizers.chm::/5122_State_Model.html">SMC-Based Digitizers Acquisition Engine State Diagram</a></li>  <li><a href="digitizers.chm::/PXI_Trigger_Lines.html">PXI Trigger Lines</a></li>  </ul>
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Signal">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ExportSignal</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">signal</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Signal (clock, trigger, or event) to export.
        ///  <p class="Body">
        /// <strong>Defined Values</strong></p>
        /// 
        /// 
        /// 
        /// 
        /// <table class="Borderless">
        /// 
        /// 
        /// <tr><td>NISCOPE_VAL_REF_TRIGGER</td><td>(1)</td><td>Generate a pulse when detecting the Stop/Reference trigger.
        /// 
        /// </td></tr>
        /// 
        /// <tr><td><span class="Monospace">NISCOPE_VAL_START_TRIGGER</span> </td><td>(2)</td><td>Generate a pulse when detecting a Start trigger.</td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_END_OF_ACQUISITION_EVENT</span></td><td>(3)</td><td>Generate a pulse when the acquisition finishes.</td></tr>
        /// <tr><td>N<span class="Monospace">ISCOPE_VAL_END_OF_RECORD_EVENT</span>  </td><td>(4)</td><td>Generate a pulse at the end of the record.</td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_ADVANCE_TRIGGER</span>   </td><td>(5)</td><td>Generate a pulse when detecting an Advance trigger.</td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_READY_FOR_ADVANCE_EVENT</span>  </td><td>(6)</td><td>Asserts when the digitizer is ready to advance to the next record.</td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_READY_FOR_START_EVENT</span>   </td><td>(7)</td><td>Asserts when the digitizer is initiated and ready to accept a Start trigger and begin sampling.</td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_READY_FOR_REF_EVENT</span> </td><td>(10)</td><td>Asserts when the digitizer is ready to accept a Reference trigger.</td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_REF_CLOCK</span> </td><td>(100)</td><td> Export the Reference clock for the digitizer to the specified terminal.</td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_SAMPLE_CLOCK</span>   </td><td>(101)</td><td>Export the Sample clock for the digitizer to the specified terminal.</td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_5V_OUT</span>  </td><td>(13)</td><td>Exports a 5 V power supply.</td></tr>
        /// </table>
        /// </td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Signal_Identifier">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ExportSignal</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">signalIdentifier</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>Describes the signal being exported.
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Output_Terminal">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ExportSignal</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">outputTerminal</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>Identifies the hardware signal line on which the digital pulse is 
        /// 			   generated.
        /// <p class="Body">
        /// <strong>Defined Values</strong></p>
        /// 
        /// <table class="Borderless">
        /// <tr><td><span class="Monospace">NISCOPE_VAL_RTSI_0</span> </td><td><span class="Monospace">(&quot;VAL_RTSI_0&quot;)</span></td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_RTSI_1</span></td><td><span class="Monospace">(&quot;VAL_RTSI_1&quot;)</span></td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_RTSI_2</span></td><td><span class="Monospace">(&quot;VAL_RTSI_2&quot;)</span></td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_RTSI_3</span> </td><td><span class="Monospace">(&quot;VAL_RTSI_3&quot;)</span></td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_RTSI_4</span></td><td><span class="Monospace">(&quot;VAL_RTSI_4&quot;)</span></td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_RTSI_5</span>  </td><td><span class="Monospace">(&quot;VAL_RTSI_5&quot;)</span></td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_RTSI_6</span></td><td><span class="Monospace">(&quot;VAL_RTSI_6&quot;)</span></td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_RTSI_7</span></td><td><span class="Monospace">(&quot;VAL_RTSI_7&quot;)</span></td></tr>
        /// 
        /// <tr><td>NISCOPE_VAL_PXI_STAR</td><td>(&quot;VAL_PXI_STAR&quot;)</td></tr>
        /// 
        /// <tr><td><span class="Monospace">NISCOPE_VAL_PFI_0</span></td><td><span class="Monospace">(&quot;VAL_PFI_0&quot;)</span></td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_PFI_1</span></td><td><span class="Monospace">(&quot;VAL_PFI_1&quot;)</span></td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_PFI_2</span></td><td><span class="Monospace">(&quot;VAL_PFI_2&quot;)</span></td></tr>
        /// <tr><td><span class="Monospace">NISCOPE_VAL_CLK_OUT</span></td><td><span class="Monospace">(&quot;VAL_CLK_OUT&quot;)</span></td></tr>
        ///  
        /// 
        /// </table>
        /// 
        ///  </td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ExportSignal(int Signal, string Signal_Identifier, string Output_Terminal)
        {
            int pInvokeResult = PInvoke.ExportSignal(this._handle, Signal, Signal_Identifier, Output_Terminal);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureEqualizationFilterCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureEqualizationFilterCoefficients
        /// </h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus _VI_FUNC niScope_ConfigureEqualizationFilterCoefficients (ViSession vi,
        ///                                                                    ViConstString channel,
        ///                                                                    ViInt32 numberOfCoefficients,
        ///                                                                    ViReal64*  coefficients);
        /// </p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Configures the custom coefficients for the equalization FIR filter on the device. 
        /// This filter is designed to compensate the input signal for artifacts introduced to the signal outside
        ///  of the digitizer. Because this filter is a generic FIR filter, any coefficients are valid. 
        ///  Coefficient values should be between +1 and &#8211;1.</p>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Number_Of_Coefficients">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureEqualizationFilterCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">numberOfCoefficients</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The number of coefficients being passed in the <strong>coefficients</strong> array.  
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Coefficients">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureEqualizationFilterCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">coefficients </td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>The custom coefficients for the equalization FIR filter on the device. These 
        /// coefficients should be  between +1 and &#8211;1. 
        /// 
        /// You can obtain the number of coefficients from the <a href= 
        /// "cviNISCOPE_ATTR_EQUALIZATION_NUM_COEFFICIENTS.html"><span class="Monospace">NISCOPE_ATTR_EQUALIZATION_NUM_COEFFICIENTS</span></a> attribute. The <a href= 
        /// "cviNISCOPE_ATTR_EQUALIZATION_FILTER_ENABLED.html"><span class="Monospace">NISCOPE_ATTR_EQUALIZATION_FILTER_ENABLED</span></a> attribute must be set to TRUE to enable the filter.
        /// 
        /// 
        /// 
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureEqualizationFilterCoefficients(string Channel_List, int Number_Of_Coefficients, double[] Coefficients)
        {
            int pInvokeResult = PInvoke.ConfigureEqualizationFilterCoefficients(this._handle, Channel_List, Number_Of_Coefficients, Coefficients);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetEqualizationFilterCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_GetEqualizationFilterCoefficients
        /// </h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus _VI_FUNC niScope_GetEqualizationFilterCoefficients (ViSession vi,
        ///                                                                    ViConstString channel,
        ///                                                                    ViInt32 numberOfCoefficients,
        ///                                                                    ViReal64*  coefficients);
        /// </p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Retrieves the custom coefficients for the equalization FIR filter on the device. This filter is designed to compensate the input signal for artifacts introduced to the signal outside of the digitizer. Because this filter is a generic FIR filter, any coefficients are valid. Coefficient values should be between +1 and &#8211;1.</p>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="channel">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetEqualizationFilterCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channel</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Number_Of_Coefficients">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetEqualizationFilterCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">numberOfCoefficients</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The number of coefficients being passed in the <strong>coefficients</strong> array.  
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Coefficients">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetEqualizationFilterCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">coefficients </td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>The custom coefficients for the equalization FIR filter on the device. These 
        /// coefficients should be  between +1 and &#8211;1. 
        /// 
        /// You can obtain the number of coefficients from the <a href= 
        /// "cviNISCOPE_ATTR_EQUALIZATION_NUM_COEFFICIENTS.html"><span class="Monospace">NISCOPE_ATTR_EQUALIZATION_NUM_COEFFICIENTS</span></a> attribute. 
        /// 
        /// 
        /// 
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int GetEqualizationFilterCoefficients(string channel, int Number_Of_Coefficients, double[] Coefficients)
        {
            int pInvokeResult = PInvoke.GetEqualizationFilterCoefficients(this._handle, channel, Number_Of_Coefficients, Coefficients);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetFrequencyResponse</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_GetFrequencyResponse</h1>
        /// 
        /// 
        /// 
        /// <p class="syntax">ViStatus _VI_FUNC niScope_GetFrequencyResponse (ViSession vi,
        ///                                                 ViConstString channelName,
        ///                                                 ViInt32 bufferSize,
        ///                                                 ViReal64 frequencies[],
        ///                                                 ViReal64 amplitudes[],
        ///                                                 ViReal64 phases[],
        ///                                                 ViInt32* numberOfFrequencies);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Gets the frequency response of the digitizer for the current configurations of the channel attributes. Not  all digitizers support this function.
        ///  </p> 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="vi">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetFrequencyResponse</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">vi</td>
        /// <td class="paramDataType">ViSession</td>
        /// <td>The instrument handle you obtain from  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_init.html')"><span class="Monospace">niScope_init</span></a> that identifies a particular instrument session.</td></tr></table></body>
        /// </html>
        /// </param>
        /// <param name="channel">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetFrequencyResponse</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channel</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="bufferSize">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureEqualizationFilterCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">bufferSize</td>
        /// <td class="paramDataType">ViInt32</td>  
        /// <td>The array size for the frequencies, amplitudes, and phases arrays that you pass in to the other parameters. 
        /// <p class ="body">
        /// To determine the sizes of the buffers to allocate for the frequencies, amplitudes, and phases arrays, pass a value of 0 to the <strong>bufferSize</strong> parameter and a value of NULL to the <strong>frequencies</strong> parameter. In this case, the value returned by the <strong>numberOfFrequencies</strong> parameter is the size of the arrays  necessary to hold the frequencies, amplitudes, and phases. Allocate three arrays of this size, then call this function again (with correct <strong>bufferSize</strong> parameter)  to retrieve the actual values.</p></td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="frequencies">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureEqualizationFilterCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">frequencies</td>
        /// <td class="paramDataType">ViReal64</td><td>  
        /// The array of frequencies that corresponds with the amplitude and phase response of the device.
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="amplitudes">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetFrequencyResponse</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">amplitudes</td>
        /// <td class="paramDataType">ViReal64</td><td> The array of amplitudes that correspond with the magnitude response of the device. 
        /// 
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="phases">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetFrequencyResponse</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">phases</td>
        /// <td class="paramDataType">ViReal64</td> <td> The array of phases that correspond with the phase response of the device. 
        /// </td></tr>
        /// </table></body>
        /// </html> 
        /// </param>
        /// <param name="numberOfFrequencies">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetFrequencyResponse</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">numberOfFrequencies</td>
        /// <td class="paramDataType">ViInt32</td> <td>  
        /// 
        /// Returns the number of frequencies in the returned spectrum.
        /// 
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int GetFrequencyResponse(string channel, int bufferSize, double[] frequencies, double[] amplitudes, double[] phases, out int numberOfFrequencies)
        {
            int pInvokeResult = PInvoke.GetFrequencyResponse(this._handle, channel, bufferSize, frequencies, amplitudes, phases, out numberOfFrequencies);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Abort</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_Abort</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_Abort (ViSession vi);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Aborts an acquisition and returns the digitizer to the Idle state. Call this function  if the digitizer times out waiting for a trigger. 
        /// </p>
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Programming_Flow.html">NI-SCOPE  Programming Flow</a></li>       <li><a href="digitizers.chm::/Acquisition_Functions.html">Acquisition Functions</a></li>      </ul>
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int Abort()
        {
            int pInvokeResult = PInvoke.Abort(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_AcquisitionStatus</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_AcquisitionStatus
        /// </h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_AcquisitionStatus (ViSession vi, ViInt32* status);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Returns status information about the acquisition to the <strong>status</strong> output parameter.
        /// </p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Acquisition_Status">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_AcquisitionStatus</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">status</td>
        /// <td class="paramDataType">ViInt32*</td>
        /// <td>Returns whether the acquisition is complete, in progress, or unknown. 
        /// 
        /// <p class="Body"><strong>Defined Values</strong></p>
        /// <p class="Body"><span class="Monospace">NISCOPE_VAL_ACQ_COMPLETE</span>
        /// </p>
        /// <P CLASS="BODY"><span class="Monospace">NISCOPE_VAL_ACQ_IN_PROGRESS</span>
        /// </P>
        /// <P CLASS="BODY"><span class="Monospace">NISCOPE_VAL_ACQ_STATUS_UNKNOWN</span></p></td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int AcquisitionStatus(out int Acquisition_Status)
        {
            int pInvokeResult = PInvoke.AcquisitionStatus(this._handle, out Acquisition_Status);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Commit</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_Commit</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_Commit (ViSession vi); </p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Commits to hardware all the parameter settings associated with the task.
        /// Use this function if you want a parameter change to be immediately reflected in 
        /// the hardware. This function is  not supported for Traditional NI-DAQ (Legacy) devices.</p>
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/5122_State_Model.html">SMC-Based Digitizers Acquisition Engine State Diagram</a></li>  <li><a href="digitizers.chm::/Programming_Flow.html">NI-SCOPE  Programming Flow</a></li>           </ul>
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int Commit()
        {
            int pInvokeResult = PInvoke.Commit(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_Fetch</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_Fetch (ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 numSamples, ViReal64*  wfm, struct niScope_wfmInfo* wfmInfo);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Returns the waveform from a previously initiated acquisition that the digitizer acquires for the specified channel.   This function returns scaled voltage waveforms.
        /// </p>
        /// <p class="Body">This function may return multiple waveforms depending on the number of channels, the acquisition type, and the number of records you specify. </p>
        /// 
        /// 
        /// <table class="Borderless"><tr><td class="Icon"><img src="note.gif"></td><td><strong>Notes</strong>& & You can use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_Read.html')">niScope_Read</a> instead of this function. niScope_Read starts an acquisition on all enabled channels, 
        /// waits for the acquisition to complete, and returns the waveform for the specified channel.
        /// <p class="Body">
        /// Some functionality, such as time stamping, is not supported in all digitizers. Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')">Features Supported by Device</a>  for more information.</p> </td></tr></table>
        /// 
        /// 
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Fetching_Data.html">Fetching Data</a></li>   <li><a href="digitizers.chm::/Continuously_Acquiring_Data.html">Acquiring Data Continuously</a></li>          </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Timeout">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">timeout</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The time to wait in seconds for data to be acquired; using 0 for this parameter tells NI-SCOPE to fetch whatever is currently available.  Using -1 for this parameter implies infinite timeout.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Num_Samples">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">numSamples</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The  maximum number of samples to fetch for each waveform. If the acquisition finishes
        ///  with fewer points than requested, some devices return partial data if the acquisition finished, 
        ///  was aborted, or a timeout of 0 was used. If it fails to complete within the timeout period, the function returns an 
        /// error.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Wfm">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">wfm </td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>Returns an array whose length is the <strong>numSamples</strong> times number of waveforms. Call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the number of waveforms. 
        /// 
        /// <p class="Body">NI-SCOPE returns this data sequentially, so all record 0 waveforms are first. For example, with a channel list of 0,1, you would have the following index values: 
        /// </p>
        /// <p class="Indent1">index 0 = record 0, channel 0
        /// </p>
        /// <p class="Indent1">index <em>x</em> = record 0, channel 1
        /// </p>
        /// <p class="Indent1">index 2<em>x</em> = record 1, channel 0
        /// </p>
        /// <p class="Indent1">index 3<em>x</em> = record 1, channel 1
        /// </p>
        /// <p class="Body">Where <em>x</em> = the record length</p></td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Wfm_Info">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">wfmInfo</td>
        /// <td class="paramDataType">struct niScope_ wfmInfo*</td>
        /// <td>Returns an array of structures with the following timing and scaling information about each waveform:
        /// 
        /// <ul>
        /// <li><strong>relativeInitialX</strong>&#8212;the time (in seconds) from the trigger to the first sample in the fetched 
        /// waveform</li>
        /// <li><strong>absoluteInitialX</strong>&#8212;timestamp (in seconds) of the first fetched sample. This timestamp is comparable between records and acquisitions; devices that do not support this parameter use 0 for this output.</li>
        /// <li><strong>xIncrement</strong>&#8212;the time between points in the acquired waveform in seconds</li>
        /// <li><strong>actualSamples</strong>&#8212;the actual number of samples fetched and placed in the waveform array</li>
        /// <li><strong>gain</strong>&#8212;the gain factor of the given channel; useful for scaling binary data with the following formula:</li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset</p>
        /// <ul>
        /// 
        /// <li><strong>offset</strong>&#8212;the offset factor of the given channel; useful for scaling binary data with the following 
        ///  formula:
        /// </li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset
        /// </p>
        /// <p class="Body">Call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the size of this array.</p></td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int Fetch(string Channel_List, double Timeout, int Num_Samples, double[] Wfm, niScopeWfmInfo[] Wfm_Info)
        {
            int pInvokeResult = PInvoke.Fetch(this._handle, Channel_List, Timeout, Num_Samples, Wfm, Wfm_Info);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_FetchComplex</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_FetchComplex</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">   niScope_FetchComplex (
        /// ViSession vi,
        /// ViConstString channelList,
        /// ViReal64 timeout,
        /// ViInt32 numSamples,
        /// NIComplexNumber* wfm,
        /// struct niScope_wfmInfo* wfmInfo);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">
        /// Retrieves data that the digitizer has acquired from a previously initiated acquisition and returns a one-dimensional array of complex, scaled waveforms.
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Timeout">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">timeout</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The time to wait in seconds for data to be acquired; using 0 for this parameter tells NI-SCOPE to fetch whatever is currently available.  Using -1 for this parameter implies infinite timeout.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Num_Samples">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">numSamples</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The  maximum number of samples to fetch for each waveform. If the acquisition finishes
        ///  with fewer points than requested, some devices return partial data if the acquisition finished, 
        ///  was aborted, or a timeout of 0 was used. If it fails to complete within the timeout period, the function returns an 
        /// error.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Wfm">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_FetchComplex</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">wfm</td>
        /// <td class="paramDataType">NIComplexNumber*</td>
        /// <td>Returns an array whose length is the <strong>numSamples</strong> times number of waveforms. Call   <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the number of waveforms. </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Wfm_Info">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">wfmInfo</td>
        /// <td class="paramDataType">struct niScope_ wfmInfo*</td>
        /// <td>Returns an array of structures with the following timing and scaling information about each waveform:
        /// 
        /// <ul>
        /// <li><strong>relativeInitialX</strong>&#8212;the time (in seconds) from the trigger to the first sample in the fetched 
        /// waveform</li>
        /// <li><strong>absoluteInitialX</strong>&#8212;timestamp (in seconds) of the first fetched sample. This timestamp is comparable between records and acquisitions; devices that do not support this parameter use 0 for this output.</li>
        /// <li><strong>xIncrement</strong>&#8212;the time between points in the acquired waveform in seconds</li>
        /// <li><strong>actualSamples</strong>&#8212;the actual number of samples fetched and placed in the waveform array</li>
        /// <li><strong>gain</strong>&#8212;the gain factor of the given channel; useful for scaling binary data with the following formula:</li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset</p>
        /// <ul>
        /// 
        /// <li><strong>offset</strong>&#8212;the offset factor of the given channel; useful for scaling binary data with the following 
        ///  formula:
        /// </li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset
        /// </p>
        /// <p class="Body">Call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the size of this array.</p></td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int FetchComplex(string Channel_List, double Timeout, int Num_Samples, nicomplexnumber[] Wfm, niScopeWfmInfo[] Wfm_Info)
        {
            int pInvokeResult = PInvoke.FetchComplex(this._handle, Channel_List, Timeout, Num_Samples, Wfm, Wfm_Info);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_FetchComplexBinary16</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_FetchComplexBinary16</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">  niScope_FetchComplexBinary16 (
        /// ViSession vi,
        /// ViConstString channelList,
        /// ViReal64 timeout,
        /// ViInt32 numSamples,
        /// NIComplexI16* wfm,
        /// Struct niScope_wfmInfo* wfmInfo);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">
        /// Retrieves data from single channels and records. Returns a one-dimensional array of complex binary 16-bit waveforms.
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Timeout">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">timeout</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The time to wait in seconds for data to be acquired; using 0 for this parameter tells NI-SCOPE to fetch whatever is currently available.  Using -1 for this parameter implies infinite timeout.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Num_Samples">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">numSamples</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The  maximum number of samples to fetch for each waveform. If the acquisition finishes
        ///  with fewer points than requested, some devices return partial data if the acquisition finished, 
        ///  was aborted, or a timeout of 0 was used. If it fails to complete within the timeout period, the function returns an 
        /// error.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Wfm">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_FetchComplexBinary16</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">wfm</td>
        /// <td class="paramDataType">NIComplexI16*</td>
        /// <td>Returns an array whose length is the <strong>numSamples</strong> times number of waveforms. Call   <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the number of waveforms. </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Wfm_Info">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">wfmInfo</td>
        /// <td class="paramDataType">struct niScope_ wfmInfo*</td>
        /// <td>Returns an array of structures with the following timing and scaling information about each waveform:
        /// 
        /// <ul>
        /// <li><strong>relativeInitialX</strong>&#8212;the time (in seconds) from the trigger to the first sample in the fetched 
        /// waveform</li>
        /// <li><strong>absoluteInitialX</strong>&#8212;timestamp (in seconds) of the first fetched sample. This timestamp is comparable between records and acquisitions; devices that do not support this parameter use 0 for this output.</li>
        /// <li><strong>xIncrement</strong>&#8212;the time between points in the acquired waveform in seconds</li>
        /// <li><strong>actualSamples</strong>&#8212;the actual number of samples fetched and placed in the waveform array</li>
        /// <li><strong>gain</strong>&#8212;the gain factor of the given channel; useful for scaling binary data with the following formula:</li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset</p>
        /// <ul>
        /// 
        /// <li><strong>offset</strong>&#8212;the offset factor of the given channel; useful for scaling binary data with the following 
        ///  formula:
        /// </li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset
        /// </p>
        /// <p class="Body">Call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the size of this array.</p></td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int FetchComplexBinary16(string Channel_List, double Timeout, int Num_Samples, out short Wfm, niScopeWfmInfo[] Wfm_Info)
        {
            int pInvokeResult = PInvoke.FetchComplexBinary16(this._handle, Channel_List, Timeout, Num_Samples, out Wfm, Wfm_Info);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchBinary8</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_FetchBinary8</h1>
        /// 
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_FetchBinary8 (ViSession vi, ViConstString channelList, ViReal64 timeout,	ViInt32 numSamples, ViInt8* wfm, struct niScope_wfmInfo* wfmInfo);</p>
        /// 
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <p class="Body">Retrieves data from a previously initiated acquisition and returns binary 8-bit waveforms. This function may return multiple waveforms depending on the number of channels, the acquisition type, and the number of records you specify. 
        /// </p>
        /// 
        /// 
        /// <p class="Body">Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Using_Fetch_Functions.html')">Using Fetch Functions</a> for more information on using this function. 
        /// </p>
        /// <table class="Borderless"><tr><td class="Icon"><img src="note.gif"></td><td><strong>Note</strong>& & Some functionality, such as time stamping, is not supported in all digitizers. Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')">
        /// Features Supported by Device</a>  for more information. </td></tr></table>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Timeout">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">timeout</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The time to wait in seconds for data to be acquired; using 0 for this parameter tells NI-SCOPE to fetch whatever is currently available.  Using -1 for this parameter implies infinite timeout.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Num_Samples">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">numSamples</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The  maximum number of samples to fetch for each waveform. If the acquisition finishes
        ///  with fewer points than requested, some devices return partial data if the acquisition finished, 
        ///  was aborted, or a timeout of 0 was used. If it fails to complete within the timeout period, the function returns an 
        /// error.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Wfm">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchBinary8</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">wfm </td>
        /// <td class="paramDataType">ViInt8*</td>
        /// <td>Returns an array whose length is the <strong>numSamples</strong> times number of waveforms. Call  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the number of waveforms.
        /// 
        /// <p class="Body">NI-SCOPE returns this data sequentially, so all record 0 waveforms are first. For example, with a channel list of 0,1, you would have the following index values: 
        /// </p>
        /// <p class="Indent1">index 0 = record 0, channel 0
        /// </p>
        /// <p class="Indent1">index <em>x</em> = record 0, channel 1
        /// </p>
        /// <p class="Indent1">index 2<em>x</em> = record 1, channel 0
        /// </p>
        /// <p class="Indent1">index 3<em>x</em> = record 1, channel 1
        /// </p>
        /// <p class="Indent1">Where <em>x</em> = the record length</p></td></tr>
        /// 
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Wfm_Info">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">wfmInfo</td>
        /// <td class="paramDataType">struct niScope_ wfmInfo*</td>
        /// <td>Returns an array of structures with the following timing and scaling information about each waveform:
        /// 
        /// <ul>
        /// <li><strong>relativeInitialX</strong>&#8212;the time (in seconds) from the trigger to the first sample in the fetched 
        /// waveform</li>
        /// <li><strong>absoluteInitialX</strong>&#8212;timestamp (in seconds) of the first fetched sample. This timestamp is comparable between records and acquisitions; devices that do not support this parameter use 0 for this output.</li>
        /// <li><strong>xIncrement</strong>&#8212;the time between points in the acquired waveform in seconds</li>
        /// <li><strong>actualSamples</strong>&#8212;the actual number of samples fetched and placed in the waveform array</li>
        /// <li><strong>gain</strong>&#8212;the gain factor of the given channel; useful for scaling binary data with the following formula:</li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset</p>
        /// <ul>
        /// 
        /// <li><strong>offset</strong>&#8212;the offset factor of the given channel; useful for scaling binary data with the following 
        ///  formula:
        /// </li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset
        /// </p>
        /// <p class="Body">Call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the size of this array.</p></td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int FetchBinary8(string Channel_List, double Timeout, int Num_Samples, sbyte[] Wfm, niScopeWfmInfo[] Wfm_Info)
        {
            int pInvokeResult = PInvoke.FetchBinary8(this._handle, Channel_List, Timeout, Num_Samples, Wfm, Wfm_Info);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchBinary16</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_FetchBinary16</h1>
        /// 
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_FetchBinary16 (ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 numSamples, ViInt16* wfm, struct niScope_wfmInfo* wfmInfo);</p>
        /// 
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <p class="Body">Retrieves data from a previously initiated acquisition and returns binary 16-bit waveforms. 
        /// This function may return multiple waveforms depending on the number of channels, the acquisition type, 
        /// and the number of records you specify. 
        /// </p>
        /// 
        /// 
        /// 
        /// 
        /// <p class="Body">Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Using_Fetch_Functions.html')">Using Fetch Functions</a> for more information on using this function. 
        /// </p>
        /// <table class="Borderless"><tr><td class="Icon"><img src="note.gif"></td><td><strong>Note</strong>& & Some functionality, such as time stamping, is not supported in all digitizers. Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')">Features Supported by Device</a>  for more information. </td></tr></table>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Timeout">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">timeout</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The time to wait in seconds for data to be acquired; using 0 for this parameter tells NI-SCOPE to fetch whatever is currently available.  Using -1 for this parameter implies infinite timeout.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Num_Samples">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">numSamples</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The  maximum number of samples to fetch for each waveform. If the acquisition finishes
        ///  with fewer points than requested, some devices return partial data if the acquisition finished, 
        ///  was aborted, or a timeout of 0 was used. If it fails to complete within the timeout period, the function returns an 
        /// error.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Wfm">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchBinary16</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">wfm </td>
        /// <td class="paramDataType">ViInt16*</td>
        /// <td>Returns an array whose length is the <strong>numSamples</strong> times number of waveforms. Call  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the number of waveforms.
        /// <p class="Body">NI-SCOPE returns this data sequentially, so all record 0 waveforms are first. For example, with a channel list of 0,1, you would have the following index values: 
        /// </p>
        /// <p class="Indent1">index 0 = record 0, channel 0
        /// </p>
        /// <p class="Indent1">index <em>x</em> = record 0, channel 1
        /// </p>
        /// <p class="Indent1">index 2<em>x</em> = record 1, channel 0
        /// </p>
        /// <p class="Indent1">index 3<em>x</em> = record 1, channel 1
        /// </p>
        /// <p class="Body">Where <em>x</em> = the record length</p></td></tr>
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Wfm_Info">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">wfmInfo</td>
        /// <td class="paramDataType">struct niScope_ wfmInfo*</td>
        /// <td>Returns an array of structures with the following timing and scaling information about each waveform:
        /// 
        /// <ul>
        /// <li><strong>relativeInitialX</strong>&#8212;the time (in seconds) from the trigger to the first sample in the fetched 
        /// waveform</li>
        /// <li><strong>absoluteInitialX</strong>&#8212;timestamp (in seconds) of the first fetched sample. This timestamp is comparable between records and acquisitions; devices that do not support this parameter use 0 for this output.</li>
        /// <li><strong>xIncrement</strong>&#8212;the time between points in the acquired waveform in seconds</li>
        /// <li><strong>actualSamples</strong>&#8212;the actual number of samples fetched and placed in the waveform array</li>
        /// <li><strong>gain</strong>&#8212;the gain factor of the given channel; useful for scaling binary data with the following formula:</li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset</p>
        /// <ul>
        /// 
        /// <li><strong>offset</strong>&#8212;the offset factor of the given channel; useful for scaling binary data with the following 
        ///  formula:
        /// </li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset
        /// </p>
        /// <p class="Body">Call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the size of this array.</p></td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int FetchBinary16(string Channel_List, double Timeout, int Num_Samples, short[] Wfm, niScopeWfmInfo[] Wfm_Info)
        {
            int pInvokeResult = PInvoke.FetchBinary16(this._handle, Channel_List, Timeout, Num_Samples, Wfm, Wfm_Info);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchBinary32</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_FetchBinary32
        /// </h1>
        /// 
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_FetchBinary32 (ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 numSamples, ViInt32* wfm, struct niScope_wfmInfo* wfmInfo);</p>
        /// 
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <p class="Body">Retrieves data from a previously initiated acquisition and returns binary 32-bit waveforms. This function may return multiple waveforms depending on the number of channels, the acquisition type, and the number of records you specify. 
        /// </p>
        /// 
        /// 
        /// 
        /// 
        /// <p class="Body">Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Using_Fetch_Functions.html')">Using Fetch Functions</a> for more information on using this function. 
        /// </p>
        /// <table class="Borderless"><tr><td class="Icon"><img src="note.gif"></td><td><strong>Note</strong>& & Some functionality, such as time stamping, is not supported in all digitizers. Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')">
        /// Features Supported by Device</a>  for more information. </td></tr></table>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Timeout">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">timeout</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The time to wait in seconds for data to be acquired; using 0 for this parameter tells NI-SCOPE to fetch whatever is currently available.  Using -1 for this parameter implies infinite timeout.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Num_Samples">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">numSamples</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The  maximum number of samples to fetch for each waveform. If the acquisition finishes
        ///  with fewer points than requested, some devices return partial data if the acquisition finished, 
        ///  was aborted, or a timeout of 0 was used. If it fails to complete within the timeout period, the function returns an 
        /// error.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Wfm">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchBinary32</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">wfm </td>
        /// <td class="paramDataType">ViInt32*</td>
        /// <td>Returns an array whose length is the <strong>numSamples</strong> times number of waveforms. Call  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the number of waveforms.
        /// 
        /// <p class="Body">NI-SCOPE returns this data sequentially, so all record 0 waveforms are first. For example, with a channel list of 0,1, you would have the following index values: 
        /// </p>
        /// <p class="Indent1">index 0 = record 0, channel 0
        /// </p>
        /// <p class="Indent1">index <em>x</em> = record 0, channel 1
        /// </p>
        /// <p class="Indent1">index 2<em>x</em> = record 1, channel 0
        /// </p>
        /// <p class="Indent1">index 3<em>x</em> = record 1, channel 1
        /// </p>
        /// <p class="Body">Where <em>x</em> = the record length</p></td></tr>
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Wfm_Info">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">wfmInfo</td>
        /// <td class="paramDataType">struct niScope_ wfmInfo*</td>
        /// <td>Returns an array of structures with the following timing and scaling information about each waveform:
        /// 
        /// <ul>
        /// <li><strong>relativeInitialX</strong>&#8212;the time (in seconds) from the trigger to the first sample in the fetched 
        /// waveform</li>
        /// <li><strong>absoluteInitialX</strong>&#8212;timestamp (in seconds) of the first fetched sample. This timestamp is comparable between records and acquisitions; devices that do not support this parameter use 0 for this output.</li>
        /// <li><strong>xIncrement</strong>&#8212;the time between points in the acquired waveform in seconds</li>
        /// <li><strong>actualSamples</strong>&#8212;the actual number of samples fetched and placed in the waveform array</li>
        /// <li><strong>gain</strong>&#8212;the gain factor of the given channel; useful for scaling binary data with the following formula:</li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset</p>
        /// <ul>
        /// 
        /// <li><strong>offset</strong>&#8212;the offset factor of the given channel; useful for scaling binary data with the following 
        ///  formula:
        /// </li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset
        /// </p>
        /// <p class="Body">Call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the size of this array.</p></td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int FetchBinary32(string Channel_List, double Timeout, int Num_Samples, int[] Wfm, niScopeWfmInfo[] Wfm_Info)
        {
            int pInvokeResult = PInvoke.FetchBinary32(this._handle, Channel_List, Timeout, Num_Samples, Wfm, Wfm_Info);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetNormalizationCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_GetNormalizationCoefficients</h1>
        /// 
        /// 
        /// 
        /// <p class="syntax">ViStatus _VI_FUNC niScope_GetNormalizationCoefficients   (ViSession vi,
        ///                                                          ViConstString channelList,
        ///                                                          ViInt32 bufferSize,
        ///                                                          struct niScope_coefficientInfo coefficientInfo[],
        ///                                                          ViInt32* numberOfCoefficientSets);
        /// 
        /// 
        ///                                                </p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">  Returns coefficients that can be used to convert binary data to normalized and calibrated data.
        ///  </p> 
        /// 
        /// 
        /// <p class="Body"> 
        /// 
        /// Refer to 
        /// <a href="Digitizers.chm::/scaling_and_norm_binary_data.html">
        /// Scaling and Normalization of Binary Data</a> for more information about how to use this function.</p>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="vi">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetFrequencyResponse</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">vi</td>
        /// <td class="paramDataType">ViSession</td>
        /// <td>The instrument handle you obtain from  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_init.html')"><span class="Monospace">niScope_init</span></a> that identifies a particular instrument session.</td></tr></table></body>
        /// </html>
        /// </param>
        /// <param name="channelList">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetNormalizationCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channel
        /// List</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="arraySize">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetNormalizationCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">bufferSize</td>
        /// <td class="paramDataType">ViInt32</td>  
        /// <td>The array size for the  <strong>coefficentInfo</strong> parameter. 
        /// <p class ="body"> To determine the size of the buffer to allocate for <strong>coefficientInfo</strong>, pass a value of 0 to the <strong>buffersize</strong> parameter and a value of NULL to the <strong>coefficientInfo</strong> parameter. In this case, the return value of the  <strong>numberOfCoefficientSets</strong> parameter is the size of the array necessary to hold the coefficient structures. Allocate an array of niScope_coefficientInfo structures of this size, then call this function again (with the correct <strong>bufferSize</strong> parameter) to retrieve the actual values.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="coefficientInfo">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetNormalizationCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">coefficientInfo</td>
        /// <td class="paramDataType"> struct niScope_coefficientInfo</td> <td>  
        /// An array of structures containing gain and offset coefficients for a given channel. 
        /// 
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="numberOfCoefficientSets">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetNormalizationCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">numberOfCoefficientSets</td>
        /// <td class="paramDataType">ViInt32*</td> <td>  
        /// Returns the  number of coefficient sets returned in the <strong>coefficientInfo</strong> array. 
        /// 
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int GetNormalizationCoefficients(string channelList, int arraySize, System.IntPtr coefficientInfo, out int numberOfCoefficientSets)
        {
            int pInvokeResult = PInvoke.GetNormalizationCoefficients(this._handle, channelList, arraySize, coefficientInfo, out numberOfCoefficientSets);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetScalingCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_GetScalingCoefficients</h1>
        /// 
        /// 
        /// 
        /// <p class="syntax">ViStatus _VI_FUNC niScope_GetScalingCoefficients (ViSession vi, 
        ///                                                    ViConstString channelList,
        ///                                                    ViInt32 bufferSize,
        ///                                                    struct niScope_coefficientInfo coefficientInfo[],
        ///                                                    ViInt32* numberOfCoefficientSets);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body"> Returns coefficients that can be used to scale binary data to volts.</p>
        /// 
        /// 
        /// <p class="Body"> 
        /// 
        /// Refer to 
        /// <a href="Digitizers.chm::/scaling_and_norm_binary_data.html">
        /// Scaling and Normalization of Binary Data</a> for more information about how to use this function.</p>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="vi">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetFrequencyResponse</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">vi</td>
        /// <td class="paramDataType">ViSession</td>
        /// <td>The instrument handle you obtain from  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_init.html')"><span class="Monospace">niScope_init</span></a> that identifies a particular instrument session.</td></tr></table></body>
        /// </html>
        /// </param>
        /// <param name="channelList">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetScalingCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="arraySize">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetNormalizationCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">bufferSize</td>
        /// <td class="paramDataType">ViInt32</td>  
        /// <td>The array size for the  <strong>coefficentInfo</strong> parameter. 
        /// <p class ="body"> To determine the size of the buffer to allocate for <strong>coefficientInfo</strong>, pass a value of 0 to the <strong>buffersize</strong> parameter and a value of NULL to the <strong>coefficientInfo</strong> parameter. In this case, the return value of the  <strong>numberOfCoefficientSets</strong> parameter is the size of the array necessary to hold the coefficient structures. Allocate an array of niScope_coefficientInfo structures of this size, then call this function again (with the correct <strong>bufferSize</strong> parameter) to retrieve the actual values.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="coefficientInfo">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetNormalizationCoefficients</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">coefficientInfo</td>
        /// <td class="paramDataType"> struct niScope_coefficientInfo</td> <td>  
        /// An array of structures containing gain and offset coefficients for a given channel. 
        /// 
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="numberOfCoefficientSets">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetFrequencyResponse</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">numberOfCoefficientSets</td>
        /// <td class="paramDataType">ViInt32</td> <td>  
        /// Returns the  number of coefficient sets returned in the <strong>coefficientInfo</strong> array. 
        /// 
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int GetScalingCoefficients(string channelList, int arraySize, System.IntPtr coefficientInfo, out int numberOfCoefficientSets)
        {
            int pInvokeResult = PInvoke.GetScalingCoefficients(this._handle, channelList, arraySize, coefficientInfo, out numberOfCoefficientSets);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_InitiateAcquisition</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_InitiateAcquisition</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_InitiateAcquisition (ViSession vi);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Initiates a waveform acquisition. 
        /// </p>
        /// <p class="Body">After calling this function, the digitizer leaves the Idle state and waits for a trigger. 
        /// The digitizer acquires a waveform for each channel you enable with  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureVertical.html')"><span class="Monospace">niScope_ConfigureVertical</span></a>.
        /// </p>
        /// 
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/5122_State_Model.html">SMC-Based Digitizers Acquisition Engine State Diagram</a></li>    <li><a href="digitizers.chm::/Programming_Flow.html">NI-SCOPE  Programming Flow</a></li>           </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int InitiateAcquisition()
        {
            int pInvokeResult = PInvoke.InitiateAcquisition(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_Read</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_Read</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_Read (ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 numSamples, ViReal64* wfm, struct niScope_wfmInfo* wfmInfo);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Initiates an acquisition, waits for it to complete, and retrieves the data. The process  is similar to calling <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_InitiateAcquisition.html')"><span class="Monospace">niScope_InitiateAcquisition</span></a>, 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_AcquisitionStatus.html')"><span class="Monospace">niScope_AcquisitionStatus</span></a>, and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_Fetch.html')"><span class="Monospace">niScope_Fetch</span></a>. The only difference is that with <span class="Monospace">niScope_Read</span>, you enable all channels specified with <strong>channelList</strong> before the acquisition; in the other method, you enable the channels with <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureVertical.html')"><span class="Monospace">niScope_ConfigureVertical</span></a>.
        /// </p>
        /// <p class="Body">This function may return multiple waveforms depending on the number of channels, the acquisition type, and the number of records you specify. 
        /// </p>
        /// <table class="Borderless"><tr><td class="Icon"><img src="note.gif"></td><td><strong>Note</strong>& & Some functionality is not supported in all digitizers. Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')">
        /// Features Supported by Device</a>  for more information. </td></tr></table>
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Acquisition_Functions.html">Acquisition Functions</a></li>   <li><a href="digitizers.chm::/Programming_Flow.html">NI-SCOPE  Programming Flow</a></li>            </ul>
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Timeout">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">timeout</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The time to wait in seconds for data to be acquired; using 0 for this parameter tells NI-SCOPE to fetch whatever is currently available.  Using -1 for this parameter implies infinite timeout.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Num_Samples">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">numSamples</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The  maximum number of samples to fetch for each waveform. If the acquisition finishes
        ///  with fewer points than requested, some devices return partial data if the acquisition finished, 
        ///  was aborted, or a timeout of 0 was used. If it fails to complete within the timeout period, the function returns an 
        /// error.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Wfm">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_Read</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">wfm</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>Returns an array whose length is the <strong>numSamples</strong> times number of waveforms. Call   <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the number of waveforms. 
        /// 
        /// <p class="Body">NI-SCOPE returns this data sequentially, so all record 0 waveforms are first. For example, with a channel list of 0,1, you would have the following index values: 
        /// </p>
        /// <p class="Indent1">index 0 = record 0, channel 0
        /// </p>
        /// <p class="Indent1">index <em>x</em> = record 0, channel 1
        /// </p>
        /// <p class="Indent1">index 2<em>x</em> = record 1, channel 0
        /// </p>
        /// <p class="Indent1">index 3<em>x</em> = record 1, channel 1
        /// </p>
        /// Where <em>x</em> = the record length</td></tr>
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Wfm_Info">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">wfmInfo</td>
        /// <td class="paramDataType">struct niScope_ wfmInfo*</td>
        /// <td>Returns an array of structures with the following timing and scaling information about each waveform:
        /// 
        /// <ul>
        /// <li><strong>relativeInitialX</strong>&#8212;the time (in seconds) from the trigger to the first sample in the fetched 
        /// waveform</li>
        /// <li><strong>absoluteInitialX</strong>&#8212;timestamp (in seconds) of the first fetched sample. This timestamp is comparable between records and acquisitions; devices that do not support this parameter use 0 for this output.</li>
        /// <li><strong>xIncrement</strong>&#8212;the time between points in the acquired waveform in seconds</li>
        /// <li><strong>actualSamples</strong>&#8212;the actual number of samples fetched and placed in the waveform array</li>
        /// <li><strong>gain</strong>&#8212;the gain factor of the given channel; useful for scaling binary data with the following formula:</li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset</p>
        /// <ul>
        /// 
        /// <li><strong>offset</strong>&#8212;the offset factor of the given channel; useful for scaling binary data with the following 
        ///  formula:
        /// </li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset
        /// </p>
        /// <p class="Body">Call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the size of this array.</p></td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int Read(string Channel_List, double Timeout, int Num_Samples, double[] Wfm, niScopeWfmInfo[] Wfm_Info)
        {
            int pInvokeResult = PInvoke.Read(this._handle, Channel_List, Timeout, Num_Samples, Wfm, Wfm_Info);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_AddWaveformProcessing</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_AddWaveformProcessing</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_AddWaveformProcessing (ViSession vi, ViConstString channelList, ViInt32 measFunction);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Adds one measurement to the list of processing steps that are completed before the measurement. The processing is added on a per channel basis, and the processing measurements are completed in the same order they are registered. All measurement library parameters&#8212;the attributes starting with <span class="Monospace">NISCOPE_ATTR_MEAS</span>&#8212;are cached at the time of registering the processing, and this set of parameters is used during the processing step. The processing measurements are streamed, so the result of the first processing step is used as the input for the next step. The processing is done before any other measurements. 
        /// </p>
        /// 
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Array_Measurements_refs.html">Array Measurements in NI-SCOPE</a></li>   <li><a href="digitizers.chm::/Scalar_Measurements_refs.html">Scalar Measurements in NI-SCOPE</a></li>           </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Meas_Function">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_AddWaveformProcessing</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">measFunction</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The <a href="javascript:LaunchMergedHelp('Digitizers.chm','Array_Measurements_refs.html')">array measurement</a> to add.</td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int AddWaveformProcessing(string Channel_List, int Meas_Function)
        {
            int pInvokeResult = PInvoke.AddWaveformProcessing(this._handle, Channel_List, Meas_Function);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ClearWaveformMeasurementStats</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ClearWaveformMeasurementStats
        /// </h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ClearWaveformMeasurementStats (ViSession vi, ViConstString channelList, ViInt32 clearableMeasurementFunction);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Clears the waveform stats on the channel and measurement you specify. If you want 
        /// to clear all of the measurements, use <span class="Monospace">NISCOPE_VAL_ALL_MEASUREMENTS</span> in the 
        /// <strong>clearableMeasurementFunction</strong> parameter.
        /// </p>
        /// <p class="Body">Every time a measurement is called, the statistics information is updated, including the min, max, mean, standard deviation, and number of updates. This information is fetched with <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_FetchMeasurementStats.html')"><span class="Monospace">niScope_FetchMeasurementStats</span></a>. The multi-acquisition array measurements are also cleared with this function.
        /// </p>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Clearable_Measurement_Function">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ClearWaveformMeasurementStats</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">clearableMeasurementFunction</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The <a href="javascript:LaunchMergedHelp('Digitizers.chm','Scalar_Measurements_refs.html')">scalar measurement</a> or <a href="javascript:LaunchMergedHelp('Digitizers.chm','Array_Measurements_refs.html')">array measurement</a> to clear the stats for.</td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ClearWaveformMeasurementStats(string Channel_List, int Clearable_Measurement_Function)
        {
            int pInvokeResult = PInvoke.ClearWaveformMeasurementStats(this._handle, Channel_List, Clearable_Measurement_Function);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ClearWaveformProcessing</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ClearWaveformProcessing</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ClearWaveformProcessing (ViSession vi, ViConstString channelList);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Clears the list of processing steps assigned to the given channel. The processing is added using the <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_AddWaveformProcessing.html')"><span class="Monospace">niScope_AddWaveformProcessing</span></a> function, where the processing steps are completed in the same order in which they are registered. The processing measurements are streamed, so the result of the first processing step is used as the input for the next step. The processing is also done before any other measurements. 
        /// </p>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ClearWaveformProcessing(string Channel_List)
        {
            int pInvokeResult = PInvoke.ClearWaveformProcessing(this._handle, Channel_List);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchArrayMeasurement</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// <script src="web.js" type="text/javascript"></script>
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_FetchArrayMeasurement</h1>
        /// 
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_FetchArrayMeasurement (ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 arrayMeasFunction, ViInt32 measWfmSize, ViReal64*  measWfm, struct niScope_wfmInfo* wfmInfo);</p> 
        /// 
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <p class="Body">Obtains a waveform from the digitizer and returns the specified measurement array. This function may return multiple waveforms depending on the number of channels, the acquisition type, and the number of records you specify.
        /// </p>
        /// 
        /// 
        /// 
        /// 
        /// <table class="Borderless"><tr><td class="Icon"><img src="note.gif"></td><td><strong>Note</strong>& & Some functionality, such as time stamping, is not supported in all digitizers.  Refer to <a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')">Features Supported by Device</a>  for more information. </td></tr></table>
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Timeout">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">timeout</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The time to wait in seconds for data to be acquired; using 0 for this parameter tells NI-SCOPE to fetch whatever is currently available.  Using -1 for this parameter implies infinite timeout.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Array_Meas_Function">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchArrayMeasurement</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// <script src="web.js" type="text/javascript"></script>
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">arrayMeasFunction</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The <a href="javascript:LaunchMergedHelp('Digitizers.chm','Array_Measurements_refs.html')">array measurement</a> to perform.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Meas_Wfm_Size">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchArrayMeasurement</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// <script src="web.js" type="text/javascript"></script>
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">measWfmSize</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The maximum number of samples returned in the measurement waveform array for each waveform 
        /// measurement. Use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualMeasWfmSize.html')"><span class="Monospace">niScope_ActualMeasWfmSize</span></a> to determine the number of available samples.
        /// 	
        /// 
        /// <table class="Borderless">
        /// <tr>
        /// <td class="Icon"><img src="note.gif" alt="Note"></td>
        /// <td><strong>Note</strong>& & Use the attribute <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_FETCH_MEAS_NUM_SAMPLES.html')">NISCOPE_ATTR_FETCH_MEAS_NUM_SAMPLES</a> to set the 
        /// number of samples to fetch   when performing a measurement. For more information about when to use this attribute, 
        /// refer to the  <a href="javascript:WWW(WWW_KB_MEAS)">NI KnowledgeBase</a>.</td></tr></table>
        /// 
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Meas_Wfm">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchArrayMeasurement</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// <script src="web.js" type="text/javascript"></script>
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">measWfm</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>Returns an array whose length is the number of waveforms times <strong>measWfmSize</strong>; 
        /// call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the number of 
        /// waveforms; call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualMeasWfmSize.html')"><span class="Monospace">niScope_ActualMeasWfmSize</span></a> 
        /// to determine the size of each waveform.
        /// 
        /// <p class="Body">NI-SCOPE returns this data sequentially, so all record 0 waveforms are first. For example, with channel list of 0, 1, you would have the following index values:</p>
        /// <p class="Indent1">index 0 = record 0, channel 0</p>
        /// <p class="Indent1">index <em>x</em> = record 0, channel 1</p>
        /// <p class="Indent1">index 2<em>x</em> = record 1, channel 0</p>
        /// <p class="Indent1">index 3<em>x</em> = record 1, channel 1</p>
        /// <p class="Body">Where <em>x</em> = the record length</p></td></tr>
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Wfm_Info">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">wfmInfo</td>
        /// <td class="paramDataType">struct niScope_ wfmInfo*</td>
        /// <td>Returns an array of structures with the following timing and scaling information about each waveform:
        /// 
        /// <ul>
        /// <li><strong>relativeInitialX</strong>&#8212;the time (in seconds) from the trigger to the first sample in the fetched 
        /// waveform</li>
        /// <li><strong>absoluteInitialX</strong>&#8212;timestamp (in seconds) of the first fetched sample. This timestamp is comparable between records and acquisitions; devices that do not support this parameter use 0 for this output.</li>
        /// <li><strong>xIncrement</strong>&#8212;the time between points in the acquired waveform in seconds</li>
        /// <li><strong>actualSamples</strong>&#8212;the actual number of samples fetched and placed in the waveform array</li>
        /// <li><strong>gain</strong>&#8212;the gain factor of the given channel; useful for scaling binary data with the following formula:</li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset</p>
        /// <ul>
        /// 
        /// <li><strong>offset</strong>&#8212;the offset factor of the given channel; useful for scaling binary data with the following 
        ///  formula:
        /// </li>
        /// </ul>
        /// 
        /// <p class="Indent2">voltage = binary data &#215; gain factor + offset
        /// </p>
        /// <p class="Body">Call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the size of this array.</p></td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int FetchArrayMeasurement(string Channel_List, double Timeout, int Array_Meas_Function, int Meas_Wfm_Size, double[] Meas_Wfm, niScopeWfmInfo[] Wfm_Info)
        {
            int pInvokeResult = PInvoke.FetchArrayMeasurement(this._handle, Channel_List, Timeout, Array_Meas_Function, Meas_Wfm_Size, Meas_Wfm, Wfm_Info);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchMeasurement</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_FetchMeasurement</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_FetchMeasurement (ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 scalarMeasFunction, ViReal64* result);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Fetches a waveform from the digitizer and performs the specified waveform measurement. 
        /// 
        /// Refer to  <a href="javascript:LaunchHelp('Digitizers.chm::/Using_Fetch_Functions.html')">Using Fetch Functions</a>  for more information. </p>
        /// 
        /// <p class="Body">Many of the measurements use the low, mid, and high reference levels. You configure the low, mid, and high references  by using <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL</span></A>, <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL</span></A>, and <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL</span></A> to set each channel differently. </p>
        /// 
        /// 
        /// 
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Making_Waveform_Measurements.html">Making Waveform Measurements</a></li>               </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Timeout">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">timeout</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The time to wait in seconds for data to be acquired; using 0 for this parameter tells NI-SCOPE to fetch whatever is currently available.  Using -1 for this parameter implies infinite timeout.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Scalar_Meas_Function">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchMeasurement</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">scalarMeasFunction</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The  <a href="javascript:LaunchMergedHelp('Digitizers.chm','Scalar_Measurements_refs.html')">scalar measurement</a> to be performed.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Result">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchMeasurement</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">result</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>Contains an array of all measurements acquired; call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a> to determine the array length.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int FetchMeasurement(string Channel_List, double Timeout, int Scalar_Meas_Function, double[] Result)
        {
            int pInvokeResult = PInvoke.FetchMeasurement(this._handle, Channel_List, Timeout, Scalar_Meas_Function, Result);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchMeasurementStats</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_FetchMeasurementStats</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_FetchMeasurementStats (ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 scalarMeasFunction, ViReal64* result, ViReal64* mean, ViReal64* stdev, ViReal64* min, ViReal64* max, ViInt32*numInStats);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Obtains a waveform measurement and returns the measurement value. This function may return multiple statistical results depending on the number of channels, the acquisition type, and the number of records you specify.
        /// </p>
        /// 
        /// 
        /// <p class="Body">You specify a particular measurement type, such as rise time, frequency, or voltage peak-to-peak. The waveform on which the digitizer calculates the waveform measurement is from an acquisition that you previously initiated. The statistics for the specified measurement function are returned, where the statistics are updated once every acquisition when the specified measurement is fetched by any of the Fetch Measurement functions. If a Fetch Measurement function has not been called, this function fetches the data on which to perform the measurement. The statistics are cleared by calling <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearWaveformMeasurementStats.html')"><span class="Monospace">niScope_ClearWaveformMeasurementStats</span></a>. Refer to  <a href="javascript:LaunchHelp('Digitizers.chm::/Using_Fetch_Functions.html')">Using Fetch Functions</a> for more information on incorporating fetch functions in your application.
        /// </p>
        /// <p class="Body">Many of the measurements use the low, mid, and high reference levels. You configure the low, mid, and high references with <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL</span></A>, <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL</span></A>, and <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL</span></A> to set each channel differently. </p>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Timeout">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">timeout</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The time to wait in seconds for data to be acquired; using 0 for this parameter tells NI-SCOPE to fetch whatever is currently available.  Using -1 for this parameter implies infinite timeout.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Scalar_Meas_Function">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchMeasurementStats</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">scalarMeasFunction</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The  <a href="javascript:LaunchMergedHelp('Digitizers.chm', 'Scalar_Measurements_refs.html')">scalar measurement</a> to be performed on each fetched waveform.</td></tr> 
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Result">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchMeasurementStats</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">result</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>Returns the resulting measurement</td></tr>
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Mean">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchMeasurementStats</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">mean</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>Returns the mean scalar value, which is obtained by averaging each <span class="Monospace">niScope_FetchMeasurementStats</span> call.</td></tr>
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Stdev">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchMeasurementStats</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">stdev</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>Returns the standard deviation of the most recent <strong>numInStats</strong> measurements.</td></tr>
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Min">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchMeasurementStats</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">min</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>Returns the smallest scalar value acquired (the minimum of the <strong>numInStats</strong> measurements).</td></tr>
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Max">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchMeasurementStats</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">max</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>Returns the largest scalar value acquired (the maximum of the <strong>numInStats</strong> measurements).</td></tr>
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Num_In_Stats">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_FetchMeasurementStats</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">numInStats</td>
        /// <td class="paramDataType">ViInt32*</td>
        /// <td>Returns the number of times <span class="Monospace">niScope_FetchMeasurementStats</span> has been called.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int FetchMeasurementStats(string Channel_List, double Timeout, int Scalar_Meas_Function, double[] Result, double[] Mean, double[] Stdev, double[] Min, double[] Max, int[] Num_In_Stats)
        {
            int pInvokeResult = PInvoke.FetchMeasurementStats(this._handle, Channel_List, Timeout, Scalar_Meas_Function, Result, Mean, Stdev, Min, Max, Num_In_Stats);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ReadMeasurement</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ReadMeasurement</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus_VI_FUNC niScope_ReadMeasurement (ViSession vi,
        ///                                            ViConstString channelList,
        ///                                            ViReal64 timeout,
        ///                                            ViInt32 scalarMeasFunction,
        ///                                            ViReal64*  result);
        /// 										  </p>
        /// 
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Initiates an acquisition, waits for it to complete, and performs the specified waveform measurement for a single channel and record or for multiple channels and records.</p>
        /// 
        /// 
        /// <p class="Body">Refer to  <a href="javascript:LaunchHelp('Digitizers.chm::/Using_Fetch_Functions.html')">Using Fetch Functions</a>  for more information. </p>
        /// 
        /// <p class="Body">Many of the measurements use the low, mid, and high reference levels. You configure the low, mid, and high references  by using 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL</span></A>, 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL</span></A>, 
        /// and <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL</span></A> to set each channel differently.</p>
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Making_Waveform_Measurements.html">Making Waveform Measurements</a></li>   <li><a href="digitizers.chm::/Acquisition_Functions.html">Acquisition Functions</a></li>           </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Timeout">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Fetch</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">timeout</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The time to wait in seconds for data to be acquired; using 0 for this parameter tells NI-SCOPE to fetch whatever is currently available.  Using -1 for this parameter implies infinite timeout.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Scalar_Meas_Function">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ReadMeasurement</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">scalarMeasFunction</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The <a href="javascript:LaunchMergedHelp('Digitizers.chm', 'Scalar_Measurements_refs.html')">scalar measurement</a> to be performed</td> </tr>
        /// 
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Result">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ReadMeasurement</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">result</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>Contains an array of all measurements acquired. Call  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualNumWfms.html')"><span class="Monospace">niScope_ActualNumWfms</span></a>  to determine the array length.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ReadMeasurement(string Channel_List, double Timeout, int Scalar_Meas_Function, double[] Result)
        {
            int pInvokeResult = PInvoke.ReadMeasurement(this._handle, Channel_List, Timeout, Scalar_Meas_Function, Result);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_CalSelfCalibrate</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_CalSelfCalibrate</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_CalSelfCalibrate (ViSession sessionHandle, ViConstString channelList, ViInt32 option);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Self-calibrates most NI digitizers, including all SMC-based devices and most Traditional NI-DAQ (Legacy) devices.
        /// To verify that your digitizer supports self-calibration, 
        /// refer to  <a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')">Features Supported by Device</a>. 
        /// </p>
        /// 
        /// <p class="Body">For SMC-based digitizers,  if the self-calibration is performed successfully in a regular session, the 
        /// calibration constants are 
        /// immediately stored in the self-calibration area of the EEPROM. If the self-calibration is performed in an external 
        /// calibration session, the 
        /// calibration constants take effect immediately for the duration of the session. However, they are not stored in 
        /// the EEPROM until <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_CalEnd.html')"><span class="Monospace">niScope_CalEnd</span></a> is called with <strong>action</strong> set to 
        /// <span class="Monospace">NISCOPE_VAL_ACTION_STORE</span> and no errors occur.</p>
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChanCharacteristics</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel to configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Option">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_CalSelfCalibrate</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">option</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td> The  calibration option. Use <span class="Monospace">VI_NULL</span> for a normal self-calibration operation or  <span class="Monospace">NISCOPE_VAL_CAL_RESTORE_EXTERNAL_CALIBRATION</span> to restore the previous calibration.</td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int CalSelfCalibrate(string Channel_List, int Option)
        {
            int pInvokeResult = PInvoke.CalSelfCalibrate(this._handle, Channel_List, Option);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ResetDevice</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ResetDevice</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ResetDevice (ViSession vi);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Performs a hard reset of the device. Acquisition stops, all routes are released, RTSI and PFI lines are
        /// tristated, hardware is configured to its default state,  and all session attributes are reset to their default state.</p>
        /// 
        /// <h2>Related topics:</h2>
        /// <ul>
        /// <li><a href="digitizers.chm::/Thermal_Shutdown.html">Thermal Shutdown</a></li>
        /// </ul>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ResetDevice()
        {
            int pInvokeResult = PInvoke.ResetDevice(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_Disable</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_Disable</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_Disable (ViSession vi);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Aborts any current operation, opens data channel relays, and releases RTSI and PFI lines.
        /// </p>
        /// </body>
        /// </html>
        /// </summary>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int Disable()
        {
            int pInvokeResult = PInvoke.Disable(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ProbeCompensationSignalStart</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ProbeCompensationSignalStart</h1>
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ProbeCompensationSignalStart (ViSession vi);</p>
        /// 
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <p class="Body">Starts the 1& kHz square wave output on PFI& 1 for probe compensation.
        /// </p>
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Compensating_Probes.html">Probe Compensation</a></li>                </ul>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ProbeCompensationSignalStart()
        {
            int pInvokeResult = PInvoke.ProbeCompensationSignalStart(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ProbeCompensationSignalStop</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ProbeCompensationSignalStop</h1>
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_ProbeCompensationSignalStop (ViSession vi);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Stops the 1& kHz square wave output on PFI& 1 for probe compensation.</p>
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>    <li><a href="digitizers.chm::/Compensating_Probes.html">Probe Compensation</a></li>                </ul>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ProbeCompensationSignalStop()
        {
            int pInvokeResult = PInvoke.ProbeCompensationSignalStop(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_reset</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_reset</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_reset (ViSession vi);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Stops the acquisition, releases routes, and all session attributes are reset to their <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviAttribute_Defaults.html')">default states</a>. </p>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int reset()
        {
            int pInvokeResult = PInvoke.reset(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ResetWithDefaults</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ResetWithDefaults</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_Reset_With_Defaults (ViSession vi);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Performs a software reset of the device, returning it to the default state and applying any initial default settings from the IVI  Configuration Store.
        /// </p>
        /// </body>
        /// </html>
        /// </summary>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ResetWithDefaults()
        {
            int pInvokeResult = PInvoke.ResetWithDefaults(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_revision_query</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_revision_query</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_revision_query  (ViSession vi, 
        ///                                           ViChar driverRev[IVI_MAX_MESSAGE_BUF_SIZE], 
        ///                                           ViChar instrRev[IVI_MAX_MESSAGE_BUF_SIZE]);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Returns the revision numbers of the instrument driver and instrument firmware. </p>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Driver_Revision">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_revision_query</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">driverRev</td>
        /// <td class="paramDataType">ViChar[]</td>
        /// <td>Returns the instrument driver software revision numbers in the form of a string; you must pass a ViChar array at least <span class="Monospace">IVI_MAX_MESSAGE_BUF_SIZE</span> bytes in length.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Firmware_Revision">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_revision_query</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">instrRev</td>
        /// <td class="paramDataType">ViChar[]</td>
        /// <td>Returns the instrument firmware revision numbers in the form of a string; you must pass a ViChar array at least <span class="Monospace">IVI_MAX_MESSAGE_BUF_SIZE</span> bytes in length.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int revision_query(System.Text.StringBuilder Driver_Revision, System.Text.StringBuilder Firmware_Revision)
        {
            int pInvokeResult = PInvoke.revision_query(this._handle, Driver_Revision, Firmware_Revision);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_self_test</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_self_test</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_self_test (ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[IVI_MAX_MESSAGE_BUF_SIZE]);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Runs the instrument self-test routine and returns the test result(s). </p>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Self_Test_Result">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_self_test</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">selfTestResult</td>
        /// <td class="paramDataType">ViInt16*</td>
        /// <td>This control contains the value returned from the instrument self-test.
        /// 
        /// <p class="Body"><strong>Self-Test Code Description</strong></p>
        /// 
        /// <p class="Body">0&#8212;Self-test passed </p>
        /// 
        /// <p class="Body">1&#8212;Self-test failed</p></td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Self_Test_Message">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_self_test</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">selfTestMessage</td>
        /// <td class="paramDataType">ViChar[]</td>
        /// <td>Returns the self-test response string from the instrument. Refer to  the device-specific help topics for an explanation of the string contents; 
        /// you must pass a ViChar array at least <span class="Monospace">IVI_MAX_MESSAGE_BUF_SIZE</span> bytes in length.</td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int self_test(out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message)
        {
            int pInvokeResult = PInvoke.self_test(this._handle, out Self_Test_Result, Self_Test_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetStreamEndpointHandle</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_GetStreamEndpointHandle</h1>
        /// 
        /// 
        /// 
        /// <p class="syntax">ViStatus niScope_GetStreamEndpointHandle (ViSession vi, 
        ///                                                    ViConstString Stream_Name,
        ///                                                    ViUInt32 *Writer_Handle);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">Returns a writer endpoint that can be used with NI-P2P to configure a peer-to-peer stream with a digitizer endpoint. </p>
        /// 
        /// <h2>Related topics:</h2>
        /// <ul>
        ///     <li><a href="digitizers.chm::/5160_P2P.html">Peer-to-Peer Streaming</a></li>
        /// </ul>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="vi">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetStreamEndpointHandle</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">vi</td>
        /// <td class="paramDataType">ViSession</td>
        /// <td>The instrument handle you obtain from  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_init.html')"><span class="Monospace">niScope_init</span></a> that identifies a particular instrument session.</td></tr></table></body>
        /// </html>
        /// </param>
        /// <param name="Stream_Name">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetStreamEndpointHandle</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">Stream_Name</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The stream endpoint FIFO to configure. Refer to the device-specific documentation for peer-to-peer streaming in the <em>High-Speed Digitizers Help</em> for more information. </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Writer_Handle">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetStreamEndpointHandle</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">Writer_Handle</td>
        /// <td class="paramDataType">ViUInt32</td> <td>  
        /// Returns a reference to a peer-to-peer writer FIFO that can be used to create a peer-to-peer streaming session.
        /// 
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int GetStreamEndpointHandle(string Stream_Name, out uint Writer_Handle)
        {
            int pInvokeResult = PInvoke.GetStreamEndpointHandle(this._handle, Stream_Name, out Writer_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_errorHandler</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_errorHandler
        /// </h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_errorHandler (ViSession vi,
        ///                                         ViInt32 errorCode,
        ///                                         ViChar errorSource[MAX_FUNCTION_NAME_SIZE],
        ///                                         ViChar errorDescription[MAX_ERROR_DESCRIPTION]);</p>
        /// 
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <p class="Body">Takes the error code returned by NI-SCOPE functions and returns the interpretation as a user-readable string. 
        /// </p>
        /// <table class="Borderless"><tr><td class="Icon"><img src="note.gif"></td><td><strong>Note</strong>& & You can pass <span class="Monospace">VI_NULL</span> as the instrument handle, which is useful to interpret errors after <span class="Monospace">niScope_init</span> has failed.</td></tr></table>
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Error_Code">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_errorHandler</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">errorCode</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>The error code that is returned from any of the instrument driver functions.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Error_Source">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_errorHandler</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">errorSource[]</td>
        /// <td class="paramDataType">ViChar</td>
        /// <td> Specifies the function in which the error occurred.  You can pass in a string no longer 
        /// than <span class="Monospace">MAX_FUNCTION_NAME_SIZE</span>.  If you pass in a valid string, this source is included in the 
        /// <strong>errorDescription</strong> string.  For example:
        /// <p class="Indent1">
        ///     &quot;Error &lt;<strong>errorCode</strong>&gt; at &lt;<strong>errorSource</strong>&gt;&quot;</p>
        /// 	<p class="Body">
        /// If you pass in NULL or an empty string, this parameter is ignored.</p></td> </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Error_Description">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_errorHandler</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">errorDescription[]</td>
        /// <td class="paramDataType">ViChar</td>
        /// <td>Returns the interpreted error code as a user readable message string; you must pass a ViChar array at least <span class="Monospace">MAX_ERROR_DESCRIPTION</span> bytes in length.</td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int errorHandler(int Error_Code, System.Text.StringBuilder Error_Source, System.Text.StringBuilder Error_Description)
        {
            int pInvokeResult = PInvoke.errorHandler(this._handle, Error_Code, Error_Source, Error_Description);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetErrorMessage</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_GetErrorMessage</h1>
        /// 
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus niScope_GetErrorMessage (ViSession vi, 
        ///                                            ViStatus errorCode,
        ///                                            ViInt32 bufferSize,
        ///                                            ViChar errorMessage[]);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <p class ="body">
        /// Returns the error code from an NI-SCOPE function  as a user-readable string. Use VI_NULL as the default instrument handle. </p>
        /// 
        /// <p class ="body">
        /// You must call this function twice.  For the first call,  set <strong>bufferSize</strong> to 0 to prevent the function from populating the error message. Instead, the function returns the size of the error string.  Use the returned size to create a buffer, then call the function again,  passing in the new buffer and setting  <strong>bufferSize</strong> equal to the size that was returned in the first function call.
        /// <p class="Body"> 
        /// </p>
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Error_Code">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_error_message</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">errorCode</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>The error code that is returned from any of the instrument driver functions.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Buffer_Size">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_error_message</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">bufferSize</td>
        /// <td class="paramDataType"> </td>
        /// <td>The number of characters you specify for the <strong>errorMessage</strong> parameter. </td></tr>
        /// </table></body>
        /// </html>
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </param>
        /// <param name="Error_Message">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_error_message</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">errorMessage[]</td>
        /// <td class="paramDataType">ViChar</td>
        /// <td>Returns a char buffer that will be populated with the error message.  It should be at least as large  as the  buffer size.
        ///  
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int GetErrorMessage(int Error_Code, int Buffer_Size, System.Text.StringBuilder Error_Message)
        {
            int pInvokeResult = PInvoke.GetErrorMessage(this._handle, Error_Code, Buffer_Size, Error_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureAcquisitionRecord</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureAcquisitionRecord</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_ConfigureAcquisitionRecord& (ViSession& vi, ViReal64& timeperRecord, ViInt32& minNumPoints, ViReal64& acquisitionStartTime);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// <p class="Body">This function is included for compliance with the IviScope Class Specification.</p><p class = "Body">Configures the most commonly configured attributes of the instrument acquisition subsystem.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Time_per_Record">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureAcquisitionRecord</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">timeperRecord</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>Specifies the time per record.<p class = "Body">Units: Seconds.</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <param name="Min_Num_Points">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureAcquisitionRecord</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">minNumPoints</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Pass the minimum number of points you require in the record for each channel.  Call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualRecordLength.html')"><span class="Monospace">niScope_ActualRecordLength</span></a> to obtain the actual record length used.
        /// 
        /// 
        /// <p class = "Body">
        /// Valid Values: 
        /// 1& &#8211;& available onboard memory</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <param name="Acquisition_Start_Time">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureAcquisitionRecord</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">acquisitionStartTime</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>Specifies the position of the first point in the waveform record relative to the trigger event.</td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureAcquisitionRecord(double Time_per_Record, int Min_Num_Points, double Acquisition_Start_Time)
        {
            int pInvokeResult = PInvoke.ConfigureAcquisitionRecord(this._handle, Time_per_Record, Min_Num_Points, Acquisition_Start_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureChannel</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureChannel</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_ConfigureChannel& (ViSession& vi, ViConstString& channel, ViReal64& range, ViReal64& offset, ViInt32& coupling, ViReal64& probeAttenuation, ViBoolean& enabled);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// <p class="Body">This function is included for compliance with the IviScope Class Specification.</p><p class = "Body">Configures the most commonly configured attributes of the instrument's channel subsystem.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureChannel</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">channel</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel  to   configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.
        /// <p class = "Body">Default Value: &#34;0&#34;</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <param name="Range">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureChannel</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">range</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>Specifies the voltage range for the specified channel(s).</td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <param name="Offset">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureChannel</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">offset</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>Selects the DC offset added to the specified channel(s).<p class = "Body">Default Value: 0</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <param name="Coupling">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureChannel</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">coupling</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specify how you want the digitizer to couple the input signal for the channel.  <h3>Defined Values </h3>
        /// 
        /// 
        /// <p class="BODY">
        /// <span class="Monospace">NISCOPE_VAL_AC (0)</span></p> 
        /// <p class="BODY">
        /// <span class="Monospace">NISCOPE_VAL_DC (1)</span></p> 
        /// <p class="BODY">
        /// <span class="Monospace">NISCOPE_VAL_GND (2)</span></p>
        /// 
        /// 
        /// <p class="BODY">
        ///  A certain amount of delay is required for the coupling capacitor to charge after changing vertical coupling from DC to AC.  
        ///  This delay is typically:</p> 
        ///   <p class="BODY">Low Impedance Source&#8212;150& ms<br>   10X Probe&#8212;1.5 s<br>   100X Probe&#8212;15& s</p></td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Probe_Attenuation">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureChannel</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">probeAttenuation</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>Specifies the probe attenuation for the specified channel(s).<p class = "Body">Default Value: 1.00</p><p class = "Body">Valid Range:   1.00 &#8211; 100</p><p class = "Body">
        /// 
        /// If you have a probe with <em>y</em>X attenuation, set this parameter to <em>y</em>. For 
        /// example, enter a value of 10 for a 10X probe.</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <param name="Enabled">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureChannel</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">enabled</td>
        /// <td class="paramDataType">ViBoolean</td>
        /// <td>Specify whether to enable the digitizer to acquire data for the channel when you
        ///  call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_InitiateAcquisition.html')"><span class="Monospace">niScope_InitiateAcquisition</span></a> 
        ///  or <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ReadWaveform.html')"><span class="Monospace">niScope_ReadWaveform</span></a>.
        ///  <p class = "Body">Default Value:<br><span class="Monospace">NISCOPE_VAL_TRUE (1)</span></p>
        ///  <h3>Defined Values</h3>
        ///  <p class ="Body">N<span class="Monospace">ISCOPE_VAL_TRUE  (1)</span>&#8212;Acquire data on this channel<br><span class="Monospace">NISCOPE_VAL_FALSE (0)</span>&#8212;Do not acquire 
        ///  data on this channel</p></td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureChannel(string Channel, double Range, double Offset, int Coupling, double Probe_Attenuation, bool Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureChannel(this._handle, Channel, Range, Offset, Coupling, Probe_Attenuation, System.Convert.ToUInt16(Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureEdgeTriggerSource</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureEdgeTriggerSource</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_ConfigureEdgeTriggerSource& (ViSession& vi, ViConstString& source, ViReal64& level, ViInt32& slope);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & 
        /// 
        /// This function is included for compliance with the IviScope Class Specification.</td></tr></table>
        /// <p class = "Body">Sets the edge triggering attributes. An edge trigger occurs when the trigger signal specified with the source parameter passes through the voltage threshold specified with the 
        /// level parameter and has the slope specified with the slope parameter.</p><p class = "Body">This function affects instrument behavior only if the triggerType is <span class="Monospace">NISCOPE_VAL_EDGE</span>.  Set the trigger type and trigger coupling before calling this function.</p><p class = "Body">If the trigger source is one of the analog input channels, you must configure the vertical range, vertical offset, vertical coupling, probe attenuation, and the maximum input frequency before calling this function.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Source">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureEdgeTriggerSource</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">level</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The voltage threshold for the trigger. Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_LEVEL</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Level">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerEdge</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">level</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The voltage threshold for the trigger. Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_LEVEL</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Slope">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">slope</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specifies whether you want a rising edge or a falling edge to trigger the digitizer.
        /// 
        /// Refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_SLOPE.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_SLOPE</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureEdgeTriggerSource(string Source, double Level, int Slope)
        {
            int pInvokeResult = PInvoke.ConfigureEdgeTriggerSource(this._handle, Source, Level, Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureTrigger</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureTrigger</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_ConfigureTrigger& (ViSession& vi, ViInt32& triggerType, ViReal64& holdoff);</p>
        /// <h2 class="purpose">Purpose</h2><table class="Borderless">
        /// <tr>
        /// <td class="Icon"><img src="note.gif" alt="Note"></td>
        /// <td><strong>Note</strong>& & 
        /// This function is included for compliance with the IviScope Class Specification.</td>
        /// </tr>
        /// </table>
        /// 
        /// 
        /// 
        /// <p class = "Body">Configures the common attributes of the trigger subsystem.</p><p class = "Body">When you use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ReadWaveform.html')"><span class="Monospace">niScope_ReadWaveform</span></a>, the instrument waits for a trigger. You specify the type of trigger for which the instrument waits with the Trigger Type parameter.</p><p class = "Body">If the instrument requires multiple waveform acquisitions to build a complete waveform, it waits for the length of time you specify with the <strong>holdoff</strong> parameter to elapse since the previous trigger. The instrument then waits for the next trigger.</p>
        /// 
        /// 
        /// 
        /// <h2>Related topics:</h2><ul>  <li><a href="digitizers.chm::/Configuring_Triggers.html">Configuring Triggers</a></li>    <li><a href="digitizers.chm::/Trigger_Coercions.html">Coercions of Trigger Parameters</a></li>
        ///   <li><a href="digitizers.chm::/Triggers.html">Triggering</a></li>    <li><a href="digitizers.chm::/Programming_Flow.html">NI-SCOPE  Programming Flow</a></li>           </ul>
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Trigger_Type">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureTrigger</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">triggerType </td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specifies the type of trigger for which the digitizer will wait.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Holdoff">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title> niScope_ConfigureTriggerDigital</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">holdoff </td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>The length of time the digitizer waits after detecting a trigger before enabling NI-SCOPE to detect 
        /// another trigger.  Refer to  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_TRIGGER_HOLDOFF.html')"><span class="Monospace">NISCOPE_ATTR_TRIGGER_HOLDOFF</span></A> for more information.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureTrigger(int Trigger_Type, double Holdoff)
        {
            int pInvokeResult = PInvoke.ConfigureTrigger(this._handle, Trigger_Type, Holdoff);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureTriggerCoupling</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureTriggerCoupling</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_ConfigureTriggerCoupling& (ViSession& vi, ViInt32& coupling);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & This function is included for compliance with the IviScope Class Specification.</td></tr></table><p class = "Body">Sets the trigger coupling attribute.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Coupling">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureTriggerCoupling</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">coupling</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specify how you want the instrument to couple the trigger signal. 
        /// <h3>Defined Values</h3>
        /// <p class="Body"><span class="Monospace">
        /// 
        ///   NISCOPE_VAL_AC (0)</span> </p>
        ///   <p class="Body">
        ///  <span class="Monospace"> NISCOPE_VAL_DC (1)</span> </p>
        ///    <p class="Body"><span class="Monospace">NISCOPE_VAL_HF_REJECT (2)</span> </p>
        ///    <p class="Body"><span class="Monospace">NISCOPE_VAL_LF_REJECT (3) </span> </p>
        ///    <p class="Body"><span class="Monospace">NISCOPE_VAL_AC_PLUS_HF_REJECT (1001)</span> </p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureTriggerCoupling(int Coupling)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerCoupling(this._handle, Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureTVTriggerLineNumber</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureTVTriggerLineNumber</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_ConfigureTVTriggerLineNumber& (ViSession& vi, ViInt32& lineNumber);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// <p class="Body">This function is included for compliance with the IviScope Class Specification.</p><p class = "Body">Configures the TV line upon which the instrument triggers. The line number is absolute and not relative to the field of the TV signal.</p><p class = "Body">This function affects instrument behavior only if the trigger type is set to <span class="Monospace">NISCOPE_VAL_TV_TRIGGER</span>  and the TV trigger event is set to  <span class="Monospace">NISCOPE_VAL_TV_EVENT_LINE_NUMBER</span>. Call  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureTVTriggerSource.html')"><span class="Monospace">niScope_ConfigureTVTriggerSource</span></a>  to set the TV trigger event before calling this function.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Line_Number">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureTVTriggerLineNumber</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">lineNumber</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specify the line number of the signal you want to trigger off of. The valid ranges of the attribute depend on the signal format configured. 
        /// <p class = "Body">Default Value: 1</p>
        /// 
        /// <table class="Bordered"><tr><th class ="Bordered">Signal Format</th><th  class ="Bordered">Line Numbers</th></tr>
        /// <tr><td class="Bordered">M-NTSC, 480i, 480p</td><td class="Bordered"> 1 to 525</td></tr>
        /// <tr> <td class="Bordered">BG/PAL, SECAM, 576i, 576p </td><td class="Bordered">1 to 625</td> </tr>
        /// <tr><td class="Bordered">720p</td><td class="Bordered"> 1 to 750</td></tr>
        /// <tr><td class="Bordered">1080i,1080p </td> <td class="Bordered">1 to 1,125</td> </tr>
        /// </table>
        /// 
        /// </td></tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureTVTriggerLineNumber(int Line_Number)
        {
            int pInvokeResult = PInvoke.ConfigureTVTriggerLineNumber(this._handle, Line_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureTVTriggerSource</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureTVTriggerSource</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_ConfigureTVTriggerSource& (ViSession& vi, ViConstString& source, ViInt32& signalFormat, ViInt32& event, ViInt32& polarity);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & This function is included for compliance with the IviScope Class Specification.</td></tr></table>
        /// <p class = "Body">Configures the instrument for TV triggering. It configures the TV signal format, the event,  and the signal polarity.</p><p class = "Body">This function affects instrument behavior 
        /// only if the trigger type is <span class="Monospace">NISCOPE_VAL_TV_TRIGGER</span>. Set the trigger type 
        /// and trigger coupling before calling this function.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Source">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureTVTriggerSource</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">source</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>Pass the source you want the digitizer to monitor for a trigger.  <h3>Defined Values </h3> <p class = "Body"><span class="Monospace">&#34;0&#34;</span>&#8212;Channel 0<br><span class="Monospace">&#34;1&#34;</span>&#8212;Channel 1<br>
        /// <span class="Monospace">NISCOPE_VAL_EXTERNAL</span>&#8212;Analog External Trigger Input</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <param name="Signal_Format">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureTVTriggerSource</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">signalFormat</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specifies the Video/TV signal format. <h3>  Defined Values</h3><p class = "Body">
        /// <span class="Monospace">NISCOPE_VAL_NTSC  (1)</span><br> <span class="Monospace">NISCOPE_VAL_PAL 
        /// (2)</span> <br> <span class="Monospace">NISCOPE_VAL_SECAM (3)</span></p></td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Event">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureTVTriggerSource</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">event</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Video/TV event to trigger off of.<h3>  Defined Values</h3><p class = "Body">
        /// NISCOPE_VAL_TV_EVENT_FIELD1 (1)&#8212;trigger on field 1 of the signal<br>  
        /// NISCOPE_VAL_TV_EVENT_FIELD2 (2)&#8212;trigger on field 2 of the signal<br>  
        /// NISCOPE_VAL_TV_EVENT_ANY_FIELD (3)&#8212;trigger on the first field acquired<br>  <span class="Monospace">NISCOPE_VAL_TV_EVENT_ANY_LINE (4)</span>&#8212;trigger on the first line acquired<br>  <span class="Monospace">NISCOPE_VAL_TV_EVENT_LINE_NUMBER (5)</span>&#8212;trigger on a specific line of a video signal.  Valid values vary depending on the signal format configured.</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <param name="Polarity">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureTVTriggerSource</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">polarity</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Specifies the polarity of the video signal to trigger off of.<br>  <h3>  Defined Values</h3><p class = "Body">
        /// <span class="Monospace">NISCOPE_VAL_TV_POSITIVE  (1)</span><br><span class="Monospace">NISCOPE_VAL_TV_NEGATIVE  (2)</span></p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureTVTriggerSource(string Source, int Signal_Format, int Event, int Polarity)
        {
            int pInvokeResult = PInvoke.ConfigureTVTriggerSource(this._handle, Source, Signal_Format, Event, Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_SendSWTrigger</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_SendSWTrigger</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_SendSWTrigger& (ViSession& vi);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & 
        /// 
        /// This function is included for compliance with the IviScope Class Specification. Consider using <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_SendSoftwareTriggerEdge.html')">
        /// <span class="Monospace">niScope_SendSoftwareTriggerEdge</span></a> instead.</td></tr></table>
        /// 
        /// 
        /// <p class = "Body">Sends a 
        /// command to trigger the digitizer.  Call this function after you call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureTriggerSoftware.html')"><span class="Monospace">niScope_ConfigureTriggerSoftware</span></a>.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int SendSWTrigger()
        {
            int pInvokeResult = PInvoke.SendSWTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ClearInterchangeWarnings</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ClearInterchangeWarnings</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_ClearInterchangeWarnings& (ViSession& vi);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & 
        /// 
        /// This function is included for compliance with the IviScope Class Specification.</td></tr></table>
        /// 
        /// 
        /// 
        /// 
        /// 
        /// <p class = "Body">Clears the list of current interchange warnings.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ClearInterchangeWarnings()
        {
            int pInvokeResult = PInvoke.ClearInterchangeWarnings(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetNextInterchangeWarning</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_GetNextInterchangeWarning</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_GetNextInterchangeWarning& (ViSession& vi, ViInt32& bufferSize, ViChar[]& interchangeWarning);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & 
        /// This function is included for compliance with the IviScope Class Specification.</td></tr></table><p class = "Body">Returns the interchangeability warnings associated with the IVI session. It retrieves and clears the oldest instance in which the class driver recorded an interchangeability warning. Interchangeability warnings indicate that using your 
        /// application with a different instrument might cause different behavior. </p>
        /// 
        /// <p class="Body">
        /// Use this function to retrieve interchangeability warnings. The driver performs interchangeability checking 
        /// when <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_INTERCHANGE_CHECK.html')"><span class="Monospace">NISCOPE_ATTR_INTERCHANGE_CHECK</span></a> is set to 
        /// 
        /// <span class="Monospace">VI_TRUE</span>. The function returns an empty string in the <strong>interchangeWarning</strong> parameter if no 
        /// interchangeability warnings remain for the session.</p><p class="Body">In general, the instrument driver generates interchangeability warnings when an attribute that affects the behavior of the instrument is in a state that you did not specify.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Buffer_Size">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_GetNextInterchangeWarning</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">bufferSize</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Passes the number of bytes in the ViChar array you specify for the <strong>Description</strong> parameter. 
        /// <p class="Body">If the error description, including the terminating NULL byte, contains more bytes than you indicate in this parameter, the function copies <strong>bufferSize</strong>;& &#8211;& 1 bytes into the buffer, places an ASCII NULL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is &#34;123456&#34; and the Buffer Size is 4, the function places &#34;123&#34; into the buffer and returns 7.</p> <p class="Body">If you pass a negative number, the function copies the value to the buffer regardless of 
        /// the number of bytes in the value.</p><p class="Body">If you pass 0, you can pass 
        /// <span class="Monospace">VI_NULL</span> for the Description buffer parameter.</p></td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Interchange_Warning">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_GetNextInterchangeWarning</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">interchangeWarning</td>
        /// <td class="paramDataType">ViChar[]</td>
        /// <td>Returns the next interchange warning for the IVI session. If there are no interchange warnings, the 
        /// function returns an empty string. The buffer must contain at least as many elements as the value you 
        /// specify with the <strong>bufferSize</strong> parameter.</td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int GetNextInterchangeWarning(int Buffer_Size, System.Text.StringBuilder Interchange_Warning)
        {
            int pInvokeResult = PInvoke.GetNextInterchangeWarning(this._handle, Buffer_Size, Interchange_Warning);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ResetInterchangeCheck</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ResetInterchangeCheck</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_ResetInterchangeCheck& (ViSession& vi);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & 
        /// 
        /// This function is included for compliance with the IviScope Class Specification.</td></tr></table>
        /// 
        /// <p class = "Body">When developing a complex test system that consists of multiple test modules, it is generally a good idea to design the test modules so that they can run in any order. To do so requires ensuring that each test module completely configures the state of each instrument it uses.</p>
        ///  <p class = "Body">If a particular test module does not completely configure the state of an instrument, the state of the instrument depends on the configuration from a previously executed test module. <br>If you execute the test modules in a different order, the behavior of the instrument and therefore the entire test module is likely to change.</p> <p class = "Body">This change in behavior is generally instrument-specific and represents an interchangeability problem. You can use this function to test for such cases. After you call this function, the interchangeability checking algorithms in the specific driver ignore all previous configuration operations. <br>By calling this function at the beginning of a test module, you can determine whether the test module has dependencies on the operation of previously executed test modules. </p><p class = "Body">This function does not clear the interchangeability warnings from the list of previously recorded interchangeability warnings. If you want to guarantee that <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetNextInterchangeWarning.html')"><span class="Monospace">niScope_GetNextInterchangeWarning</span></a> only returns those interchangeability warnings that are generated after calling this function, you must clear the list of interchangeability warnings.</p> <p class = "Body">You can clear the interchangeability warnings list by repeatedly calling <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetNextInterchangeWarning.html')"><span class="Monospace">niScope_GetNextInterchangeWarning</span></a> until no more interchangeability warnings are returned. If you are not interested in the content of those warnings, you can call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearInterchangeWarnings.html')"><span class="Monospace">niScope_ClearInterchangeWarnings</span></a>.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ResetInterchangeCheck()
        {
            int pInvokeResult = PInvoke.ResetInterchangeCheck(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_FetchWaveform</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_FetchWaveform</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_FetchWaveform& (ViSession& vi, ViConstString& channel, ViInt32& waveformSize, ViReal64[]& waveform, ViInt32*& actualPoints, ViReal64*& initialX, ViReal64*& xIncrement);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & This function is included for compliance with the IviScope Class Specification.</td></tr></table>
        /// 
        /// 
        /// 
        /// 
        /// <p class = "Body">Returns the waveform from a previously initiated acquisition that the digitizer  acquires for the channel you specify. </p> <p class = "Body"><a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_InitiateAcquisition.html')"><span class="Monospace">niScope_InitiateAcquisition</span></a> starts an acquisition on the channels that you enable with <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureVertical.html')"><span class="Monospace">niScope_ConfigureVertical</span></a>.  The digitizer acquires waveforms for the enabled channels concurrently.  You use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_AcquisitionStatus.html')"><span class="Monospace">niScope_AcquisitionStatus</span></a> to determine when the acquisition is complete.  You must call this function separately for each enabled channel to obtain the waveforms.</p> <p class = "Body">You can call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ReadWaveform.html')"><span class="Monospace">niScope_ReadWaveform</span></a> instead of <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_InitiateAcquisition.html')"><span class="Monospace">niScope_InitiateAcquisition</span></a>.  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ReadWaveform.html')"><span class="Monospace">niScope_ReadWaveform</span></a> starts an acquisition on all enabled channels, waits for the acquisition to complete, and returns the waveform for the channel you specify.  Call this function to obtain the waveforms for each of the remaining channels.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureChannel</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">channel</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel  to   configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.
        /// <p class = "Body">Default Value: &#34;0&#34;</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <param name="Waveform_Size">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_FetchWaveform</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">waveformSize</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The number of elements to insert into the <strong>waveform</strong> array.</td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Waveform">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_FetchWaveform</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">waveform</td>
        /// <td class="paramDataType">ViReal64[]</td>
        /// <td>Returns the waveform that the digitizer acquires. <p class = "Body">Units: volts</p><p class = "Body">Notes:<br>If the digitizer cannot sample a point in the waveform, this function returns an error.</p></td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Actual_Points">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_FetchWaveform</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">actualPoints</td>
        /// <td class="paramDataType">ViInt32*</td>
        /// <td>Indicates the actual number of points the function placed in the <strong>waveform</strong> array.</td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Initial_X">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_FetchWaveform</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">initialX</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>Indicates the time of the first point in the <strong>waveform</strong> array relative to the Reference Position.  <p class = "Body">Units: seconds</p>  <p class = "Body">For example, if the digitizer acquires the
        ///  first point in the <strong>waveform</strong> array 1 second before the trigger, this parameter returns the value &#8211;1.0.  If the acquisition of the first point occurs at the same time as the trigger, this parameter returns the value 0.0.</p></td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="X_Increment">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_FetchWaveform</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">xIncrement</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>Indicates the length of time between points in the <strong>waveform</strong> array.  <p class = "Body">Units: seconds</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int FetchWaveform(string Channel, int Waveform_Size, double[] Waveform, out int Actual_Points, out double Initial_X, out double X_Increment)
        {
            int pInvokeResult = PInvoke.FetchWaveform(this._handle, Channel, Waveform_Size, Waveform, out Actual_Points, out Initial_X, out X_Increment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_IsInvalidWfmElement</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_IsInvalidWfmElement</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_IsInvalidWfmElement& (ViSession& vi, ViReal64& elementValue, ViBoolean*& isInvalid);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & 
        /// 
        /// This function is included for compliance with the IviScope Class Specification.</td></tr></table><p class = "Body">Determines whether a value you pass from the waveform array is invalid. After the read and fetch waveform functions execute, each element in the waveform array contains either a voltage or a value indicating that the instrument could not sample a voltage.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Element_Value">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_IsInvalidWfmElement</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">elementValue</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>Pass one of the values from the waveform array returned by the read and fetch waveform functions.</td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Is_Invalid">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_IsInvalidWfmElement</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">isInvalid</td>
        /// <td class="paramDataType">ViBoolean*</td>
        /// <td>Returns whether the element value is a valid voltage or a value indicating that the digitizer could not sample a voltage.<p class = "Body">Return values:</p><p class = "Body">
        /// <span class="Monospace">VI_TRUE</span>&#8212;The element value indicates that the instrument could
        ///  not sample the voltage.<br>   <span class="Monospace">VI_FALSE</span>&#8212;The element value is a valid voltage.</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int IsInvalidWfmElement(double Element_Value, out bool Is_Invalid)
        {
            ushort Is_InvalidAsUShort;
            int pInvokeResult = PInvoke.IsInvalidWfmElement(this._handle, Element_Value, out Is_InvalidAsUShort);
            Is_Invalid = System.Convert.ToBoolean(Is_InvalidAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ReadWaveform</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ReadWaveform</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_ReadWaveform& (ViSession& vi, ViConstString& channel, ViInt32& waveformSize, ViInt32& maxtime, ViReal64[]& waveform, ViInt32*& actualPoints, ViReal64*& initialX, ViReal64*& xIncrement);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & 
        /// 
        /// This function is included for compliance with the IviScope Class Specification.</td></tr></table><p class = "Body">Initiates an acquisition on the channels that you enable with  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureVertical.html')"><span class="Monospace">niScope_ConfigureVertical</span></a>. This  function then waits for the acquisition to complete and returns the waveform for the channel you specify. Call  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_FetchWaveform.html')"><span class="Monospace">niScope_FetchWaveform</span></a> to obtain the waveforms for each of the remaining enabled channels without initiating another acquisition.</p> <p class = "Body">Use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualRecordLength.html')"><span class="Monospace">niScope_ActualRecordLength</span></a> to determine the required size for the <strong>waveform</strong> array.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureChannel</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">channel</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel  to   configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.
        /// <p class = "Body">Default Value: &#34;0&#34;</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <param name="Waveform_Size">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ReadWaveform</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">waveformSize</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The number of elements to insert into the <strong>waveform</strong> array.</td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="MaxTime">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ReadWaveform</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">maxtime</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Pass the maximum length of time in which to allow the read waveform operation to complete.   
        ///  <p class = "Body">If the operation does not complete within this time interval, the function returns the
        ///   <span class="Monospace-Bold">NISCOPE_ERROR_MAX_TIME_EXCEEDED</span> error code.  When this occurs, you can call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_Abort.html')"><span class="Monospace">niScope_Abort</span></a> to cancel the read waveform operation and return the digitizer to the idle state.</p><p class = "Body">Units: milliseconds</p>
        /// <p class = "Body">Other Defined Values<br><span class="Monospace">NISCOPE_VAL_MAX_TIME_NONE</span>    <br><span class="Monospace">NISCOPE_VAL_MAX_TIME_INFINITE</span></p></td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Waveform">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ReadWaveform</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">waveform</td>
        /// <td class="paramDataType">ViReal64[]</td>
        /// <td>Returns the waveform that the digitizer acquires.<br>Units: volts</td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Actual_Points">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ReadWaveform</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">actualPoints</td>
        /// <td class="paramDataType">ViInt32*</td>
        /// <td>Indicates the actual number of points the function placed in the <strong>waveform</strong> array.</td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Initial__X">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ReadWaveform</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">initialX</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>Indicates the time of the first point in the <strong>waveform</strong> array relative to the Reference Position.  <p class = "Body">Units: seconds</p>  <p class = "Body">For example, if the digitizer acquires the first point in the <strong>waveform</strong> array 1 second before the trigger, this 
        /// parameter returns the value &#8211;1.0.  If the acquisition of the first point occurs at the same time as
        ///  the trigger, this parameter returns the value 0.0.</p></td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="X_Increment">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ReadWaveform</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">xIncrement</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>Indicates the length of time between points in the <strong>waveform</strong> array.  <p class = "Body">Units: seconds</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ReadWaveform(string Channel, int Waveform_Size, int MaxTime, double[] Waveform, out int Actual_Points, out double Initial__X, out double X_Increment)
        {
            int pInvokeResult = PInvoke.ReadWaveform(this._handle, Channel, Waveform_Size, MaxTime, Waveform, out Actual_Points, out Initial__X, out X_Increment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_FetchWaveformMeasurement</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_FetchWaveformMeasurement</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_FetchWaveformMeasurement& (ViSession& vi, ViConstString& channel, ViInt32& measFunction, ViReal64*& measurement);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Notes</strong>& & This function is included for compliance with the IviScope Class Specification.
        /// 
        /// <p class ="Body">
        /// 
        ///  You can use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ReadWaveformMeasurement.html')"><span class="Monospace">niScope_ReadWaveformMeasurement</span></a> 
        /// instead of this function. <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ReadWaveformMeasurement.html')"><span class="Monospace">niScope_ReadWaveformMeasurement</span></a> starts an acquisition on all 
        /// enabled channels, waits for the acquisition to complete, obtains a waveform measurement on the specified 
        /// channel, and returns the waveform for the specified channel. Call this function separately to obtain any 
        /// other waveform measurements on a specific channel.</p></td></tr></table>
        /// 
        /// 
        /// 
        /// 
        /// <p class = "Body">Configure the appropriate reference 
        /// levels before calling this function. You can configure the low, mid, and high references by  setting the 
        /// following attributes:</p> <p class = "Body"><a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_HIGH_REF.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_HIGH_REF</span></a> <br><a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_LOW_REF.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_LOW_REF</span></a> <br><a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_MID_REF.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_MID_REF</span></a></p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureChannel</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">channel</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel  to   configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.
        /// <p class = "Body">Default Value: &#34;0&#34;</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <param name="Meas_Function">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_FetchWaveformMeasurement</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">measFunction</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Characteristic of the acquired waveform to be measured.</td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Measurement">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_FetchWaveformMeasurement</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">measurement</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>The measured value.</td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int FetchWaveformMeasurement(string Channel, int Meas_Function, out double Measurement)
        {
            int pInvokeResult = PInvoke.FetchWaveformMeasurement(this._handle, Channel, Meas_Function, out Measurement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureRefLevels</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ConfigureRefLevels</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_ConfigureRefLevels& (ViSession& vi, ViReal64& low, ViReal64& mid, ViReal64& high);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// <p class="Body">This function is included for compliance with the IviScope Class Specification.</p><p class = "Body">Configures the reference levels for all channels of the digitizer. The levels may be set on a per channel basis by setting  <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL</span></a>, 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL</span>
        /// </a>, and <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL</span>.</a> </p>
        /// <p class = "Body">This function configures the reference levels for waveform measurements. 
        /// Call this function before calling <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_FetchMeasurement.html')"><span class="Monospace">niScope_FetchMeasurement</span></a> to take a rise time, fall time, width negative, width positive, duty cycle negative, or duty cycle positive measurement.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Low">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureRefLevels</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">low</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>Pass the low reference you want the digitizer to use for waveform measurements.<p class = "Body">Units: Either a percentage or voltage based 
        /// on <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_REF_LEVEL_UNITS.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_REF_LEVEL_UNITS</span></a>. A percentage is calculated with the
        ///  voltage low and voltage high measurements representing 0% and 100%, respectively.</p><p class = "Body">Default Value:  10.0</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <param name="Mid">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureRefLevels</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">mid</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>Pass the mid reference you want the digitizer to use for waveform measurements.<p class = "Body">Units: Either a percentage or 
        /// voltage based on <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_REF_LEVEL_UNITS.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_REF_LEVEL_UNITS</span></a>. A percentage is 
        /// calculated with the voltage low and voltage high measurements representing 0% and 100%, respectively.</p><p class = "Body">Default 
        /// Value:  50.0</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <param name="High">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureRefLevels</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">high</td>
        /// <td class="paramDataType">ViReal64</td>
        /// <td>Pass the high reference you want the digitizer to use for waveform measurements.<p class = "Body">Units: Either a percentage or 
        /// voltage based on <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_REF_LEVEL_UNITS.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_REF_LEVEL_UNITS</span></a>. A percentage is 
        /// calculated with the voltage low and voltage high measurements representing 0% and 100%, respectively.</p>
        /// <p class = "Body">Default Value:  90.0</p></td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ConfigureRefLevels(double Low, double Mid, double High)
        {
            int pInvokeResult = PInvoke.ConfigureRefLevels(this._handle, Low, Mid, High);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ReadWaveformMeasurement</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_ReadWaveformMeasurement</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_ReadWaveformMeasurement& (ViSession& vi, ViConstString& channel, ViInt32& measFunction, ViInt32& maxTime, ViReal64*& measurement);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & 
        /// 
        /// This function is included for compliance with the IviScope Class Specification.</td></tr></table>
        /// <p class = "Body">Initiates a new waveform acquisition and returns a specified waveform measurement from a specific channel.</p> <p class = "Body">This function initiates an acquisition on the channels that you enable with the <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureVertical.html')"><span class="Monospace">niScope_ConfigureVertical</span></a> function. It then waits for the acquisition to complete, obtains a waveform measurement on the channel you specify, and returns the measurement value. You specify a particular measurement type, such as rise time, frequency, or voltage peak-to-peak. </p><p class = "Body">You can call the <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_FetchWaveformMeasurement.html')"><span class="Monospace">niScope_FetchWaveformMeasurement</span></a> function separately to obtain any other waveform measurement on a specific channel without initiating another acquisition. </p><p class = "Body">You must configure the appropriate reference levels before calling this function. Configure the low, mid, and high references by calling <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureRefLevels.html')"><span class="Monospace">niScope_ConfigureRefLevels</span></a> or by setting the following attributes:</p> <p class = "Body"><a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_HIGH_REF.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_HIGH_REF</span></a> <br><a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_LOW_REF.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_LOW_REF</span></a> <br><a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_MID_REF.html')"><span class="Monospace">NISCOPE_ATTR_MEAS_MID_REF</span></a></p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Channel">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ConfigureChannel</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">channel</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>The channel  to   configure. For more information, refer to <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviChannelStringSyntaxforC.html')">Channel String Syntax</a>.
        /// <p class = "Body">Default Value: &#34;0&#34;</p></td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <param name="Meas_Function">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ReadWaveformMeasurement</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">measFunction</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>The scalar measurement to perform.</td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Max_Time">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ReadWaveformMeasurement</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">maxTime</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Pass the maximum length of time in which to allow the read waveform operation to complete.    <p class = "Body">If the operation does not complete within this time interval, the function
        ///  returns the <span class="Monospace-Bold">NISCOPE_ERROR_MAX_TIME_EXCEEDED</span> error code.  When this occurs, you can call <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_Abort.html')">niScope_Abort</a> to cancel the 
        ///  read waveform operation and return the digitizer to the idle state.</p><p class = "Body">Units: milliseconds</p></td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Measurement">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_ReadWaveformMeasurement</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">measurement</td>
        /// <td class="paramDataType">ViReal64*</td>
        /// <td>The measured value.</td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int ReadWaveformMeasurement(string Channel, int Meas_Function, int Max_Time, out double Measurement)
        {
            int pInvokeResult = PInvoke.ReadWaveformMeasurement(this._handle, Channel, Meas_Function, Max_Time, out Measurement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetNextCoercionRecord</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_GetNextCoercionRecord</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_GetNextCoercionRecord& (ViSession& vi, ViInt32& bufferSize, ViChar[]& record);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & 
        /// 
        /// This function is included for compliance with the IviScope Class Specification.</td></tr></table><p class = "Body">Returns the coercion information associated with the IVI session. This function retrieves and clears the oldest instance in which the instrument driver coerced a value you specified to another value.</p> <p class = "Body">If you set <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_RECORD_COERCIONS.html')"><span class="Monospace">NISCOPE_ATTR_RECORD_COERCIONS</span></a> to 
        /// <span class="Monospace"><span class="Monospace">VI_TRUE</span></span>, NI-SCOPE keeps a list of all coercions it makes on  ViInt32  or  ViReal64
        ///  values that you pass to instrument driver functions. Use this function to retrieve information from that 
        ///  list.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Buffer_Size">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_GetNextCoercionRecord</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">bufferSize</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Passes the number of bytes in the ViChar array you specify for the Description parameter.
        /// 
        /// <p class="Body">If the error description, including the terminating  NULL byte, contains more bytes than you indicate in this parameter, the function copies <strong>bufferSize</strong>& &#8211;& 1 bytes into the buffer, places an
        ///  ASCII  NULL byte at the end of the buffer, and returns the buffer size 
        ///  you must pass to get the entire value. For example, if the value is &#34;123456&#34; and the <strong>bufferSize</strong> is 4, the 
        ///  function places &#34;123&#34; into the buffer and returns 7. </p>
        ///  <p class="Body">
        ///  If you pass a negative number, the function copies the value to the buffer regardless of the number of 
        ///  bytes in the value. </p>
        ///  
        ///  <p class="Body">
        ///  If you pass 0, you can pass <span class="Monospace">VI_NULL</span> for the Description buffer parameter.</p></td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Record">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_GetNextCoercionRecord</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">record</td>
        /// <td class="paramDataType">ViChar[]</td>
        /// <td>Returns the next coercion record for the IVI session.  If there are no coercions records, the function 
        /// returns an empty string. The buffer must contain at least as many elements as the value you specify with 
        /// the <strong>bufferSize</strong> parameter.</td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int GetNextCoercionRecord(int Buffer_Size, System.Text.StringBuilder Record)
        {
            int pInvokeResult = PInvoke.GetNextCoercionRecord(this._handle, Buffer_Size, Record);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_error_query</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_error_query</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_error_query& (ViSession& vi, ViInt32*& errCode, ViChar[]& errMessage);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & 
        /// 
        /// This function is included for compliance with the IviScope Class Specification.
        /// </td></tr></table>
        /// <p class = "Body">Reads an error code and message from the error queue. National Instruments digitizers do not contain an error queue. Errors are reported as they occur. Therefore, this function does not detect errors.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Err_Code">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_error_query</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">errCode</td>
        /// <td class="paramDataType">ViInt32*</td>
        /// <td>Returns the error code for the session or execution thread. If you pass 0 for the Buffer Size, you can pass <span class="Monospace">VI_NULL</span> for this parameter.</td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <param name="Err_Message">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_error_query</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">errMessage</td>
        /// <td class="paramDataType">ViChar[]</td>
        /// <td>Formats the error code into a user-readable message string. The array must contain at least  256 elements (ViChar[256]).</td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int error_query(out int Err_Code, System.Text.StringBuilder Err_Message)
        {
            int pInvokeResult = PInvoke.error_query(this._handle, out Err_Code, Err_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetChannelName</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_GetChannelName</h1>
        ///  
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">ViStatus& niScope_GetChannelName& (ViSession& vi, ViInt32& index, ViInt32& bufferSize, ViChar[]& channelString);</p>
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <table class="Borderless-Wide">
        /// <tr>
        /// <td class="Icon"><img src="note.gif"></td>
        /// <td>
        /// <strong>Note</strong>& & 
        /// 
        /// This function is included for compliance with the IviScope Class Specification.</td></tr></table>
        /// <p class = "Body">Returns the channel string that is in the channel table at an index you specify. Not applicable to National Instruments digitizers.</p>
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Index">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_GetChannelName</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">index</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>A 1-based index into the channel table.</td>
        /// </tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Buffer_Size">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_GetChannelName</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">bufferSize</td>
        /// <td class="paramDataType">ViInt32</td>
        /// <td>Passes the number of bytes in the ViChar array you specify for the <strong>description</strong> parameter.
        /// 
        /// <p class="Body">If the error description, including the terminating  NULL byte, contains more bytes than you indicate 
        /// in this parameter, the function copies BufferSize - 1 bytes into the buffer, places an ASCII  NULL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is &#34;123456&#34; and the Buffer Size is 4, the function places &#34;123&#34; 
        /// into the buffer and returns 7.</p>
        /// <p class="Body">If you pass a negative number, the function copies the value to the buffer regardless of the number of 
        /// bytes in the value.</p></td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Channel_String">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head><script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <link rel="stylesheet" type="text/css" href="styles.css">
        /// <title>niScope_GetChannelName</title>
        /// </head>
        /// <body>
        /// <table class="Borderless"><tr><td class="paramName">channelString</td>
        /// <td class="paramDataType">ViChar[]</td>
        /// <td>Returns the channel string that is in the channel table at the index you specify. Do not modify the
        ///  contents of the channel string.</td>
        /// </tr></table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public int GetChannelName(int Index, int Buffer_Size, System.Text.StringBuilder Channel_String)
        {
            int pInvokeResult = PInvoke.GetChannelName(this._handle, Index, Buffer_Size, Channel_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_IsDeviceReady</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff"><h1 class="function">niScope_IsDeviceReady</h1>
        /// 
        /// <h2>C Function Prototype</h2>
        /// <p class="syntax">
        /// 
        /// ViStatus  niScope_IsDeviceReady  
        /// (ViRsrc resourceName,
        ///  ViConstString channelList,
        /// ViBoolean* deviceReady);</p>
        /// 
        /// <h2 class="purpose">Purpose</h2>
        /// 
        /// <p class="Body">  Call this function to determine whether the 
        /// device is ready for use or the device is still undergoing initialization.
        ///  
        ///   </p>
        /// 
        /// 
        /// 
        /// 
        /// </body>
        /// </html>
        /// </summary>
        /// <param name="Resource_Name">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">resourceName</td>
        /// 			<td class="paramDataType">ViRsrc</td>
        /// 			<td><strong>resourceName</strong> specifies the resource name of the device to initialize.
        /// 
        /// 	<h3>resourceName Examples</h3>
        /// 
        /// 		<table class="Bordered">
        /// 			<tr>
        /// 				<th class="Bordered">Example& #</th>
        /// 				<th class="Bordered">Device Type</th>
        /// 				<th class="Bordered">Syntax</th>
        /// 				<th class="Bordered">Variable</th>
        /// 			</tr>
        /// 			<tr>
        /// 				<td class="Bordered"><div align="center">1</div></td>
        /// 				<td class="Bordered">Traditional NI-DAQ device</td>
        /// 				<td class="Bordered">DAQ::<em>1</em></td>
        /// 				<td>(<em>1</em> = device number)</td>
        /// 			</tr>
        /// 			<tr>
        /// 				<td class="Bordered"><div align="center">2</div></td>
        /// 				<td class="Bordered">NI-DAQmx device</td>
        /// 				<td class="Bordered"><em>myDAQmxDevice</em></td>
        /// 				<td class="Bordered">(<em>myDAQmxDevice</em> = device name)</td>
        /// 			</tr>
        /// 			<tr>
        /// 				<td class="Bordered"><div align="center">3</div></td>
        /// 				<td class="Bordered">NI-DAQmx device</td>
        /// 				<td class="Bordered">DAQ::<em>myDAQmxDevice</em></td>
        /// 				<td class="Bordered">(<em>myDAQmxDevice</em> = device name)</td>
        /// 			</tr>
        /// 			<tr>
        /// 				<td class="Bordered"><div align="center">4</div></td>
        /// 				<td class="Bordered">NI-DAQmx device</td>
        /// 				<td class="Bordered">DAQ::<em>2</em></td>
        /// 				<td class="Bordered">(<em>2</em> = device name)</td>
        /// 			</tr>
        /// 
        /// 		</table>
        /// 
        /// <p class="Body">For Traditional NI-DAQ devices, the syntax is DAQ::<em>n</em>, where <em>n</em> is the device number assigned by MAX, as shown in Example 1.</p> 
        /// 
        /// <p class="Body">For NI-DAQmx devices, the syntax is just the device name specified in MAX, as shown in Example 2. Typical default names for NI-DAQmx devices in MAX are Dev1 or PXI1Slot1. You can rename an NI-DAQmx device by right-clicking on the name in MAX and entering a new name.</p>
        /// 
        /// <p class="Body">An alternate syntax for NI-DAQmx devices consists of DAQ::<em>NI-DAQmx device name</em>, as shown in Example 3. This naming convention allows for the use of an NI-DAQmx device in an application that was originally designed for a Traditional NI-DAQ device. For example, if the application expects DAQ::1, you can rename the NI-DAQmx device to 1 in MAX and pass in DAQ::1 for the resource name, as shown in Example 4.</p>
        /// 
        /// <p class="Body">If you use the DAQ::<em>n</em> syntax and an NI-DAQmx device name already exists with that same name, the NI-DAQmx device is matched first.</p> 
        /// 
        /// <p class="Body">You can also pass in the name of an IVI logical name or an IVI virtual name configured with the IVI Configuration utility, as shown in Example 5. A logical name identifies a particular virtual instrument. A virtual name identifies a specific device and specifies the initial settings for the session.</p>
        /// 
        /// <table class="borderless"><tr>
        /// <td class="Icon"><img src="caution.gif"></td>
        /// <td colspan=2><span class="Dark-Red"><strong>Caution</strong>& & Traditional NI-DAQ and NI-DAQmx device names are not case-sensitive. However, all IVI names, such as logical names, are case-sensitive. If you use logical names, driver session names, or virtual names in your program, you must make sure that the name you use matches the name in the IVI Configuration Store file exactly, without any variations in the case of the characters.</span></td></tr></table>
        /// 
        /// 			</td>
        /// 		</tr>
        /// 		</table></body>
        /// </html>
        /// </param>
        /// <param name="Channel_List">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_ConfigureVertical</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">channelList</td>
        /// <td class="paramDataType">ViConstString</td>
        /// <td>Use only "" or a null pointer. If you specify a channel, NI-SCOPE will return an error.</td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <param name="Device_Ready">
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_GetAttributeViBoolean</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="Borderless"><tr><td class="paramName">deviceReady</td>
        /// <td class="paramDataType">ViBoolean*</td>
        /// <td>Returns True if the device is ready to use, or False if the device is still initializing. </td></tr>
        /// </table></body>
        /// </html>
        /// </param>
        /// <returns>
        /// <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        /// <HTML>
        /// <head>
        /// <script type="text/javascript" src="launchhelp.js"></script>
        /// <script type="text/javascript" src="pdf.js"></script>
        /// <title>niScope_init</title>
        /// <link rel="STYLESHEET" type="print/css" href="print.css">
        /// <link rel="STYLESHEET" type="text/css" href="styles.css">
        /// </head>
        /// <body bgcolor="#ffffff">
        /// <table class="borderless">
        /// <tr>
        /// <td class="paramName">Status</td>
        /// <td class="paramDataType">ViStatus</td>
        /// <td>Reports the status of this operation. To obtain a text description of the status code, 
        /// call 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetErrorMessage.html')">niScope_GetErrorMessage</a>. 
        /// To obtain additional information concerning the error 
        /// condition, use <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetError.html')">niScope_GetError</a> 
        /// and 
        /// <a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearError.html')">niScope_ClearError</a>.
        /// 
        /// The general meaning of the status code is as follows:<br><br>
        /// 
        /// <table class="bordered">
        /// <tr>
        /// <th class="bordered">Value</th>
        /// <th class="bordered">Meaning</th>
        /// </tr>
        /// <tr>
        /// <td class="bordered">0</td>
        /// <td class="bordered">Success</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Positive Values</td>
        /// <td class="bordered">Warnings</td>
        /// </tr>
        /// <tr>
        /// <td class="bordered">Negative Values</td>
        /// <td class="bordered">Errors</td>
        /// </tr>
        /// </table>
        /// </td></tr></table>
        /// </body>
        /// </html>
        /// </returns>
        public static int IsDeviceReady(string Resource_Name, string Channel_List, out bool Device_Ready)
        {
            ushort Device_ReadyAsUShort;
            int pInvokeResult = PInvoke.IsDeviceReady(Resource_Name, Channel_List, out Device_ReadyAsUShort);
            Device_Ready = System.Convert.ToBoolean(Device_ReadyAsUShort);
            PInvoke.TestForError(new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero), pInvokeResult);
            return pInvokeResult;
        }

        public void Dispose()
        {
            this.Dispose(true);
            System.GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if ((this._disposed == false))
            {
                PInvoke.close(this._handle);
                this._handle = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
            }
            this._disposed = true;
        }

        public int GetInt32(niScopeProperties propertyId, string repeatedCapabilityOrChannel)
        {
            int val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViInt32(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public int GetInt32(niScopeProperties propertyId)
        {
            return this.GetInt32(propertyId, "");
        }

        public long GetInt64(niScopeProperties propertyId, string repeatedCapabilityOrChannel)
        {
            long val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViInt64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public long GetInt64(niScopeProperties propertyId)
        {
            return this.GetInt64(propertyId, "");
        }

        public double GetDouble(niScopeProperties propertyId, string repeatedCapabilityOrChannel)
        {
            double val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViReal64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public double GetDouble(niScopeProperties propertyId)
        {
            return this.GetDouble(propertyId, "");
        }

        public string GetString(niScopeProperties propertyId, string repeatedCapabilityOrChannel)
        {
            System.Text.StringBuilder newVal = new System.Text.StringBuilder(512);
            int size = PInvoke.GetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), 512, newVal);
            if ((size < 0))
            {
                PInvoke.ThrowError(this._handle, size);
            }
            else
            {
                if ((size > 0))
                {
                    newVal.Capacity = size;
                    PInvoke.TestForError(this._handle, PInvoke.GetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), size, newVal));
                }
            }
            return newVal.ToString();
        }

        public string GetString(niScopeProperties propertyId)
        {
            return this.GetString(propertyId, "");
        }

        public bool GetBoolean(niScopeProperties propertyId, string repeatedCapabilityOrChannel)
        {
            ushort val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViBoolean(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return System.Convert.ToBoolean(val);
        }

        public bool GetBoolean(niScopeProperties propertyId)
        {
            return this.GetBoolean(propertyId, "");
        }

        public void SetInt32(niScopeProperties propertyId, string repeatedCapabilityOrChannel, int val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViInt32(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetInt32(niScopeProperties propertyId, int val)
        {
            this.SetInt32(propertyId, "", val);
        }

        public void SetInt64(niScopeProperties propertyId, string repeatedCapabilityOrChannel, long val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViInt64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetInt64(niScopeProperties propertyId, long val)
        {
            this.SetInt64(propertyId, "", val);
        }

        public void SetDouble(niScopeProperties propertyId, string repeatedCapabilityOrChannel, double val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViReal64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetDouble(niScopeProperties propertyId, double val)
        {
            this.SetDouble(propertyId, "", val);
        }

        public void SetString(niScopeProperties propertyId, string repeatedCapabilityOrChannel, string val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetString(niScopeProperties propertyId, string val)
        {
            this.SetString(propertyId, "", val);
        }

        public void SetBoolean(niScopeProperties propertyId, string repeatedCapabilityOrChannel, bool val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViBoolean(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), System.Convert.ToUInt16(val)));
        }

        public void SetBoolean(niScopeProperties propertyId, bool val)
        {
            this.SetBoolean(propertyId, "", val);
        }

        private class PInvoke
        {

            [DllImport("niScope_32.dll", EntryPoint = "niScope_init", CallingConvention = CallingConvention.StdCall)]
            public static extern int init(string Resource_Name, ushort ID_Query, ushort Reset_Device, out System.IntPtr Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_InitWithOptions", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitWithOptions(string Resource_Name, ushort ID_Query, ushort Reset_Device, string Option_String, out System.IntPtr Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_AutoSetup", CallingConvention = CallingConvention.StdCall)]
            public static extern int AutoSetup(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureAcquisition", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAcquisition(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Acquisition_Type);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureHorizontalTiming", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureHorizontalTiming(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Min_Sample_Rate, int Min_Num_Pts, double Ref_Position, int Num_Records, ushort Enforce_Realtime);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureChanCharacteristics", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureChanCharacteristics(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, double Input_Impedance, double Max_Input_Frequency);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureVertical", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureVertical(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, double Range, double Offset, int Coupling, double Probe_Attenuation, ushort Enabled);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ActualRecordLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int ActualRecordLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Record_Length);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ActualNumWfms", CallingConvention = CallingConvention.StdCall)]
            public static extern int ActualNumWfms(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, out int Num_Wfms);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ActualMeasWfmSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int ActualMeasWfmSize(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Meas_Function, out int Meas_Waveform_Size);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_SampleMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SampleMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sample_Mode);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_SampleRate", CallingConvention = CallingConvention.StdCall)]
            public static extern int SampleRate(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Sample_Rate);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureTriggerDigital", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerDigital(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Trigger_Source, int Slope, double Holdoff, double Delay);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureTriggerEdge", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerEdge(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Trigger_Source, double Level, int Slope, int Trigger_Coupling, double Holdoff, double Delay);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureTriggerVideo", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerVideo(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Trigger_Source, ushort Enable_DC_Restore, int Signal_Format, int Event, int Line_Number, int Polarity, int Trigger_Coupling, double Holdoff, double Delay);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureTriggerHysteresis", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerHysteresis(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Trigger_Source, double Level, double Hysteresis, int Slope, int Trigger_Coupling, double Holdoff, double Delay);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureTriggerImmediate", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerImmediate(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureTriggerSoftware", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerSoftware(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Holdoff, double Delay);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureTriggerWindow", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerWindow(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Trigger_Source, double Low_Level, double High_Level, int Window_Mode, int Trigger_Coupling, double Holdoff, double Delay);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_SendSoftwareTriggerEdge", CallingConvention = CallingConvention.StdCall)]
            public static extern int SendSoftwareTriggerEdge(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Which_Trigger);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_AdjustSampleClockRelativeDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int AdjustSampleClockRelativeDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Delay);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureClock", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureClock(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Input_Clock_Source, string Output_Clock_Source, string Clock_Sync_Pulse_Source, ushort Master_Enabled);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureTriggerOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerOutput(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Event, string Trigger_Output);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ExportSignal", CallingConvention = CallingConvention.StdCall)]
            public static extern int ExportSignal(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Signal, string Signal_Identifier, string Output_Terminal);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureEqualizationFilterCoefficients", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureEqualizationFilterCoefficients(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Number_Of_Coefficients, double[] Coefficients);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetEqualizationFilterCoefficients", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetEqualizationFilterCoefficients(System.Runtime.InteropServices.HandleRef Instrument_Handle, string channel, int Number_Of_Coefficients, [In, Out] double[] Coefficients);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetFrequencyResponse", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencyResponse(System.Runtime.InteropServices.HandleRef vi, string channel, int bufferSize, double[] frequencies, double[] amplitudes, double[] phases, out int numberOfFrequencies);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_Abort", CallingConvention = CallingConvention.StdCall)]
            public static extern int Abort(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_AcquisitionStatus", CallingConvention = CallingConvention.StdCall)]
            public static extern int AcquisitionStatus(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Acquisition_Status);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_Commit", CallingConvention = CallingConvention.StdCall)]
            public static extern int Commit(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_Fetch", CallingConvention = CallingConvention.StdCall)]
            public static extern int Fetch(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, double Timeout, int Num_Samples, [In, Out] double[] Wfm, [In, Out] niScopeWfmInfo[] Wfm_Info);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_FetchComplex", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchComplex(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, double Timeout, int Num_Samples, [In, Out] nicomplexnumber[] Wfm, [In, Out] niScopeWfmInfo[] Wfm_Info);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_FetchComplexBinary16", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchComplexBinary16(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, double Timeout, int Num_Samples, out short Wfm, [In, Out] niScopeWfmInfo[] Wfm_Info);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_FetchBinary8", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchBinary8(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, double Timeout, int Num_Samples, [In, Out] sbyte[] Wfm, [In, Out] niScopeWfmInfo[] Wfm_Info);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_FetchBinary16", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchBinary16(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, double Timeout, int Num_Samples, [In, Out] short[] Wfm, [In, Out] niScopeWfmInfo[] Wfm_Info);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_FetchBinary32", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchBinary32(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, double Timeout, int Num_Samples, [In, Out] int[] Wfm, [In, Out] niScopeWfmInfo[] Wfm_Info);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetNormalizationCoefficients", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNormalizationCoefficients(System.Runtime.InteropServices.HandleRef vi, string channelList, int arraySize, System.IntPtr coefficientInfo, out int numberOfCoefficientSets);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetScalingCoefficients", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetScalingCoefficients(System.Runtime.InteropServices.HandleRef vi, string channelList, int arraySize, System.IntPtr coefficientInfo, out int numberOfCoefficientSets);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_InitiateAcquisition", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitiateAcquisition(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_Read", CallingConvention = CallingConvention.StdCall)]
            public static extern int Read(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, double Timeout, int Num_Samples, [In, Out] double[] Wfm, [In, Out] niScopeWfmInfo[] Wfm_Info);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_AddWaveformProcessing", CallingConvention = CallingConvention.StdCall)]
            public static extern int AddWaveformProcessing(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Meas_Function);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ClearWaveformMeasurementStats", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearWaveformMeasurementStats(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Clearable_Measurement_Function);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ClearWaveformProcessing", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearWaveformProcessing(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_FetchArrayMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchArrayMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, double Timeout, int Array_Meas_Function, int Meas_Wfm_Size, [In, Out] double[] Meas_Wfm, [In, Out] niScopeWfmInfo[] Wfm_Info);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_FetchMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, double Timeout, int Scalar_Meas_Function, [In, Out] double[] Result);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_FetchMeasurementStats", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchMeasurementStats(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, double Timeout, int Scalar_Meas_Function, [In, Out] double[] Result, [In, Out] double[] Mean, [In, Out] double[] Stdev, [In, Out] double[] Min, [In, Out] double[] Max, [In, Out] int[] Num_In_Stats);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ReadMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, double Timeout, int Scalar_Meas_Function, [In, Out] double[] Result);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_CalSelfCalibrate", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalSelfCalibrate(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Option);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ResetDevice", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetDevice(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_Disable", CallingConvention = CallingConvention.StdCall)]
            public static extern int Disable(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ProbeCompensationSignalStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int ProbeCompensationSignalStart(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ProbeCompensationSignalStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int ProbeCompensationSignalStop(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_reset", CallingConvention = CallingConvention.StdCall)]
            public static extern int reset(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ResetWithDefaults", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetWithDefaults(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_revision_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int revision_query(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Driver_Revision, System.Text.StringBuilder Firmware_Revision);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_self_test", CallingConvention = CallingConvention.StdCall)]
            public static extern int self_test(System.Runtime.InteropServices.HandleRef Instrument_Handle, out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetStreamEndpointHandle", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetStreamEndpointHandle(System.Runtime.InteropServices.HandleRef vi, string Stream_Name, out uint Writer_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_errorHandler", CallingConvention = CallingConvention.StdCall)]
            public static extern int errorHandler(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Error_Code, System.Text.StringBuilder Error_Source, System.Text.StringBuilder Error_Description);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetErrorMessage", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetErrorMessage(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Error_Code, int Buffer_Size, System.Text.StringBuilder Error_Message);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureAcquisitionRecord", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAcquisitionRecord(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Time_per_Record, int Min_Num_Points, double Acquisition_Start_Time);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel, double Range, double Offset, int Coupling, double Probe_Attenuation, ushort Enabled);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureEdgeTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureEdgeTriggerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Source, double Level, int Slope);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Type, double Holdoff);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureTriggerCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Coupling);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureTVTriggerLineNumber", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTVTriggerLineNumber(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Line_Number);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureTVTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTVTriggerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Source, int Signal_Format, int Event, int Polarity);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_SendSWTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int SendSWTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ClearInterchangeWarnings", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearInterchangeWarnings(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetNextInterchangeWarning", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNextInterchangeWarning(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Interchange_Warning);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ResetInterchangeCheck", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetInterchangeCheck(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_FetchWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel, int Waveform_Size, [In, Out] double[] Waveform, out int Actual_Points, out double Initial_X, out double X_Increment);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_IsInvalidWfmElement", CallingConvention = CallingConvention.StdCall)]
            public static extern int IsInvalidWfmElement(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Element_Value, out ushort Is_Invalid);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ReadWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel, int Waveform_Size, int MaxTime, [In, Out] double[] Waveform, out int Actual_Points, out double Initial__X, out double X_Increment);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_FetchWaveformMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchWaveformMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel, int Meas_Function, out double Measurement);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ConfigureRefLevels", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureRefLevels(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Low, double Mid, double High);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_ReadWaveformMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadWaveformMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel, int Meas_Function, int Max_Time, out double Measurement);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetNextCoercionRecord", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNextCoercionRecord(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Record);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_error_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_query(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Err_Code, System.Text.StringBuilder Err_Message);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetChannelName", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetChannelName(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Index, int Buffer_Size, System.Text.StringBuilder Channel_String);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_IsDeviceReady", CallingConvention = CallingConvention.StdCall)]
            public static extern int IsDeviceReady(string Resource_Name, string Channel_List, out ushort Device_Ready);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_close", CallingConvention = CallingConvention.StdCall)]
            public static extern int close(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetAttributeViInt32", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViInt32(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Attribute_ID, out int Value);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetAttributeViInt64", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViInt64(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Attribute_ID, out long Value);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetAttributeViReal64", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViReal64(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Attribute_ID, out double Value);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetAttributeViString", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViString(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Attribute_ID, int Buf_Size, System.Text.StringBuilder Value);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetAttributeViBoolean", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViBoolean(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Attribute_ID, out ushort Value);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetAttributeViSession", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViSession(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Attribute_ID, out System.Runtime.InteropServices.HandleRef Value);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_SetAttributeViInt32", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViInt32(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Attribute_ID, int Value);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_SetAttributeViInt64", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViInt64(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Attribute_ID, long Value);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_SetAttributeViReal64", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViReal64(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Attribute_ID, double Value);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_SetAttributeViString", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViString(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Attribute_ID, string Value);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_SetAttributeViBoolean", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViBoolean(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Attribute_ID, ushort Value);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_SetAttributeViSession", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViSession(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_List, int Attribute_ID, System.Runtime.InteropServices.HandleRef Value);

            [DllImport("niScope_32.dll", EntryPoint = "niScope_GetError", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetError(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Error_Code, int Buffer_Size, System.Text.StringBuilder Description);


            public static int TestForError(System.Runtime.InteropServices.HandleRef handle, int status)
            {
                if ((status < 0))
                {
                    PInvoke.ThrowError(handle, status);
                }
                return status;
            }

            public static int ThrowError(System.Runtime.InteropServices.HandleRef handle, int code)
            {
                int status;
                int size = PInvoke.GetError(handle, out status, 0, null);
                System.Text.StringBuilder msg = new System.Text.StringBuilder();
                if ((size >= 0))
                {
                    msg.Capacity = size;
                    PInvoke.GetError(handle, out status, size, msg);
                }
                throw new System.Runtime.InteropServices.ExternalException(msg.ToString(), code);
            }
        }
    }

    public class niScopeConstants
    {

        public const int Normal = 0;

        public const int Flexres = 1001;

        public const int Ddc = 1002;

        public const double _1MegOhm = 1000000D;

        public const double _50Ohms = 50D;

        public const int Ac = 0;

        public const int Dc = 1;

        public const int Gnd = 2;

        public const int NoMeasurement = 4000;

        public const int LastAcqHistogram = 4001;

        public const int MultiAcqVoltageHistogram = 4004;

        public const int MultiAcqTimeHistogram = 4005;

        public const int MultiAcqAverage = 4016;

        public const int FftPhaseSpectrum = 4002;

        public const int FftAmpSpectrumVoltsRms = 4003;

        public const int FftAmpSpectrumDb = 4019;

        public const int PolynomialInterpolation = 4011;

        public const int ArrayIntegral = 4006;

        public const int Derivative = 4007;

        public const int Inverse = 4008;

        public const int MultiplyChannels = 4012;

        public const int AddChannels = 4013;

        public const int SubtractChannels = 4014;

        public const int DivideChannels = 4015;

        public const int ArrayOffset = 4025;

        public const int ArrayGain = 4026;

        public const int TriangleWindow = 4023;

        public const int BlackmanWindow = 4024;

        public const int HammingWindow = 4020;

        public const int HanningWindow = 4009;

        public const int FlatTopWindow = 4010;

        public const int ButterworthFilter = 4017;

        public const int ChebyshevFilter = 4018;

        public const int BesselFilter = 4022;

        public const int WindowedFirFilter = 4021;

        public const int Positive = 1;

        public const int Negative = 0;

        public const string Rtsi0 = "VAL_RTSI_0";

        public const string Rtsi1 = "VAL_RTSI_1";

        public const string Rtsi2 = "VAL_RTSI_2";

        public const string Rtsi3 = "VAL_RTSI_3";

        public const string Rtsi4 = "VAL_RTSI_4";

        public const string Rtsi5 = "VAL_RTSI_5";

        public const string Rtsi6 = "VAL_RTSI_6";

        public const string Pfi0 = "VAL_PFI_0";

        public const string Pfi1 = "VAL_PFI_1";

        public const string Pfi2 = "VAL_PFI_2";

        public const string PxiStar = "VAL_PXI_STAR";

        public const int HfReject = 3;

        public const int LfReject = 4;

        public const int AcPlusHfReject = 1001;

        public const string External = "VAL_EXTERNAL";

        public const int Ntsc = 1;

        public const int Pal = 2;

        public const int Secam = 3;

        public const int MPal = 1001;

        public const int _480i5994FieldsPerSecond = 1010;

        public const int _480i60FieldsPerSecond = 1011;

        public const int _480p5994FramesPerSecond = 1015;

        public const int _480p60FramesPerSecond = 1016;

        public const int _576i50FieldsPerSecond = 1020;

        public const int _576p50FramesPerSecond = 1025;

        public const int _720p50FramesPerSecond = 1031;

        public const int _720p5994FramesPerSecond = 1032;

        public const int _720p60FramesPerSecond = 1033;

        public const int _1080i50FieldsPerSecond = 1040;

        public const int _1080i5994FieldsPerSecond = 1041;

        public const int _1080i60FieldsPerSecond = 1042;

        public const int _1080p24FramesPerSecond = 1045;

        public const int TvPositive = 1;

        public const int TvNegative = 2;

        public const int TvEventField1 = 1;

        public const int TvEventField2 = 2;

        public const int TvEventAnyField = 3;

        public const int TvEventAnyLine = 4;

        public const int TvEventLineNumber = 5;

        public const int EnteringWindow = 0;

        public const int LeavingWindow = 1;

        public const int SoftwareTriggerStart = 0;

        public const int SoftwareTriggerReference = 2;

        public const int SoftwareTriggerArmReference = 1;

        public const int SoftwareTriggerAdvance = 3;

        public const string NoSource = "VAL_NO_SOURCE";

        public const string RtsiClock = "VAL_RTSI_CLOCK";

        public const string PxiClock = "VAL_PXI_CLOCK";

        public const string ClkIn = "VAL_CLK_IN";

        public const string ClkOut = "VAL_CLK_OUT";

        public const int None = 0;

        public const int StartTriggerEvent = 2;

        public const int StopTriggerEvent = 1;

        public const int EndOfAcquisitionEvent = 3;

        public const int EndOfRecordEvent = 4;

        public const string Rtsi7 = "VAL_RTSI_7";

        public const int StartTrigger = 2;

        public const int RefTrigger = 1;

        public const int AdvanceTrigger = 5;

        public const int ReadyForAdvanceEvent = 6;

        public const int ReadyForStartEvent = 7;

        public const int ReadyForRefEvent = 10;

        public const int RefClock = 100;

        public const int SampleClock = 101;

        public const int _5vOut = 13;

        public const int AllMeasurements = 10000;

        public const int Frequency = 2;

        public const int AverageFrequency = 1016;

        public const int FftFrequency = 1008;

        public const int Period = 3;

        public const int AveragePeriod = 1015;

        public const int RiseTime = 0;

        public const int FallTime = 1;

        public const int VoltageRms = 4;

        public const int VoltageCycleRms = 16;

        public const int AcEstimate = 1012;

        public const int FftAmplitude = 1009;

        public const int VoltageAverage = 10;

        public const int VoltageCycleAverage = 17;

        public const int DcEstimate = 1013;

        public const int VoltageMax = 6;

        public const int VoltageMin = 7;

        public const int VoltagePeakToPeak = 5;

        public const int VoltageHigh = 8;

        public const int VoltageLow = 9;

        public const int Amplitude = 15;

        public const int VoltageBase = 1006;

        public const int VoltageTop = 1007;

        public const int VoltageBaseToTop = 1017;

        public const int WidthNeg = 11;

        public const int WidthPos = 12;

        public const int DutyCycleNeg = 13;

        public const int DutyCyclePos = 14;

        public const int Overshoot = 18;

        public const int Preshoot = 19;

        public const int LowRefVolts = 1000;

        public const int MidRefVolts = 1001;

        public const int HighRefVolts = 1002;

        public const int Area = 1003;

        public const int CycleArea = 1004;

        public const int Integral = 1005;

        public const int RiseSlewRate = 1010;

        public const int FallSlewRate = 1011;

        public const int TimeDelay = 1014;

        public const int PhaseDelay = 1018;

        public const int VoltageHistogramMean = 2000;

        public const int VoltageHistogramStdev = 2001;

        public const int VoltageHistogramMedian = 2003;

        public const int VoltageHistogramMode = 2010;

        public const int VoltageHistogramHits = 2004;

        public const int VoltageHistogramNewHits = 2011;

        public const int VoltageHistogramMax = 2005;

        public const int VoltageHistogramMin = 2006;

        public const int VoltageHistogramPeakToPeak = 2002;

        public const int VoltageHistogramMeanPlusStdev = 2007;

        public const int VoltageHistogramMeanPlus2Stdev = 2008;

        public const int VoltageHistogramMeanPlus3Stdev = 2009;

        public const int TimeHistogramMean = 3000;

        public const int TimeHistogramStdev = 3001;

        public const int TimeHistogramMedian = 3003;

        public const int TimeHistogramMode = 3010;

        public const int TimeHistogramHits = 3004;

        public const int TimeHistogramNewHits = 3011;

        public const int TimeHistogramMax = 3005;

        public const int TimeHistogramMin = 3006;

        public const int TimeHistogramPeakToPeak = 3002;

        public const int TimeHistogramMeanPlusStdev = 3007;

        public const int TimeHistogramMeanPlus2Stdev = 3008;

        public const int TimeHistogramMeanPlus3Stdev = 3009;

        public const int SelfCalibration = 0;

        public const int RestoreFactoryCalibration = 2;

        public const int ImmediateTrigger = 6;

        public const int Edge = 1;

        public const int TvTrigger = 5;

        public const int RealTime = 0;

        public const int EquivalentTime = 1;

        public const int Start = 482;

        public const int Pretrigger = 477;

        public const int Trigger = 483;

        public const int ReadPointer = 388;

        public const int Now = 481;

        public const double _75Ohms = 75D;

        public const int SingleEnded = 0;

        public const int UnbalancedDifferential = 1;

        public const int Differential = 2;

        public const int _48TapStandard = 0;

        public const int _48TapHanning = 1;

        public const int _16TapHanning = 2;

        public const int _8TapHanning = 3;

        public const int RisExactNumAverages = 1;

        public const int RisMinNumAverages = 2;

        public const int RisIncomplete = 3;

        public const int RisLimitedBinWidth = 5;

        public const int EdgeTrigger = 1;

        public const int HysteresisTrigger = 1001;

        public const int DigitalTrigger = 1002;

        public const int WindowTrigger = 1003;

        public const int SoftwareTrigger = 1004;

        public const string Immediate = "VAL_IMMEDIATE";

        public const string SwTrigFunc = "VAL_SW_TRIG_FUNC";

        public const int NoTriggerMod = 1;

        public const int Auto = 2;

        public const int AnalogDetectionCircuit = 0;

        public const int DdcOutput = 1;

        public const int Symmetric = 0;

        public const int Asymmetric = 1;

        public const int Even = 0;

        public const int Odd = 1;

        public const int Phase = 0;

        public const int Magnitude = 1;

        public const int Resampler = 2;

        public const int Real = 0;

        public const int Complex = 1;

        public const int ErrorReportingError = 0;

        public const int ErrorReportingWarning = 1;

        public const int ErrorReportingDisabled = 2;

        public const int AddrPhysical = 0;

        public const int AddrVirtual = 1;

        public const int NotifyNever = 0;

        public const int NotifyDone = 1;
    }

    [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
    public struct niScopeWfmInfo
    {

        public double AbsoluteInitialX;

        public double RelativeInitialX;

        public double XIncrement;

        public int ActualSamples;

        public double Offset;

        public double Gain;

        public double Reserved1;

        public double Reserved2;
    }

    public enum niScopeProperties
    {

        /// <summary>
        /// System.Int32
        /// </summary>
        AcquisitionType = 1250101,

        /// <summary>
        /// System.Int32
        /// </summary>
        SampleMode = 1250106,

        /// <summary>
        /// System.Int32
        /// </summary>
        BinarySampleWidth = 1150005,

        /// <summary>
        /// System.Int32
        /// </summary>
        Resolution = 1150102,

        /// <summary>
        /// System.Int32
        /// </summary>
        FetchRelativeTo = 1150077,

        /// <summary>
        /// System.Int32
        /// </summary>
        FetchOffset = 1150078,

        /// <summary>
        /// System.Int32
        /// </summary>
        FetchRecordNumber = 1150079,

        /// <summary>
        /// System.Int32
        /// </summary>
        FetchNumRecords = 1150080,

        /// <summary>
        /// System.Int32
        /// </summary>
        FetchMeasNumSamples = 1150081,

        /// <summary>
        /// System.Double
        /// </summary>
        PointsDone = 1150082,

        /// <summary>
        /// System.Int32
        /// </summary>
        RecordsDone = 1150083,

        /// <summary>
        /// System.Double
        /// </summary>
        Backlog = 1150084,

        /// <summary>
        /// System.Boolean
        /// </summary>
        RisInAutoSetupEnable = 1150106,

        /// <summary>
        /// System.Int32
        /// </summary>
        DataTransferBlockSize = 1150316,

        /// <summary>
        /// System.Double
        /// </summary>
        DataTransferMaximumBandwidth = 1150321,

        /// <summary>
        /// System.Int32
        /// </summary>
        DataTransferPreferredPacketSize = 1150322,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ChannelEnabled = 1250005,

        /// <summary>
        /// System.Double
        /// </summary>
        ProbeAttenuation = 1250004,

        /// <summary>
        /// System.Double
        /// </summary>
        VerticalRange = 1250001,

        /// <summary>
        /// System.Double
        /// </summary>
        VerticalOffset = 1250002,

        /// <summary>
        /// System.Int32
        /// </summary>
        VerticalCoupling = 1250003,

        /// <summary>
        /// System.Double
        /// </summary>
        MaxInputFrequency = 1250006,

        /// <summary>
        /// System.Double
        /// </summary>
        InputImpedance = 1250103,

        /// <summary>
        /// System.Int32
        /// </summary>
        ChannelTerminalConfiguration = 1150107,

        /// <summary>
        /// System.Boolean
        /// </summary>
        BandpassFilterEnabled = 1150318,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DitherEnabled = 1150319,

        /// <summary>
        /// System.Int32
        /// </summary>
        FlexFirAntialiasFilterType = 1150271,

        /// <summary>
        /// System.Double
        /// </summary>
        DigitalGain = 1150307,

        /// <summary>
        /// System.Double
        /// </summary>
        DigitalOffset = 1150308,

        /// <summary>
        /// System.Double
        /// </summary>
        AcquisitionStartTime = 1250109,

        /// <summary>
        /// System.Int32
        /// </summary>
        HorzNumRecords = 1150001,

        /// <summary>
        /// System.Double
        /// </summary>
        HorzTimePerRecord = 1250007,

        /// <summary>
        /// System.Int32
        /// </summary>
        HorzMinNumPts = 1250009,

        /// <summary>
        /// System.Int32
        /// </summary>
        HorzRecordLength = 1250008,

        /// <summary>
        /// System.Double
        /// </summary>
        HorzRecordRefPosition = 1250011,

        /// <summary>
        /// System.Double
        /// </summary>
        MinSampleRate = 1150009,

        /// <summary>
        /// System.Double
        /// </summary>
        HorzSampleRate = 1250010,

        /// <summary>
        /// System.Boolean
        /// </summary>
        HorzEnforceRealtime = 1150004,

        /// <summary>
        /// System.Boolean
        /// </summary>
        RefTrigTdcEnable = 1150096,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AllowMoreRecordsThanMemory = 1150068,

        /// <summary>
        /// System.Boolean
        /// </summary>
        EnableTimeInterleavedSampling = 1150128,

        /// <summary>
        /// System.Int32
        /// </summary>
        PollInterval = 1150100,

        /// <summary>
        /// System.Int32
        /// </summary>
        RisNumAverages = 1150070,

        /// <summary>
        /// System.Int32
        /// </summary>
        RisMethod = 1150071,

        /// <summary>
        /// System.Boolean
        /// </summary>
        _5102AdjustPretriggerSamples = 1150085,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerType = 1250012,

        /// <summary>
        /// System.String
        /// </summary>
        TriggerSource = 1250013,

        /// <summary>
        /// System.String
        /// </summary>
        ExportedRefTriggerOutputTerminal = 1150098,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerDelayTime = 1250015,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerHoldoff = 1250016,

        /// <summary>
        /// System.Double
        /// </summary>
        StartToRefTriggerHoldoff = 1150103,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerImpedance = 1150075,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerLevel = 1250017,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerHysteresis = 1150006,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerCoupling = 1250014,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerSlope = 1250018,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerModifier = 1250102,

        /// <summary>
        /// System.Boolean
        /// </summary>
        TriggerAutoTriggered = 1150278,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerWindowLowLevel = 1150013,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerWindowHighLevel = 1150014,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerWindowMode = 1150012,

        /// <summary>
        /// System.Int32
        /// </summary>
        TvTriggerSignalFormat = 1250201,

        /// <summary>
        /// System.Int32
        /// </summary>
        TvTriggerLineNumber = 1250206,

        /// <summary>
        /// System.Int32
        /// </summary>
        TvTriggerPolarity = 1250204,

        /// <summary>
        /// System.Int32
        /// </summary>
        TvTriggerEvent = 1250205,

        /// <summary>
        /// System.Boolean
        /// </summary>
        EnableDcRestore = 1150093,

        /// <summary>
        /// System.Int32
        /// </summary>
        RefTriggerDetectorLocation = 1150314,

        /// <summary>
        /// System.Double
        /// </summary>
        RefTriggerMinimumQuietTime = 1150315,

        /// <summary>
        /// System.Double
        /// </summary>
        DeviceTemperature = 1150086,

        /// <summary>
        /// System.String
        /// </summary>
        SerialNumber = 1150104,

        /// <summary>
        /// System.String
        /// </summary>
        InputClockSource = 1150002,

        /// <summary>
        /// System.String
        /// </summary>
        OutputClockSource = 1150003,

        /// <summary>
        /// System.String
        /// </summary>
        ClockSyncPulseSource = 1150007,

        /// <summary>
        /// System.String
        /// </summary>
        SampClkTimebaseSrc = 1150087,

        /// <summary>
        /// System.Double
        /// </summary>
        SampClkTimebaseRate = 1150088,

        /// <summary>
        /// System.Int32
        /// </summary>
        SampClkTimebaseDiv = 1150089,

        /// <summary>
        /// System.Double
        /// </summary>
        RefClkRate = 1150090,

        /// <summary>
        /// System.String
        /// </summary>
        ExportedSampleClockOutputTerminal = 1150091,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PllLockStatus = 1151303,

        /// <summary>
        /// System.Int32
        /// </summary>
        OscillatorPhaseDacValue = 1150105,

        /// <summary>
        /// System.Boolean
        /// </summary>
        MasterEnable = 1150008,

        /// <summary>
        /// System.String
        /// </summary>
        AcqArmSource = 1150053,

        /// <summary>
        /// System.String
        /// </summary>
        ExportedStartTriggerOutputTerminal = 1150097,

        /// <summary>
        /// System.String
        /// </summary>
        RecordArmSource = 1150065,

        /// <summary>
        /// System.String
        /// </summary>
        AdvTrigSrc = 1150094,

        /// <summary>
        /// System.String
        /// </summary>
        ExportedAdvanceTriggerOutputTerminal = 1150109,

        /// <summary>
        /// System.String
        /// </summary>
        ReadyForRefEventOutputTerminal = 1150111,

        /// <summary>
        /// System.String
        /// </summary>
        ReadyForStartEventOutputTerminal = 1150110,

        /// <summary>
        /// System.String
        /// </summary>
        ReadyForAdvanceEventOutputTerminal = 1150112,

        /// <summary>
        /// System.String
        /// </summary>
        EndOfRecordEventOutputTerminal = 1150099,

        /// <summary>
        /// System.String
        /// </summary>
        EndOfAcquisitionEventOutputTerminal = 1150101,

        /// <summary>
        /// System.String
        /// </summary>
        _5vOutOutputTerminal = 1150129,

        /// <summary>
        /// System.String
        /// </summary>
        ArmRefTrigSrc = 1150095,

        /// <summary>
        /// System.Double
        /// </summary>
        SlaveTriggerDelay = 1150046,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerToStarDelay = 1150047,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerToRtsiDelay = 1150048,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerToPfiDelay = 1150049,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerFromStarDelay = 1150050,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerFromRtsiDelay = 1150051,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerFromPfiDelay = 1150052,

        /// <summary>
        /// System.String
        /// </summary>
        MeasOtherChannel = 1150018,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasHysteresisPercent = 1150019,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasLastAcqHistogramSize = 1150020,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasArrayGain = 1150043,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasArrayOffset = 1150044,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasChanLowRefLevel = 1150038,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasChanMidRefLevel = 1150039,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasChanHighRefLevel = 1150040,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasRefLevelUnits = 1150016,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasPercentageMethod = 1150045,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasPolynomialInterpolationOrder = 1150029,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasInterpolationSamplingFactor = 1150030,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasVoltageHistogramSize = 1150021,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasVoltageHistogramLowVolts = 1150022,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasVoltageHistogramHighVolts = 1150023,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasTimeHistogramSize = 1150024,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasTimeHistogramLowVolts = 1150025,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasTimeHistogramHighVolts = 1150026,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasTimeHistogramLowTime = 1150027,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasTimeHistogramHighTime = 1150028,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasFilterCutoffFreq = 1150031,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasFilterCenterFreq = 1150032,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasFilterWidth = 1150041,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasFilterRipple = 1150033,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasFilterTransientWaveformPercent = 1150034,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasFilterType = 1150035,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasFilterOrder = 1150036,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasFilterTaps = 1150037,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasFirFilterWindow = 1150042,

        /// <summary>
        /// System.Double
        /// </summary>
        DelayBeforeInitiate = 1151304,

        /// <summary>
        /// System.Boolean
        /// </summary>
        FetchInterleavedData = 1150072,

        /// <summary>
        /// System.Boolean
        /// </summary>
        EnableDither = 1151300,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdcEnable = 1151003,

        /// <summary>
        /// System.Double
        /// </summary>
        DdcNcoFrequency = 1151000,

        /// <summary>
        /// System.Double
        /// </summary>
        DdcNcoPhase = 1151001,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdcTestSineCosine = 1151072,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcCoordinateConverterInput = 1151073,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcQInputToCoordConverterInput = 1151074,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcSyncoutClkSelect = 1151080,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdcTimingNcoPhaseAccumLoad = 1151120,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdcTimingNcoClearPhaseAccum = 1151121,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdcTimingNcoEnableOffsetFreq = 1151122,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcTimingNcoNumOffsetFreqBits = 1151123,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcTimingNcoCenterFrequency = 1151124,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcTimingNcoPhaseOffset = 1151125,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcResamplerFilterModeSelect = 1151126,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdcResamplerBypass = 1151127,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcResamplerOutputPulseDelay = 1151128,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcNcoDivide = 1151129,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcReferenceDivide = 1151130,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcCicDecimation = 1151010,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcCicShiftGain = 1151011,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdcDiscriminatorEnabled = 1151020,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcDiscriminatorFirDecimation = 1151021,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcDiscriminatorFirSymmetry = 1151022,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcDiscriminatorFirSymmetryType = 1151023,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcDiscriminatorFirNumTaps = 1151024,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcDiscriminatorDelay = 1151025,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcDiscriminatorFirInputSource = 1151026,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcDiscriminatorPhaseMultiplier = 1151027,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcPfirDecimation = 1151030,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcPfirSymmetry = 1151031,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcPfirSymmetryType = 1151032,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcPfirNumTaps = 1151033,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcPfirRealOrComplex = 1151034,

        /// <summary>
        /// System.Double
        /// </summary>
        DdcAgcUpperGainLimit = 1151040,

        /// <summary>
        /// System.Double
        /// </summary>
        DdcAgcLowerGainLimit = 1151041,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcAgcLoopGain0Exponent = 1151042,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcAgcLoopGain0Mantissa = 1151043,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcAgcLoopGain1Exponent = 1151044,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcAgcLoopGain1Mantissa = 1151045,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcAgcThreshold = 1151046,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcAgcAverageControl = 1151047,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdcHalfbandBypassed = 1151050,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdcHalfband1Enabled = 1151051,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdcHalfband2Enabled = 1151052,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdcHalfband3Enabled = 1151053,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdcHalfband4Enabled = 1151054,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdcHalfband5Enabled = 1151055,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcAoutParallelOutputSource = 1151070,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcBoutParallelOutputSource = 1151071,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcCombinedDecimation = 1151301,

        /// <summary>
        /// System.Double
        /// </summary>
        SerialDacCalVoltage = 1151302,

        /// <summary>
        /// System.Double
        /// </summary>
        MaxRisRate = 1150074,

        /// <summary>
        /// System.Double
        /// </summary>
        MaxRealTimeSamplingRate = 1150073,

        /// <summary>
        /// System.Int32
        /// </summary>
        OnboardMemorySize = 1150069,

        /// <summary>
        /// System.Boolean
        /// </summary>
        RangeCheck = 1050002,

        /// <summary>
        /// System.Boolean
        /// </summary>
        QueryInstrumentStatus = 1050003,

        /// <summary>
        /// System.Boolean
        /// </summary>
        Cache = 1050004,

        /// <summary>
        /// System.Boolean
        /// </summary>
        Simulate = 1050005,

        /// <summary>
        /// System.Boolean
        /// </summary>
        RecordCoercions = 1050006,

        /// <summary>
        /// System.Boolean
        /// </summary>
        InterchangeCheck = 1050021,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverDescription = 1050514,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverPrefix = 1050302,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverVendor = 1050513,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverRevision = 1050551,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverClassSpecMajorVersion = 1050515,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverClassSpecMinorVersion = 1050516,

        /// <summary>
        /// System.Int32
        /// </summary>
        ChannelCount = 1050203,

        /// <summary>
        /// System.String
        /// </summary>
        SupportedInstrumentModels = 1050327,

        /// <summary>
        /// System.String
        /// </summary>
        GroupCapabilities = 1050401,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentManufacturer = 1050511,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentModel = 1050512,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentFirmwareRevision = 1050510,

        /// <summary>
        /// System.String
        /// </summary>
        IoResourceDescriptor = 1050304,

        /// <summary>
        /// System.String
        /// </summary>
        LogicalName = 1050305,

        /// <summary>
        /// System.String
        /// </summary>
        DriverSetup = 1050007,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdcEnabled = 1150300,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdcDataProcessingMode = 1150304,

        /// <summary>
        /// System.Boolean
        /// </summary>
        FetchInterleavedIqData = 1150311,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdcFrequencyTranslationEnabled = 1150302,

        /// <summary>
        /// System.String
        /// </summary>
        DdcQSource = 1150310,

        /// <summary>
        /// System.Double
        /// </summary>
        DdcCenterFrequency = 1150303,

        /// <summary>
        /// System.Double
        /// </summary>
        DdcFrequencyTranslationPhaseI = 1150305,

        /// <summary>
        /// System.Double
        /// </summary>
        DdcFrequencyTranslationPhaseQ = 1150306,

        /// <summary>
        /// System.Int32
        /// </summary>
        EqualizationNumCoefficients = 1150312,

        /// <summary>
        /// System.Boolean
        /// </summary>
        EqualizationFilterEnabled = 1150313,

        /// <summary>
        /// System.Boolean
        /// </summary>
        FractionalResampleEnabled = 1150320,

        /// <summary>
        /// System.Int32
        /// </summary>
        OverflowErrorReporting = 1150309,

        /// <summary>
        /// System.Boolean
        /// </summary>
        P2pEnabled = 1150338,

        /// <summary>
        /// System.String
        /// </summary>
        P2pChannelsToStream = 1150339,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pEndpointSize = 1150342,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pSamplesAvailInEndpoint = 1150328,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pMostSamplesAvailInEndpoint = 1150341,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pSamplesTransferred = 1150340,

        /// <summary>
        /// System.Boolean
        /// </summary>
        P2pEndpointOverflow = 1150344,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pFifoEndpointCount = 1150345,

        /// <summary>
        /// System.Boolean
        /// </summary>
        P2pOnboardMemoryEnabled = 1150354,

        /// <summary>
        /// System.Boolean
        /// </summary>
        P2pAdvancedAttributesEnabled = 1150343,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pDataTransPermissionAddr = 1150329,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pDataTransPermissionAddrType = 1150330,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pDestinationWindowAddr = 1150331,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pDestinationWindowAddrType = 1150332,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pDestinationWindowSize = 1150333,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pNotifyPushMessageOn = 1150334,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pNotifyMessagePushAddr = 1150335,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pNotifyMessagePushAddrType = 1150336,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pNotifyMessagePushValue = 1150337,
    }
}
