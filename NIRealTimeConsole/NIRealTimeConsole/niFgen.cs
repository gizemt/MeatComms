// TODO: Function Panel type with id: 1017 and name: "nicomplexnumber[]" could not be resolved; Aliasing nicomplexnumber to System.Int32 to use nicomplexnumber array appropriately in functions and P/Invoke calls.
// TODO: "SendSoftwareEdgeTrigger" appears more than once in the function panel; Duplicate appearances will be ignored.
// TODO: "WriteBinary16AnalogStaticValue" appears more than once in the function panel; Duplicate appearances will be ignored.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Measurement Studio for niFgen 17.100.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NIRealTimeConsole
{
    using System;
    using System.Runtime.InteropServices;
    using nicomplexnumber = System.Int32;


    public class niFgen : object, System.IDisposable
    {

        private System.Runtime.InteropServices.HandleRef _handle;

        private bool _disposed = true;

        ~niFgen() { Dispose(false); }


        /// <summary>
        /// This function creates an IVI instrument driver session, typically using the C session instrument handle.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The instrument handle that is used to create an IVI instrument driver session.
        /// </param>
        public niFgen(System.IntPtr Instrument_Handle)
        {
            this._handle = new System.Runtime.InteropServices.HandleRef(this, Instrument_Handle);
            this._disposed = false;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_init&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_init&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_init&amp;nbsp;(ViRsrc&amp;nbsp;resourceName, ViBoolean&amp;nbsp;idQuery, ViBoolean&amp;nbsp;resetDevice, ViSession* vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Performs the following initialization actions:&lt;/p&gt;
        /// 
        /// &lt;ul&gt;&lt;li&gt;Creates a new IVI instrument driver session.&lt;/li&gt;
        /// 
        /// &lt;li&gt;Opens a session to the specified device using the interface and address that you specify for the &lt;strong&gt;resourceName&lt;/strong&gt; parameter.&lt;/li&gt;
        /// 
        /// &lt;li&gt;If the &lt;strong&gt;IDQuery&lt;/strong&gt; parameter is set to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, this function queries the device ID and checks that the ID is valid for NI-FGEN.&lt;/li&gt;
        /// 
        /// &lt;li&gt;If the &lt;strong&gt;resetDevice&lt;/strong&gt; parameter is set to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, this function resets the device to a known state.&lt;/li&gt;
        /// 
        /// &lt;li&gt;Sends initialization commands to set the device to the state necessary for the operation of NI-FGEN.&lt;/li&gt;
        /// 
        /// &lt;li&gt;Returns a session handle that you can use to identify the device in all subsequent NI-FGEN function calls.&lt;/li&gt;&lt;/ul&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// </summary>
        /// <param name="Resource_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;niFgen_init&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;resourceName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViRsrc&lt;/td&gt;
        /// &lt;td&gt;Specifies the resource name of the device to initialize.
        /// &lt;br&gt;&lt;br&gt;
        ///         &lt;table class="Bordered"&gt;
        ///                         &lt;tr&gt;
        ///                 &lt;th class="Bordered"&gt;Example&amp;nbsp;#&lt;/th&gt;
        ///                 &lt;th class="Bordered"&gt;Device Type&lt;/th&gt;
        ///                 &lt;th class="Bordered"&gt;Syntax&lt;/th&gt;
        ///                 &lt;th class="Bordered"&gt;Variable&lt;/th&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;1&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;Traditional NI-DAQ device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;DAQ::&lt;em&gt;1&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td&gt;(&lt;em&gt;1&lt;/em&gt; = device number)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;2&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;NI-DAQmx device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;em&gt;myDAQmxDevice&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;myDAQmxDevice&lt;/em&gt; = device name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;3&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;NI-DAQmx device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;DAQ::&lt;em&gt;myDAQmxDevice&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;myDAQmxDevice&lt;/em&gt; = device name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;4&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;NI-DAQmx device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;DAQ::&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;2&lt;/em&gt; = device name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;5&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;IVI logical name or IVI virtual name&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;em&gt;myLogicalName&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;myLogicalName&lt;/em&gt; = name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///         &lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;For Traditional NI-DAQ devices, the syntax is DAQ::&lt;em&gt;n&lt;/em&gt;, where &lt;em&gt;n&lt;/em&gt; is the device number assigned by MAX, as shown in Example 1.&lt;/p&gt; 
        /// 
        /// &lt;p class="Body"&gt;For NI-DAQmx devices, the syntax is just the device name specified in MAX, as shown in Example 2. Typical default names for NI-DAQmx devices in MAX are &lt;span class="Monospace"&gt;Dev1&lt;/span&gt; or &lt;span class="Monospace"&gt;PXI1Slot1&lt;/span&gt;. You can rename an NI-DAQmx device by right-clicking on the name in MAX and entering a new name.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;An alternate syntax for NI-DAQmx devices consists of DAQ::&lt;em&gt;NI-DAQmx device name&lt;/em&gt;, as shown in Example 3. This naming convention allows for the use of an NI-DAQmx device in an application that was originally designed for a Traditional NI-DAQ device. For example, if the application expects &lt;span class="Monospace"&gt;DAQ::1&lt;/span&gt;, you can rename the NI-DAQmx device to &lt;span class="Monospace"&gt;1&lt;/span&gt; in MAX and pass in &lt;span class="Monospace"&gt;DAQ::1&lt;/span&gt; for the resource name, as shown in Example 4. &lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If you use the DAQ::&lt;em&gt;n&lt;/em&gt; syntax and an NI-DAQmx device name already exists with that same name, the NI-DAQmx device is matched first.&lt;/p&gt; 
        /// 
        /// &lt;p class="Body"&gt;You can also pass in the name of an IVI logical name or an IVI virtual name configured with the IVI Configuration utility, as shown in Example 5. A logical name identifies a particular virtual instrument. A virtual name identifies a specific device and specifies the initial settings for the session. 
        /// 
        /// &lt;table class=borderless&gt;&lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="caution.gif"&gt;&lt;/td&gt;
        /// &lt;td colspan=2&gt;&lt;span id="Dark-Red"&gt;&lt;strong&gt;Caution&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Traditional NI-DAQ and NI-DAQmx device names are not case-sensitive. However, all IVI names, such as logical names, are case-sensitive. If you use logical names, driver session names, or virtual names in your program, you must ensure that the name you use matches the name in the IVI Configuration Store file exactly, without any variations in the case of the characters.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="ID_Query">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;idQuery&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;idQuery&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViBoolean&lt;/td&gt;
        /// &lt;td&gt;Specifies whether you want NI-FGEN to perform an ID query.
        ///             
        ///             &lt;p class="Body"&gt;When you set this parameter to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, NI-FGEN verifies that the device that you initialize is supported.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;Circumstances can arise where sending an ID query to the device is undesirable. When you set this parameter to &lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;, the function initializes the device without performing an ID query.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Perform ID query&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Skip ID query&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Reset_Device">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;niFgen_init&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;resetDevice&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViBoolean&lt;/td&gt;
        /// &lt;td&gt;Specifies whether you want to reset the device during the initialization procedure. &lt;span class="Monospace"&gt;VI_TRUE&lt;/span&gt; specifies that the device is reset and performs the same function as the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_Reset.html')"&gt;&lt;span class="Monospace"&gt;niFgen_reset&lt;/span&gt;&lt;/a&gt; function.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="bordered"&gt; &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Reset device&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Do not reset device&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;niFgen_init&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession*&lt;/td&gt;
        /// &lt;td&gt;Returns a session handle that you can use to identify the device in all subsequent NI-FGEN function calls.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        public niFgen(string Resource_Name, bool ID_Query, bool Reset_Device)
        {
            System.IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.init(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), out instrumentHandle);
            this._handle = new System.Runtime.InteropServices.HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_InitWithOptions&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_InitWithOptions&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_InitWithOptions&amp;nbsp;(ViRsrc&amp;nbsp;resourceName, ViBoolean&amp;nbsp;idQuery, ViBoolean&amp;nbsp;resetDevice, ViString&amp;nbsp;optionString, ViSession&amp;nbsp;*vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Performs the following initialization actions:&lt;/p&gt;
        /// 
        /// &lt;ul&gt;&lt;li&gt;Creates a new IVI instrument session and optionally sets the initial state of the following session attributes: &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_RANGE_CHECK.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_RANGE_CHECK&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_QUERY_INSTRUMENT_STATUS.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_QUERY_INSTRUMENT_STATUS&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_CACHE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_CACHE&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_SIMULATE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_SIMULATE&lt;/span&gt;&lt;/a&gt;, and &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_RECORD_COERCIONS.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_RECORD_COERCIONS&lt;/span&gt;&lt;/a&gt;.&lt;/li&gt;
        /// &lt;li&gt;Opens a session to the specified device using the interface and address that you specify for &lt;strong&gt;resourceName&lt;/strong&gt;.&lt;/li&gt;
        /// &lt;li&gt;If &lt;strong&gt;IDQuery&lt;/strong&gt; is set to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, this function queries the device ID and checks that it is valid for NI-FGEN.&lt;/li&gt;
        /// &lt;li&gt;If &lt;strong&gt;resetDevice&lt;/strong&gt; is set to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, this function resets the device to a known state.&lt;/li&gt;
        /// &lt;li&gt;Sends initialization commands to set the instrument to the state necessary for NI-FGEN operation.&lt;/li&gt;
        /// &lt;li&gt;Returns a session handle that you can use to identify the device in all subsequent NI-FGEN function calls.&lt;/li&gt;&lt;/ul&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// </summary>
        /// <param name="Resource_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;niFgen_init&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;resourceName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViRsrc&lt;/td&gt;
        /// &lt;td&gt;Specifies the resource name of the device to initialize.
        /// &lt;br&gt;&lt;br&gt;
        ///         &lt;table class="Bordered"&gt;
        ///                         &lt;tr&gt;
        ///                 &lt;th class="Bordered"&gt;Example&amp;nbsp;#&lt;/th&gt;
        ///                 &lt;th class="Bordered"&gt;Device Type&lt;/th&gt;
        ///                 &lt;th class="Bordered"&gt;Syntax&lt;/th&gt;
        ///                 &lt;th class="Bordered"&gt;Variable&lt;/th&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;1&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;Traditional NI-DAQ device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;DAQ::&lt;em&gt;1&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td&gt;(&lt;em&gt;1&lt;/em&gt; = device number)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;2&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;NI-DAQmx device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;em&gt;myDAQmxDevice&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;myDAQmxDevice&lt;/em&gt; = device name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;3&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;NI-DAQmx device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;DAQ::&lt;em&gt;myDAQmxDevice&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;myDAQmxDevice&lt;/em&gt; = device name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;4&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;NI-DAQmx device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;DAQ::&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;2&lt;/em&gt; = device name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;5&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;IVI logical name or IVI virtual name&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;em&gt;myLogicalName&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;myLogicalName&lt;/em&gt; = name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///         &lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;For Traditional NI-DAQ devices, the syntax is DAQ::&lt;em&gt;n&lt;/em&gt;, where &lt;em&gt;n&lt;/em&gt; is the device number assigned by MAX, as shown in Example 1.&lt;/p&gt; 
        /// 
        /// &lt;p class="Body"&gt;For NI-DAQmx devices, the syntax is just the device name specified in MAX, as shown in Example 2. Typical default names for NI-DAQmx devices in MAX are &lt;span class="Monospace"&gt;Dev1&lt;/span&gt; or &lt;span class="Monospace"&gt;PXI1Slot1&lt;/span&gt;. You can rename an NI-DAQmx device by right-clicking on the name in MAX and entering a new name.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;An alternate syntax for NI-DAQmx devices consists of DAQ::&lt;em&gt;NI-DAQmx device name&lt;/em&gt;, as shown in Example 3. This naming convention allows for the use of an NI-DAQmx device in an application that was originally designed for a Traditional NI-DAQ device. For example, if the application expects &lt;span class="Monospace"&gt;DAQ::1&lt;/span&gt;, you can rename the NI-DAQmx device to &lt;span class="Monospace"&gt;1&lt;/span&gt; in MAX and pass in &lt;span class="Monospace"&gt;DAQ::1&lt;/span&gt; for the resource name, as shown in Example 4. &lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If you use the DAQ::&lt;em&gt;n&lt;/em&gt; syntax and an NI-DAQmx device name already exists with that same name, the NI-DAQmx device is matched first.&lt;/p&gt; 
        /// 
        /// &lt;p class="Body"&gt;You can also pass in the name of an IVI logical name or an IVI virtual name configured with the IVI Configuration utility, as shown in Example 5. A logical name identifies a particular virtual instrument. A virtual name identifies a specific device and specifies the initial settings for the session. 
        /// 
        /// &lt;table class=borderless&gt;&lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="caution.gif"&gt;&lt;/td&gt;
        /// &lt;td colspan=2&gt;&lt;span id="Dark-Red"&gt;&lt;strong&gt;Caution&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Traditional NI-DAQ and NI-DAQmx device names are not case-sensitive. However, all IVI names, such as logical names, are case-sensitive. If you use logical names, driver session names, or virtual names in your program, you must ensure that the name you use matches the name in the IVI Configuration Store file exactly, without any variations in the case of the characters.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="ID_Query">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;idQuery&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;idQuery&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViBoolean&lt;/td&gt;
        /// &lt;td&gt;Specifies whether you want NI-FGEN to perform an ID query.
        ///             
        ///             &lt;p class="Body"&gt;When you set this parameter to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, NI-FGEN verifies that the device that you initialize is a type that it supports.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;Circumstances can arise where sending an ID query to the device is undesirable. When you set this parameter to &lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;, the function initializes the device without performing an ID query.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Perform ID query&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Skip ID query&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Reset_Device">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;niFgen_init&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;resetDevice&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViBoolean&lt;/td&gt;
        /// &lt;td&gt;Specifies whether you want to reset the device during the initialization procedure. &lt;span class="Monospace"&gt;VI_TRUE&lt;/span&gt; specifies that the device is reset and performs the same function as the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_Reset.html')"&gt;&lt;span class="Monospace"&gt;niFgen_reset&lt;/span&gt;&lt;/a&gt; function.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="bordered"&gt; &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Reset device&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Do not reset device&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Option_String">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;niFgen_InitWithOptions&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;optionString&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViString&lt;/td&gt;
        /// &lt;td&gt;
        ///            Sets the initial value of certain session attributes.
        /// 
        /// &lt;p class="Body"&gt;The syntax for &lt;strong&gt;optionString&lt;/strong&gt; is&lt;/p&gt;
        /// 
        ///             &lt;p class="Indent1"&gt;&amp;lt;&lt;em&gt;attributeName&lt;/em&gt;&amp;gt;&amp;nbsp;=&amp;nbsp;&amp;lt;&lt;em&gt;value&lt;/em&gt;&amp;gt;&lt;/p&gt;
        ///             
        ///             &lt;p class="Body"&gt;where&lt;/p&gt;
        ///             
        ///             &lt;p class="Indent1"&gt;&lt;em&gt;attributeName&lt;/em&gt; is the name of the attribute and &lt;em&gt;value&lt;/em&gt; is the value to which the attribute is set&lt;/p&gt;
        /// 
        ///             &lt;p class="Body"&gt;To set multiple attributes, separate them with a comma.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If you pass NULL or an empty string for this parameter, the session uses the default values for these attributes. You can override the default values by assigning a value explicitly in a string that you pass for this parameter.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;You do not have to specify all of the attributes and may leave any of them out. However, if you do not specify one of the attributes, its default value is used.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If simulation is enabled (Simulate=1), you may specify the device that you want to simulate. To specify a device, enter the following syntax in &lt;strong&gt;optionString&lt;/strong&gt;.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;span class="Monospace"&gt;DriverSetup=Model:&amp;lt;&lt;em&gt;driver model number&lt;/em&gt;&amp;gt;;Channels:&amp;lt;&lt;em&gt;channel names&lt;/em&gt;&amp;gt;;BoardType:&amp;lt;&lt;em&gt;module type&lt;/em&gt;&amp;gt;;MemorySize:&amp;lt;&lt;em&gt;size of onboard memory in bytes&lt;/em&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;
        /// 
        ///             
        /// &lt;p class="Body"&gt;&lt;strong&gt;Syntax Examples&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="Bordered"&gt;
        ///     &lt;tr&gt;&lt;th class="Bordered"&gt;Device&lt;/th&gt;
        ///     &lt;th class="Bordered"&gt;optionString Syntax&lt;/th&gt;&lt;/tr&gt;
        ///     &lt;tr&gt;&lt;td class="Bordered"&gt;NI PXI-5404&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="Monospace"&gt;DriverSetup=Model:5404;BoardType:PXI&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
        ///     &lt;tr&gt;&lt;td class="Bordered"&gt;NI PCI-5411&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="Monospace"&gt;DriverSetup=Model:5411;BoardType:PCI;MemorySize:8000000&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;NI PXIe-5450&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="Monospace"&gt;DriverSetup=Model:5450;Channels:0-1;BoardType:PXIe;MemorySize:8000000&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Attributes and &lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        ///       
        /// &lt;table class="Bordered"&gt;
        ///     &lt;tr&gt;&lt;th class="Bordered"&gt;Attribute Name&lt;/th&gt;
        ///     &lt;th class="Bordered"&gt;Attribute&lt;/th&gt;
        ///     &lt;th class="Bordered"&gt;Values&lt;/th&gt;&lt;/tr&gt;
        ///     
        ///     &lt;tr&gt;&lt;td class="Bordered"&gt;RangeCheck&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_RANGE_CHECK&lt;/span&gt;&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, &lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
        ///     
        ///     &lt;tr&gt;&lt;td class="Bordered"&gt;QueryInstrStatus&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_QUERY_INSTRUMENT_STATUS&lt;/span&gt;&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, &lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
        ///     
        ///     &lt;tr&gt;&lt;td class="Bordered"&gt;Cache&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_CACHE&lt;/span&gt;&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, &lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
        ///     
        ///     &lt;tr&gt;&lt;td class="Bordered"&gt;Simulate&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_SIMULATE&lt;/span&gt;&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, &lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Values&lt;/strong&gt;: &amp;quot;Simulate=0,RangeCheck=1,QueryInstrStatus=1,Cache=1&amp;quot;&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </param>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;niFgen_init&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Returns a session handle that you can use to identify the device in all subsequent NI-FGEN function calls.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        public niFgen(string Resource_Name, bool ID_Query, bool Reset_Device, string Option_String)
        {
            System.IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.InitWithOptions(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), Option_String, out instrumentHandle);
            this._handle = new System.Runtime.InteropServices.HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_InitializeWithChannels&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_InitializeWithChannels&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_InitializeWithChannels&amp;nbsp;(ViRsrc&amp;nbsp;resourceName, ViString&amp;nbsp;optionString, ViConstString&amp;nbsp;channelName, ViBoolean&amp;nbsp;resetDevice, ViSession&amp;nbsp;*vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Creates and returns a new NI-FGEN session to the specified channel of a waveform generator that is used in all subsequent NI-FGEN function calls. 
        /// &lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// </summary>
        /// <param name="Resource_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;niFgen_init&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;resourceName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViRsrc&lt;/td&gt;
        /// &lt;td&gt;Specifies the resource name of the device to initialize.
        /// &lt;br&gt;&lt;br&gt;
        ///         &lt;table class="Bordered"&gt;
        ///                         &lt;tr&gt;
        ///                 &lt;th class="Bordered"&gt;Example&amp;nbsp;#&lt;/th&gt;
        ///                 &lt;th class="Bordered"&gt;Device Type&lt;/th&gt;
        ///                 &lt;th class="Bordered"&gt;Syntax&lt;/th&gt;
        ///                 &lt;th class="Bordered"&gt;Variable&lt;/th&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;1&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;Traditional NI-DAQ device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;DAQ::&lt;em&gt;1&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td&gt;(&lt;em&gt;1&lt;/em&gt; = device number)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;2&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;NI-DAQmx device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;em&gt;myDAQmxDevice&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;myDAQmxDevice&lt;/em&gt; = device name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;3&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;NI-DAQmx device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;DAQ::&lt;em&gt;myDAQmxDevice&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;myDAQmxDevice&lt;/em&gt; = device name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;4&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;NI-DAQmx device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;DAQ::&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;2&lt;/em&gt; = device name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;5&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;IVI logical name or IVI virtual name&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;em&gt;myLogicalName&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;myLogicalName&lt;/em&gt; = name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///         &lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;For Traditional NI-DAQ devices, the syntax is DAQ::&lt;em&gt;n&lt;/em&gt;, where &lt;em&gt;n&lt;/em&gt; is the device number assigned by MAX, as shown in Example 1.&lt;/p&gt; 
        /// 
        /// &lt;p class="Body"&gt;For NI-DAQmx devices, the syntax is just the device name specified in MAX, as shown in Example 2. Typical default names for NI-DAQmx devices in MAX are &lt;span class="Monospace"&gt;Dev1&lt;/span&gt; or &lt;span class="Monospace"&gt;PXI1Slot1&lt;/span&gt;. You can rename an NI-DAQmx device by right-clicking on the name in MAX and entering a new name.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;An alternate syntax for NI-DAQmx devices consists of DAQ::&lt;em&gt;NI-DAQmx device name&lt;/em&gt;, as shown in Example 3. This naming convention allows for the use of an NI-DAQmx device in an application that was originally designed for a Traditional NI-DAQ device. For example, if the application expects &lt;span class="Monospace"&gt;DAQ::1&lt;/span&gt;, you can rename the NI-DAQmx device to &lt;span class="Monospace"&gt;1&lt;/span&gt; in MAX and pass in &lt;span class="Monospace"&gt;DAQ::1&lt;/span&gt; for the resource name, as shown in Example 4. &lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If you use the DAQ::&lt;em&gt;n&lt;/em&gt; syntax and an NI-DAQmx device name already exists with that same name, the NI-DAQmx device is matched first.&lt;/p&gt; 
        /// 
        /// &lt;p class="Body"&gt;You can also pass in the name of an IVI logical name or an IVI virtual name configured with the IVI Configuration utility, as shown in Example 5. A logical name identifies a particular virtual instrument. A virtual name identifies a specific device and specifies the initial settings for the session. 
        /// 
        /// &lt;table class=borderless&gt;&lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="caution.gif"&gt;&lt;/td&gt;
        /// &lt;td colspan=2&gt;&lt;span id="Dark-Red"&gt;&lt;strong&gt;Caution&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Traditional NI-DAQ and NI-DAQmx device names are not case-sensitive. However, all IVI names, such as logical names, are case-sensitive. If you use logical names, driver session names, or virtual names in your program, you must ensure that the name you use matches the name in the IVI Configuration Store file exactly, without any variations in the case of the characters.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel that this VI uses.  
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Reset_Device">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Reset Device&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;resetDevice&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViBoolean&lt;/td&gt;
        /// &lt;td&gt;Specifies whether you want to reset the device during the initialization procedure. &lt;span class="Monospace"&gt;VI_TRUE&lt;/span&gt; specifies that the device is reset and performs the same function as the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_Reset.html')"&gt;&lt;span class="Monospace"&gt;niFgen_reset&lt;/span&gt;&lt;/a&gt; function.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="bordered"&gt; &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Reset device&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Do not reset device&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Option_String">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;niFgen_InitWithOptions&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;optionString&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViString&lt;/td&gt;
        /// &lt;td&gt;
        ///            Sets the initial value of certain session attributes.
        /// 
        /// &lt;p class="Body"&gt;The syntax for &lt;strong&gt;optionString&lt;/strong&gt; is&lt;/p&gt;
        /// 
        ///             &lt;p class="Indent1"&gt;&amp;lt;&lt;em&gt;attributeName&lt;/em&gt;&amp;gt;&amp;nbsp;=&amp;nbsp;&amp;lt;&lt;em&gt;value&lt;/em&gt;&amp;gt;&lt;/p&gt;
        ///             
        ///             &lt;p class="Body"&gt;where&lt;/p&gt;
        ///             
        ///             &lt;p class="Indent1"&gt;&lt;em&gt;attributeName&lt;/em&gt; is the name of the attribute and &lt;em&gt;value&lt;/em&gt; is the value to which the attribute is set&lt;/p&gt;
        /// 
        ///             &lt;p class="Body"&gt;To set multiple attributes, separate them with a comma.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If you pass NULL or an empty string for this parameter, the session uses the default values for these attributes. You can override the default values by assigning a value explicitly in a string that you pass for this parameter.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;You do not have to specify all of the attributes and may leave any of them out. However, if you do not specify one of the attributes, its default value is used.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If simulation is enabled (Simulate=1), you may specify the device that you want to simulate. To specify a device, enter the following syntax in &lt;strong&gt;optionString&lt;/strong&gt;.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;span class="Monospace"&gt;DriverSetup=Model:&amp;lt;&lt;em&gt;driver model number&lt;/em&gt;&amp;gt;;Channels:&amp;lt;&lt;em&gt;channel names&lt;/em&gt;&amp;gt;;BoardType:&amp;lt;&lt;em&gt;module type&lt;/em&gt;&amp;gt;;MemorySize:&amp;lt;&lt;em&gt;size of onboard memory in bytes&lt;/em&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;
        /// 
        ///             
        /// &lt;p class="Body"&gt;&lt;strong&gt;Syntax Examples&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="Bordered"&gt;
        ///     &lt;tr&gt;&lt;th class="Bordered"&gt;Device&lt;/th&gt;
        ///     &lt;th class="Bordered"&gt;optionString Syntax&lt;/th&gt;&lt;/tr&gt;
        ///     &lt;tr&gt;&lt;td class="Bordered"&gt;NI PXI-5404&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="Monospace"&gt;DriverSetup=Model:5404;BoardType:PXI&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
        ///     &lt;tr&gt;&lt;td class="Bordered"&gt;NI PCI-5411&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="Monospace"&gt;DriverSetup=Model:5411;BoardType:PCI;MemorySize:8000000&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;NI PXIe-5450&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="Monospace"&gt;DriverSetup=Model:5450;Channels:0-1;BoardType:PXIe;MemorySize:8000000&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Attributes and &lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        ///       
        /// &lt;table class="Bordered"&gt;
        ///     &lt;tr&gt;&lt;th class="Bordered"&gt;Attribute Name&lt;/th&gt;
        ///     &lt;th class="Bordered"&gt;Attribute&lt;/th&gt;
        ///     &lt;th class="Bordered"&gt;Values&lt;/th&gt;&lt;/tr&gt;
        ///     
        ///     &lt;tr&gt;&lt;td class="Bordered"&gt;RangeCheck&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_RANGE_CHECK&lt;/span&gt;&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, &lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
        ///     
        ///     &lt;tr&gt;&lt;td class="Bordered"&gt;QueryInstrStatus&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_QUERY_INSTRUMENT_STATUS&lt;/span&gt;&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, &lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
        ///     
        ///     &lt;tr&gt;&lt;td class="Bordered"&gt;Cache&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_CACHE&lt;/span&gt;&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, &lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
        ///     
        ///     &lt;tr&gt;&lt;td class="Bordered"&gt;Simulate&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_SIMULATE&lt;/span&gt;&lt;/td&gt;
        ///     &lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, &lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Values&lt;/strong&gt;: &amp;quot;Simulate=0,RangeCheck=1,QueryInstrStatus=1,Cache=1&amp;quot;&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </param>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;niFgen_init&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Returns a session handle that you can use to identify the device in all subsequent NI-FGEN function calls.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        public niFgen(string Resource_Name, string Channel_Name, bool Reset_Device, string Option_String)
        {
            System.IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.InitializeWithChannels(Resource_Name, Channel_Name, System.Convert.ToUInt16(Reset_Device), Option_String, out instrumentHandle);
            this._handle = new System.Runtime.InteropServices.HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_InitExtCal&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_InitExtCal&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_InitExtCal&amp;nbsp;(ViRsrc&amp;nbsp;resourceName, ViConstString&amp;nbsp;password, ViSession*&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Creates and initializes a special NI-FGEN external calibration session.  The ViSession returned is an NI-FGEN session that can be used to configure the device using normal attributes and functions.  However, flags have been set that allow you to program an external calibration procedure using the special calibration attributes and functions. The NI&amp;nbsp;5401/5404/5411/5431 have different calibration functions. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'nifgen_Related_Documentation.html')"&gt;calibration procedure&lt;/a&gt; for the signal generator for more information. 
        /// &lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="Resource_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;niFgen_init&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;resourceName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViRsrc&lt;/td&gt;
        /// &lt;td&gt;Specifies the resource name of the device to initialize.
        /// &lt;br&gt;&lt;br&gt;
        ///         &lt;table class="Bordered"&gt;
        ///                         &lt;tr&gt;
        ///                 &lt;th class="Bordered"&gt;Example&amp;nbsp;#&lt;/th&gt;
        ///                 &lt;th class="Bordered"&gt;Device Type&lt;/th&gt;
        ///                 &lt;th class="Bordered"&gt;Syntax&lt;/th&gt;
        ///                 &lt;th class="Bordered"&gt;Variable&lt;/th&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;1&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;Traditional NI-DAQ device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;DAQ::&lt;em&gt;1&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td&gt;(&lt;em&gt;1&lt;/em&gt; = device number)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;2&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;NI-DAQmx device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;em&gt;myDAQmxDevice&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;myDAQmxDevice&lt;/em&gt; = device name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;3&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;NI-DAQmx device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;DAQ::&lt;em&gt;myDAQmxDevice&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;myDAQmxDevice&lt;/em&gt; = device name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;4&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;NI-DAQmx device&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;DAQ::&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;2&lt;/em&gt; = device name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///             &lt;tr&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;div align="center"&gt;5&lt;/div&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;IVI logical name or IVI virtual name&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;&lt;em&gt;myLogicalName&lt;/em&gt;&lt;/td&gt;
        ///                 &lt;td class="Bordered"&gt;(&lt;em&gt;myLogicalName&lt;/em&gt; = name)&lt;/td&gt;
        ///             &lt;/tr&gt;
        ///         &lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;For Traditional NI-DAQ devices, the syntax is DAQ::&lt;em&gt;n&lt;/em&gt;, where &lt;em&gt;n&lt;/em&gt; is the device number assigned by MAX, as shown in Example 1.&lt;/p&gt; 
        /// 
        /// &lt;p class="Body"&gt;For NI-DAQmx devices, the syntax is just the device name specified in MAX, as shown in Example 2. Typical default names for NI-DAQmx devices in MAX are &lt;span class="Monospace"&gt;Dev1&lt;/span&gt; or &lt;span class="Monospace"&gt;PXI1Slot1&lt;/span&gt;. You can rename an NI-DAQmx device by right-clicking on the name in MAX and entering a new name.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;An alternate syntax for NI-DAQmx devices consists of DAQ::&lt;em&gt;NI-DAQmx device name&lt;/em&gt;, as shown in Example 3. This naming convention allows for the use of an NI-DAQmx device in an application that was originally designed for a Traditional NI-DAQ device. For example, if the application expects &lt;span class="Monospace"&gt;DAQ::1&lt;/span&gt;, you can rename the NI-DAQmx device to &lt;span class="Monospace"&gt;1&lt;/span&gt; in MAX and pass in &lt;span class="Monospace"&gt;DAQ::1&lt;/span&gt; for the resource name, as shown in Example 4. &lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If you use the DAQ::&lt;em&gt;n&lt;/em&gt; syntax and an NI-DAQmx device name already exists with that same name, the NI-DAQmx device is matched first.&lt;/p&gt; 
        /// 
        /// &lt;p class="Body"&gt;You can also pass in the name of an IVI logical name or an IVI virtual name configured with the IVI Configuration utility, as shown in Example 5. A logical name identifies a particular virtual instrument. A virtual name identifies a specific device and specifies the initial settings for the session. 
        /// 
        /// &lt;table class=borderless&gt;&lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="caution.gif"&gt;&lt;/td&gt;
        /// &lt;td colspan=2&gt;&lt;span id="Dark-Red"&gt;&lt;strong&gt;Caution&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Traditional NI-DAQ and NI-DAQmx device names are not case-sensitive. However, all IVI names, such as logical names, are case-sensitive. If you use logical names, driver session names, or virtual names in your program, you must ensure that the name you use matches the name in the IVI Configuration Store file exactly, without any variations in the case of the characters.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Password">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Password&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;password&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;The calibration password required to open an external calibration session to the device.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;niFgen_init&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Returns a session handle that you can use to identify the device in all subsequent NI-FGEN function calls.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        public niFgen(string Resource_Name, string Password)
        {
            System.IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.InitExtCal(Resource_Name, Password, out instrumentHandle);
            this._handle = new System.Runtime.InteropServices.HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// Gets the instrument handle.
        /// </summary>
        /// <value>
        /// The value is the IntPtr that represents the handle to the instrument.
        /// </value>
        public System.IntPtr Handle
        {
            get
            {
                return this._handle.Handle;
            }
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_Commit&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_Commit&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_Commit&amp;nbsp;(ViSession vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Causes a transition to the Committed state. This function verifies attribute values, reserves the device, and commits the attribute values to the device. If the attribute values are all valid, NI-FGEN sets the device hardware configuration to match the session configuration. This function does not support the NI 5401/5404/5411/5431 signal generators. &lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;In the Committed state, you can load waveforms, scripts, and sequences into memory. If any attributes are changed, NI-FGEN implicitly transitions back to the Idle state, where you can program all session properties before applying them to the device. This function has no effect if the device is already in the Committed or Generating state and returns a successful status value.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;Calling this VI before the niFgen Initiate Generation VI is optional but has the following benefits:&lt;/p&gt;
        /// 
        /// &lt;ul&gt;
        /// &lt;li&gt;Routes are committed, so signals are exported or imported.&lt;/li&gt;
        /// &lt;li&gt;Any Reference Clock and external clock circuits are phase-locked.&lt;/li&gt;
        /// &lt;li&gt;A subsequent &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_InitiateGeneration.html')"&gt;&lt;span class="Monospace"&gt;niFgen_InitiateGeneration&lt;/span&gt;&lt;/a&gt; function can run faster because the device is already configured.&lt;/li&gt;
        /// &lt;/ul&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int Commit()
        {
            int pInvokeResult = PInvoke.Commit(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_reset&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_reset&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_reset&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="body"&gt;
        /// Resets the instrument to a known state. This function aborts the generation, clears all 
        /// routes, and resets session attributes to the default values. This function does not, 
        /// however, commit the session properties or configure the device hardware to its default 
        /// state.
        /// &lt;/p&gt;
        /// &lt;!-- Link to Additional VI/Function Information --&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;For the NI 5401/5404/5411/5431, this function exhibits the 
        /// same behavior as the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ResetDevice.html')"&gt;&lt;span class="Monospace"&gt;niFgen_ResetDevice&lt;/span&gt;&lt;/a&gt; function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int reset()
        {
            int pInvokeResult = PInvoke.reset(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureOperationMode&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureOperationMode&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureOperationMode&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;operationMode);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Determines how the signal generator produces waveforms. NI signal generators support only Continuous operation mode. To control trigger mode, use the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureTriggerMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureTriggerMode&lt;/span&gt;&lt;/a&gt; function.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to configure the operation mode.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Defined Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Operation_Mode">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Operation Mode&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;operationMode&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the operation mode you want the signal generator to use.  NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_OPERATION_MODE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_OPERATION_MODE&lt;/span&gt;&lt;/a&gt; attribute to this value. NI-FGEN supports only one value.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Defined Value&lt;/strong&gt;: &lt;span class="monospace"&gt; NIFGEN_VAL_OPERATE_CONTINUOUS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureOperationMode(string Channel_Name, int Operation_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureOperationMode(this._handle, Channel_Name, Operation_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureOutputMode&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureOutputMode&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureOutputMode&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;outputMode);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the output mode of the signal generator. The output mode determines how the signal generator produces waveforms. For example, you can select to generate a standard waveform, an arbitrary waveform, or a sequence of arbitrary waveforms.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Output_Mode">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Output Mode&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;outputMode&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the output mode that you want the signal generator to use.  The value you specify determines which functions and attributes you can use to configure the waveform the signal generator produces.&lt;br&gt;&lt;br&gt;
        /// 
        /// Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_OUTPUT_MODE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_OUTPUT_MODE&lt;/span&gt;&lt;/a&gt; attribute for more information about setting this parameter. &lt;br&gt;&lt;br&gt;
        /// 
        /// &lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
        ///      
        /// &lt;table class="Bordered"&gt;&lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_FUNC&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;&lt;strong&gt;Standard Function mode&lt;/strong&gt;&amp;#8212;Generates standard function waveforms such as sine, square, triangle, and so on.&lt;/td&gt;&lt;/tr&gt;
        ///      
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_FREQ_LIST&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;&lt;strong&gt;Frequency List mode&lt;/strong&gt;&amp;#8212;Generates a standard function using a list of frequencies you define.&lt;/td&gt;&lt;/tr&gt;
        ///        
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_ARB&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;&lt;strong&gt;Arbitrary waveform mode&lt;/strong&gt;&amp;#8212;Generates waveforms from user-created/provided waveform arrays of numeric data.&lt;/td&gt;&lt;/tr&gt;
        ///        
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SEQ&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;&lt;strong&gt;Arbitrary sequence mode&lt;/strong&gt;&amp;#8212;Generates downloaded waveforms in an order your specify.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SCRIPT&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;&lt;strong&gt;Script mode&lt;/strong&gt;&amp;#8212;Allows you to use scripting to link and loop multiple waveforms in complex combinations.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;/table&gt;
        /// 
        /// &lt;br&gt;&lt;br&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_FUNC&lt;/span&gt;
        /// 
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureOutputMode(int Output_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureOutputMode(this._handle, Output_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureChannels&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureChannels&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureChannels&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channels);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the channels to use with the instrument specified in the &lt;strong&gt;vi&lt;/strong&gt; parameter.  If you call this function, you must call it immediately after initializing your session and before configuring attributes or writing data.&lt;/p&gt;
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channels">
        /// 
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Enabled&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channels&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// 
        /// &lt;td&gt;Specifies the channel on which all subsequent channel-based attributes  in the session are set. Valid values are non-negative integers. For example, &lt;span class="monospace"&gt;0&lt;/span&gt; is the only valid value on devices with one channel, while devices with two channels support values of &lt;span class="monospace"&gt;0&lt;/span&gt; and &lt;span class="monospace"&gt;1&lt;/span&gt;. You can specify more than one channel by inserting  commas between values (for example, &lt;span class="monospace"&gt;0,1&lt;/span&gt;).
        /// 
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureChannels(string Channels)
        {
            int pInvokeResult = PInvoke.ConfigureChannels(this._handle, Channels);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureOutputEnabled&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureOutputEnabled&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureOutputEnabled&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViBoolean&amp;nbsp;enabled);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the signal generator to generate a signal at the channel output connector. &lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to enable the output.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Enabled">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Enabled&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;enabled&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViBoolean&lt;/td&gt;
        /// &lt;td&gt;Specifies whether you want to enable or disable the output. NI-FGEN uses this value to set the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_OUTPUT_ENABLED.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_OUTPUT_ENABLED&lt;/span&gt;&lt;/a&gt; attribute.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="Bordered"&gt;&lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Enable the output.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Disable the output.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureOutputEnabled(string Channel_Name, bool Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureOutputEnabled(this._handle, Channel_Name, System.Convert.ToUInt16(Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureOutputImpedance&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureOutputImpedance&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureOutputImpedance&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViReal64&amp;nbsp;impedance);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the output impedance for the channel you specify.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to set the output impedance.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Impedance">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Impedance&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;impedance&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the impedance value that you want the signal generator to use.  NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_OUTPUT_IMPEDANCE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_OUTPUT_IMPEDANCE&lt;/span&gt;&lt;/a&gt; attribute to this value. 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: &amp;#8486; (ohms)&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;:&lt;/p&gt;
        /// 
        /// &lt;table class="bordered"&gt;&lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_50_OHMS&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Specifies that 50 &amp;#8486; of impedance is used&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_75_OHMS&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Specifies that 75 &amp;#8486; of impedance is used&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;NIFGEN_VAL_50_OHMS&lt;/span&gt;&lt;/p&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureOutputImpedance(string Channel_Name, double Impedance)
        {
            int pInvokeResult = PInvoke.ConfigureOutputImpedance(this._handle, Channel_Name, Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_EnableAnalogFilter&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_EnableAnalogFilter&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_EnableAnalogFilter&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViReal64&amp;nbsp;filterCorrectionFrequency);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the analog filter for the device. This function sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ANALOG_FILTER_ENABLED.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ANALOG_FILTER_ENABLED&lt;/span&gt;&lt;/a&gt; attribute to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;. This setting can be applied in Arbitrary Waveform, Arbitrary Sequence, or Script output modes. You also can use this setting in Standard Function and Frequency List output modes for user-defined waveforms.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to enable the analog filter.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Filter_Correction_Frequency">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;ADD_TITLE&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;filterCorrectionFrequency&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the filter correction frequency of the analog filter. On the NI&amp;nbsp;5411 and NI&amp;nbsp;5431, 
        /// NI-FGEN adjusts signal amplitude to compensate for the filter attenuation at that 
        /// frequency. To disable amplitude correction, set &lt;strong&gt;filterCorrectionFrequency&lt;/strong&gt; to &lt;span class="monospace"&gt;0&lt;/span&gt;. For 
        /// Standard Function output mode, &lt;strong&gt;filterCorrectionFrequency&lt;/strong&gt; typically should  be set to
        /// the same value  as the frequency of the standard waveform. 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: hertz&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: 0&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int EnableAnalogFilter(string Channel_Name, double Filter_Correction_Frequency)
        {
            int pInvokeResult = PInvoke.EnableAnalogFilter(this._handle, Channel_Name, Filter_Correction_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_DisableAnalogFilter&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_DisableAnalogFilter&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_DisableAnalogFilter&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Disables the analog filter. This function sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ANALOG_FILTER_ENABLED.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ANALOG_FILTER_ENABLED&lt;/span&gt;&lt;/a&gt; attribute to &lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;. This setting can be applied in Arbitrary Waveform, Arbitrary Sequence, or Script output modes. You also can use this setting in Standard Function and Frequency List output modes for user-defined waveforms.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to disable the analog filter.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int DisableAnalogFilter(string Channel_Name)
        {
            int pInvokeResult = PInvoke.DisableAnalogFilter(this._handle, Channel_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_EnableDigitalFilter&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_EnableDigitalFilter&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_EnableDigitalFilter&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Enables the digital filter by setting the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_DIGITAL_FILTER_ENABLED.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_DIGITAL_FILTER_ENABLED&lt;/span&gt;&lt;/a&gt; attribute to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;. This setting can be applied in Arbitrary Waveform, Arbitrary Sequence, or Script output modes. You also can use this setting in Standard Function and Frequency List output modes for user-defined waveforms.&lt;/p&gt;
        /// 
        /// 
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to enable the digital filter.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int EnableDigitalFilter(string Channel_Name)
        {
            int pInvokeResult = PInvoke.EnableDigitalFilter(this._handle, Channel_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_DisableDigitalFilter&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_DisableDigitalFilter&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_DisableDigitalFilter&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Disables the digital filter. This function sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_DIGITAL_FILTER_ENABLED.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_DIGITAL_FILTER_ENABLED&lt;/span&gt;&lt;/a&gt; attribute to &lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;. This setting can be applied in Arbitrary Waveform, Arbitrary Sequence, or Script output modes. You also can use this setting in Standard Function and Frequency List output modes for user-defined waveforms.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to disable the digital filter. 
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int DisableDigitalFilter(string Channel_Name)
        {
            int pInvokeResult = PInvoke.DisableDigitalFilter(this._handle, Channel_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_EnableDigitalPatterning&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_EnableDigitalPatterning&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_EnableDigitalPatterning&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Enables digital pattern output on the signal generator. This function sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_DIGITAL_PATTERN_ENABLED.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_DIGITAL_PATTERN_ENABLED&lt;/span&gt;&lt;/a&gt; attribute to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to enable the digital pattern output.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int EnableDigitalPatterning(string Channel_Name)
        {
            int pInvokeResult = PInvoke.EnableDigitalPatterning(this._handle, Channel_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_DisableDigitalPatterning&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_DisableDigitalPatterning&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_DisableDigitalPatterning&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Disables digital pattern output on the signal generator. This function sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_DIGITAL_PATTERN_ENABLED.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_DIGITAL_PATTERN_ENABLED&lt;/span&gt;&lt;/a&gt; attribute to &lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to disable digital pattern output.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int DisableDigitalPatterning(string Channel_Name)
        {
            int pInvokeResult = PInvoke.DisableDigitalPatterning(this._handle, Channel_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureStandardWaveform&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureStandardWaveform&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureStandardWaveform&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;waveform, ViReal64&amp;nbsp;amplitude, ViReal64&amp;nbsp;dcOffset, ViReal64&amp;nbsp;frequency, ViReal64&amp;nbsp;startPhase);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the following attributes of the signal generator that affect standard waveform generation:&lt;/p&gt;
        /// 
        /// &lt;ul&gt;
        /// &lt;li&gt;
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_WAVEFORM.html')"&gt; &lt;span class="Monospace"&gt; NIFGEN_ATTR_FUNC_WAVEFORM&lt;/span&gt;&lt;/a&gt;
        /// &lt;/li&gt;
        /// &lt;li&gt;
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_AMPLITUDE.html')"&gt; &lt;span class="Monospace"&gt; NIFGEN_ATTR_FUNC_AMPLITUDE&lt;/span&gt;&lt;/a&gt;
        /// &lt;/li&gt; 
        /// &lt;li&gt;
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_DC_OFFSET.html')"&gt; &lt;span class="Monospace"&gt; NIFGEN_ATTR_FUNC_DC_OFFSET&lt;/span&gt;&lt;/a&gt;
        /// &lt;/li&gt; 
        /// &lt;li&gt;
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_FREQUENCY.html')"&gt; &lt;span class="Monospace"&gt; NIFGEN_ATTR_FUNC_FREQUENCY&lt;/span&gt;&lt;/a&gt;
        /// &lt;/li&gt; 
        /// &lt;li&gt;
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_START_PHASE.html')"&gt; &lt;span class="Monospace"&gt; NIFGEN_ATTR_FUNC_START_PHASE&lt;/span&gt;&lt;/a&gt;
        /// &lt;/li&gt;
        /// &lt;/ul&gt;
        /// 
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;You must call the 
        /// 
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ConfigureOutputMode.html')"&gt; &lt;span class="Monospace"&gt; niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function with the &lt;strong&gt;outputMode&lt;/strong&gt; parameter set to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_FUNC&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to configure a standard waveform.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveform&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the standard waveform that you want the signal generator to produce. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_WAVEFORM.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FUNC_WAVEFORM&lt;/span&gt;&lt;/a&gt; attribute to this value.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="Bordered"&gt;&lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_SINE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces a sinusoid waveform.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_SQUARE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces a square waveform.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_TRIANGLE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces a triangle waveform.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_RAMP_UP&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces a positive ramp waveform.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_RAMP_DOWN&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces a negative ramp waveform.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_DC&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces a constant voltage.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_NOISE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces white noise.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_USER&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces a user-defined waveform as defined with the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_DefineUserStandardWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_DefineUserStandardWaveform&lt;/span&gt;&lt;/a&gt; function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;NIFGEN_VAL_WFM_SINE&lt;/span&gt;&lt;/p&gt;
        /// &lt;/td&gt;
        /// 
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Amplitude">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Amplitude&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;amplitude&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the amplitude of the standard waveform that you want the signal generator to produce. This value is the amplitude at the output terminal. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_AMPLITUDE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FUNC_AMPLITUDE&lt;/span&gt;&lt;/a&gt; attribute to this value. 
        /// 
        /// &lt;p class="Body"&gt;For example, to produce a waveform ranging from &amp;#8211;5.00&amp;nbsp;V to +5.00&amp;nbsp;V, set the amplitude to 10.00&amp;nbsp;V.&lt;/p&gt;
        /// 
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; This parameter does not affect signal generator behavior when you set the &lt;strong&gt;waveform&lt;/strong&gt; parameter of the &lt;span class="monospace"&gt;niFgen_ConfigureStandardWaveform&lt;/span&gt; function to &lt;span class="monospace"&gt;NIFGEN_VAL_WFM_DC&lt;/span&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: peak-to-peak voltage&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="DC_Offset">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;DC Offset&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;dcOffset&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the DC offset of the standard waveform that you want the signal generator to produce. The value is the offset from ground to the center of the waveform you specify with the &lt;strong&gt;waveform&lt;/strong&gt; parameter, observed at the output terminal. For example, to configure a waveform with an amplitude of 10.00&amp;nbsp;V to range from 0.00&amp;nbsp;V to +10.00&amp;nbsp;V, set the &lt;strong&gt;dcOffset&lt;/strong&gt; to 5.00&amp;nbsp;V. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_DC_OFFSET.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FUNC_DC_OFFSET&lt;/span&gt;&lt;/a&gt; attribute to this value.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: volts&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Frequency">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Frequency&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;frequency&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the frequency of the standard waveform that you want the signal generator to produce. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_FREQUENCY.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FUNC_FREQUENCY&lt;/span&gt;&lt;/a&gt; attribute to this value.&lt;br&gt;&lt;br&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;This parameter does not affect signal generator behavior when you set the &lt;strong&gt;waveform&lt;/strong&gt; parameter of the &lt;span class="monospace"&gt;niFgen_ConfigureStandardWaveform&lt;/span&gt; function to &lt;span class="monospace"&gt;NIFGEN_VAL_WFM_DC&lt;/span&gt;.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;
        /// Frequency ranges vary from device to device. For information about the frequencies supported on your device, refer to the &lt;em&gt;Features Supported&lt;/em&gt; topic for your device in the &lt;em&gt;NI Signal Generators Help&lt;/em&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: hertz&lt;/p&gt;
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Start_Phase">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Start Phase&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;startPhase&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the horizontal offset of the standard waveform that you want the signal generator to produce. Specify this parameter in degrees of one waveform cycle.  NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_START_PHASE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FUNC_START_PHASE&lt;/span&gt;&lt;/a&gt; attribute to this value. A start phase of 180 degrees means output generation begins halfway through the waveform. A start phase of 360 degrees offsets the output by an entire waveform cycle, which is identical to a start phase of 0 degrees.
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; This parameter does not affect signal generator behavior when you set the &lt;strong&gt;waveform&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_WFM_DC&lt;/span&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: degrees of one cycle&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: 0.00&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureStandardWaveform(string Channel_Name, int Waveform, double Amplitude, double DC_Offset, double Frequency, double Start_Phase)
        {
            int pInvokeResult = PInvoke.ConfigureStandardWaveform(this._handle, Channel_Name, Waveform, Amplitude, DC_Offset, Frequency, Start_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_DefineUserStandardWaveform&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_DefineUserStandardWaveform&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_DefineUserStandardWaveform&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;waveformSize, ViReal64[]&amp;nbsp;waveformDataArray);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Defines a user waveform for use in either Standard Function or Frequency List output mode. &lt;/p&gt; 
        /// 
        /// &lt;p class="Body"&gt;To select the waveform, set the &lt;strong&gt;waveform&lt;/strong&gt; parameter to 
        /// &lt;span class="monospace"&gt;NIFGEN_VAL_WFM_USER&lt;/span&gt; with either the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureStandardWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureStandardWaveform&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateFreqList.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateFreqList&lt;/span&gt;&lt;/a&gt; function.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;The waveform data must be scaled between &amp;#8211;1.0 and 1.0. Use the 
        /// &lt;strong&gt;amplitude&lt;/strong&gt; parameter in the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ConfigureStandardWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureStandardWaveform&lt;/span&gt;&lt;/a&gt; function to generate different output voltages.
        /// &lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;You must call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureOutputMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function     to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to
        /// &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_FUNC&lt;/span&gt; or
        /// &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_FREQ_LIST&lt;/span&gt; before calling this function. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to define a user standard waveform.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformSize&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the size of the waveform in samples.&lt;br&gt;&lt;br&gt;
        /// 
        /// &lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;16384&lt;/span&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Data_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Data Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformDataArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data you want to use for the new arbitrary waveform. The array must have at least as many elements as the value that you specify in &lt;strong&gt;waveformSize&lt;/strong&gt;.
        /// 
        /// &lt;p class="Body"&gt;You must normalize the data points in the array to be between &amp;#8211;1.00 and +1.00.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int DefineUserStandardWaveform(string Channel_Name, int Waveform_Size, double[] Waveform_Data_Array)
        {
            int pInvokeResult = PInvoke.DefineUserStandardWaveform(this._handle, Channel_Name, Waveform_Size, Waveform_Data_Array);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ClearUserStandardWaveform&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ClearUserStandardWaveform&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ClearUserStandardWaveform&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Clears the user-defined waveform created by the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_DefineUserStandardWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_DefineUserStandardWaveform&lt;/span&gt;&lt;/a&gt; function.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name from which you want to clear a user standard waveform.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ClearUserStandardWaveform(string Channel_Name)
        {
            int pInvokeResult = PInvoke.ClearUserStandardWaveform(this._handle, Channel_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureFrequency&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureFrequency&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureFrequency&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViReal64&amp;nbsp;frequency);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the frequency of the standard waveform that you want the signal generator to produce.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to configure a standard waveform.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Frequency">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Frequency&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;frequency&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the frequency of the standard waveform that you want the signal generator to produce. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_FREQUENCY.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FUNC_FREQUENCY&lt;/span&gt;&lt;/a&gt; attribute to this value.&lt;br&gt;&lt;br&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;This parameter does not affect signal generator behavior when you set the &lt;strong&gt;waveform&lt;/strong&gt; parameter of the &lt;span class="monospace"&gt;niFgen_ConfigureStandardWaveform&lt;/span&gt; function to &lt;span class="monospace"&gt;NIFGEN_VAL_WFM_DC&lt;/span&gt;.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;
        /// Frequency ranges vary from device to device. For information about the frequencies supported on your device, refer to the &lt;em&gt;Features Supported&lt;/em&gt; topic for your device in the &lt;em&gt;NI Signal Generators Help&lt;/em&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: hertz&lt;/p&gt;
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureFrequency(string Channel_Name, double Frequency)
        {
            int pInvokeResult = PInvoke.ConfigureFrequency(this._handle, Channel_Name, Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureAmplitude&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureAmplitude&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureAmplitude&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViReal64&amp;nbsp;amplitude);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the amplitude of the standard waveform that you want the signal generator to produce.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to configure a standard waveform.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Amplitude">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Amplitude&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;amplitude&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the amplitude of the standard waveform that you want the signal generator to produce. This value is the amplitude at the output terminal. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_AMPLITUDE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FUNC_AMPLITUDE&lt;/span&gt;&lt;/a&gt; attribute to this value. 
        /// 
        /// &lt;p class="Body"&gt;For example, to produce a waveform ranging from &amp;#8211;5.00&amp;nbsp;V to +5.00&amp;nbsp;V, set the amplitude to 10.00&amp;nbsp;V.&lt;/p&gt;
        /// 
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; This parameter does not affect signal generator behavior when you set the &lt;strong&gt;waveform&lt;/strong&gt; parameter of the &lt;span class="monospace"&gt;niFgen_ConfigureStandardWaveform&lt;/span&gt; function to &lt;span class="monospace"&gt;NIFGEN_VAL_WFM_DC&lt;/span&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: peak-to-peak voltage&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureAmplitude(string Channel_Name, double Amplitude)
        {
            int pInvokeResult = PInvoke.ConfigureAmplitude(this._handle, Channel_Name, Amplitude);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CreateFreqList&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CreateFreqList&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CreateFreqList&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;waveform, ViInt32&amp;nbsp;frequencyListLength, ViReal64[]&amp;nbsp;frequencyArray, ViReal64[]&amp;nbsp;durationArray, ViInt32*&amp;nbsp;frequencyListHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Creates a frequency list from an array of frequencies (&lt;strong&gt;frequencyArray&lt;/strong&gt;) and an array of durations (&lt;strong&gt;durationArray&lt;/strong&gt;). The two arrays should have the same number of elements, and this value must also be the size of the &lt;strong&gt;frequencyListLength&lt;/strong&gt;. The function returns a handle that identifies the frequency list (the &lt;strong&gt;frequencyListHandle&lt;/strong&gt;). You can pass this handle to &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureFreqList.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureFreqList&lt;/span&gt;&lt;/a&gt; to specify what frequency list you want the signal generator to produce.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;&lt;/td&gt;
        /// &lt;td&gt;You must call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureOutputMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function  to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_FREQ_LIST&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="body"&gt;A frequency list consists of a list of frequencies and durations. The signal generator generates each frequency for the given amount of time and then proceeds to the next frequency. When the end of the list is reached, the signal generator starts over at the beginning of the list.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Waveform">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveform&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the standard waveform that you want the signal generator to produce. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_WAVEFORM.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FUNC_WAVEFORM&lt;/span&gt;&lt;/a&gt; attribute to this value.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="Bordered"&gt;&lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_SINE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces a sinusoid waveform.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_SQUARE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces a square waveform.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_TRIANGLE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces a triangle waveform.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_RAMP_UP&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces a positive ramp waveform.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_RAMP_DOWN&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces a negative ramp waveform.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_DC&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces a constant voltage.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_NOISE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces white noise.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WFM_USER&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Specifies that the signal generator produces a user-defined waveform as defined with the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_DefineUserStandardWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_DefineUserStandardWaveform&lt;/span&gt;&lt;/a&gt; function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;NIFGEN_VAL_WFM_SINE&lt;/span&gt;&lt;/p&gt;
        /// &lt;/td&gt;
        /// 
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Frequency_List_Length">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Frequency List Length&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;frequencyListLength&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of steps in the frequency list you want to create. The value must be between the minimum and maximum frequency list lengths that the signal generator allows. You can obtain the minimum and maximum frequency list lengths from the &lt;strong&gt;minimumFrequencyListLength&lt;/strong&gt; and &lt;strong&gt;maximumFrequencyListLength&lt;/strong&gt; parameters in the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_QueryFreqListCapabilities.html')"&gt;&lt;span class="monospace"&gt;niFgen_QueryFreqListCapabilities&lt;/span&gt;&lt;/a&gt; function.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;frequency&lt;/strong&gt; and &lt;strong&gt;duration&lt;/strong&gt; must each be at least as long as this frequency list length.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Frequency_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Frequency Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;frequencyArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of frequencies to form the frequency list. The array must have at least as many elements as the value you specify in &lt;strong&gt;frequencyListLength&lt;/strong&gt;. Each &lt;strong&gt;frequencyArray&lt;/strong&gt; element has a corresponding &lt;strong&gt;durationArray&lt;/strong&gt; element that indicates how long that frequency is repeated.  
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: hertz&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Duration_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Duration Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;durationArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of durations to form the frequency list. The array must have at least as many elements as the value that you specify in &lt;strong&gt;frequencyListLength&lt;/strong&gt;. Each &lt;strong&gt;durationArray&lt;/strong&gt; element has a corresponding &lt;strong&gt;frequencyArray&lt;/strong&gt; element and indicates how long in seconds to generate the corresponding frequency.  
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: seconds&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Frequency_List_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Frequency List Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;frequencyListHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Returns the handle that identifies the new frequency list. You can pass this handle to &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureFreqList.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureFreqList&lt;/span&gt;&lt;/a&gt; to generate the arbitrary sequence.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CreateFreqList(int Waveform, int Frequency_List_Length, double[] Frequency_Array, double[] Duration_Array, out int Frequency_List_Handle)
        {
            int pInvokeResult = PInvoke.CreateFreqList(this._handle, Waveform, Frequency_List_Length, Frequency_Array, Duration_Array, out Frequency_List_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureFreqList&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureFreqList&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureFreqList&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;frequencyListHandle, ViReal64&amp;nbsp;amplitude, ViReal64&amp;nbsp;dcOffset, ViReal64&amp;nbsp;startPhase);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the attributes of the signal generator that affect frequency list generation 
        /// (the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FREQ_LIST_HANDLE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FREQ_LIST_HANDLE&lt;/span&gt;&lt;/a&gt;, 
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_AMPLITUDE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FUNC_AMPLITUDE&lt;/span&gt;&lt;/a&gt;, 
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_DC_OFFSET.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FUNC_DC_OFFSET&lt;/span&gt;&lt;/a&gt;, 
        /// and &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_START_PHASE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FUNC_START_PHASE&lt;/span&gt;&lt;/a&gt; attributes).&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;&lt;/td&gt;
        /// &lt;td&gt;You must call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureOutputMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_FREQ_LIST&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to configure the frequency list.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Frequency_List_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Frequency List Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;frequencyListHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the handle of the frequency list that you want the signal generator to produce. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FREQ_LIST_HANDLE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FREQ_LIST_HANDLE&lt;/span&gt;&lt;/a&gt; attribute to this value. You can create a frequency list using the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_CreateFreqList.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateFreqList&lt;/span&gt;&lt;/a&gt; function, which returns a handle that you use to identify the list.&lt;br&gt;&lt;br&gt;
        /// 
        /// &lt;strong&gt;Default Value&lt;/strong&gt;: None
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Amplitude">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Amplitude&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;amplitude&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the amplitude of the standard waveform that you want the signal generator to produce. This value is the amplitude at the output terminal. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_AMPLITUDE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FUNC_AMPLITUDE&lt;/span&gt;&lt;/a&gt; attribute to this value. 
        /// 
        /// &lt;p class="Body"&gt;For example, to produce a waveform ranging from &amp;#8211;5.00&amp;nbsp;V to +5.00&amp;nbsp;V, set the amplitude to 10.00&amp;nbsp;V.&lt;/p&gt;
        /// 
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; This parameter does not affect signal generator behavior when you set the &lt;strong&gt;waveform&lt;/strong&gt; parameter of the &lt;span class="monospace"&gt;niFgen_ConfigureStandardWaveform&lt;/span&gt; function to &lt;span class="monospace"&gt;NIFGEN_VAL_WFM_DC&lt;/span&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: peak-to-peak voltage&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="DC_Offset">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;DC Offset&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;dcOffset&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the DC offset of the standard waveform that you want the signal generator to produce. The value is the offset from ground to the center of the waveform you specify with the &lt;strong&gt;waveform&lt;/strong&gt; parameter, observed at the output terminal. For example, to configure a waveform with an amplitude of 10.00&amp;nbsp;V to range from 0.00&amp;nbsp;V to +10.00&amp;nbsp;V, set the &lt;strong&gt;dcOffset&lt;/strong&gt; to 5.00&amp;nbsp;V. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_DC_OFFSET.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FUNC_DC_OFFSET&lt;/span&gt;&lt;/a&gt; attribute to this value.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: volts&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Start_Phase">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Start Phase&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;startPhase&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the horizontal offset of the standard waveform you want the  signal generator to produce. Specify this attribute in degrees of one waveform cycle. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FUNC_START_PHASE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FUNC_START_PHASE&lt;/span&gt;&lt;/a&gt; attribute to this value. A start phase of 180 degrees means output generation begins halfway through the waveform. A start phase of 360 degrees offsets the output by an entire waveform cycle, which is identical to a start phase of 0 degrees.
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; This parameter does not affect signal generator behavior when you set the &lt;strong&gt;waveform&lt;/strong&gt; parameter to &lt;span class="monospace"&gt; NIFGEN_VAL_WFM_DC&lt;/span&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: degrees of one cycle&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None degrees&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureFreqList(string Channel_Name, int Frequency_List_Handle, double Amplitude, double DC_Offset, double Start_Phase)
        {
            int pInvokeResult = PInvoke.ConfigureFreqList(this._handle, Channel_Name, Frequency_List_Handle, Amplitude, DC_Offset, Start_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ClearFreqList&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ClearFreqList&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ClearFreqList&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;frequencyListHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Removes a previously created frequency list from the signal generator memory and invalidates the frequency list handle.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Frequency_List_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Frequency List Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;frequencyListHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the handle of the frequency list you want the signal generator to remove. You create multiple frequency lists using &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_CreateFreqList.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateFreqList&lt;/span&gt;&lt;/a&gt;. &lt;span class="monospace"&gt;niFgen_CreateFreqList&lt;/span&gt; returns a handle that you use to identify each list. Specify a value of -1 to clear all frequency lists.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Defined Value&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_ALL_FLISTS&lt;/span&gt;&amp;#8212;Remove all frequency lists from the signal generator.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ClearFreqList(int Frequency_List_Handle)
        {
            int pInvokeResult = PInvoke.ClearFreqList(this._handle, Frequency_List_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_QueryFreqListCapabilities&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_QueryFreqListCapabilities&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_QueryFreqListCapabilities&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32*&amp;nbsp;maximumNumberOfFreqLists, ViInt32*&amp;nbsp;minimumFrequencyListLength, ViInt32*&amp;nbsp;maximumFrequencyListLength, ViReal64*&amp;nbsp;minimumFrequencyListDuration, ViReal64*&amp;nbsp;maximumFrequencyListDuration, ViReal64*&amp;nbsp;frequencyListDurationQuantum);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Returns the attributes of the signal generator that are related to creating frequency lists.  These attributes are &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MAX_NUM_FREQ_LISTS.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MAX_NUM_FREQ_LISTS&lt;/span&gt;&lt;/a&gt;,
        /// 
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MIN_FREQ_LIST_LENGTH.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MIN_FREQ_LIST_LENGTH&lt;/span&gt;&lt;/a&gt;, 
        /// 
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MAX_FREQ_LIST_LENGTH.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MAX_FREQ_LIST_LENGTH&lt;/span&gt;&lt;/a&gt;, 
        /// 
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MIN_FREQ_LIST_DURATION.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MIN_FREQ_LIST_DURATION&lt;/span&gt;&lt;/a&gt;, 
        /// 
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MAX_FREQ_LIST_DURATION.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MAX_FREQ_LIST_DURATION&lt;/span&gt;&lt;/a&gt;, 
        /// 
        /// and &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FREQ_LIST_DURATION_QUANTUM.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FREQ_LIST_DURATION_QUANTUM&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Maximum_Number_Of_Freq_Lists">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Maximum Number of Freq Lists&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;maximumNumberOfFreqLists&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Returns the maximum number of frequency lists that the signal generator allows. NI-FGEN obtains this value from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MAX_NUM_FREQ_LISTS.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MAX_NUM_FREQ_LISTS&lt;/span&gt;&lt;/a&gt; attribute.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Minimum_Frequency_List_Length">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Minimum Frequency List Length&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;minimumFrequencyListLength&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Returns the minimum number of steps that the signal generator allows in a frequency list. NI-FGEN obtains this value from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MIN_FREQ_LIST_LENGTH.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MIN_FREQ_LIST_LENGTH&lt;/span&gt;&lt;/a&gt; attribute.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Maximum_Frequency_List_Length">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Maximum Frequency List Length&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;maximumFrequencyListLength&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Returns the maximum number of steps that the signal generator allows in a frequency list. NI-FGEN obtains this value from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MAX_FREQ_LIST_LENGTH.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MAX_FREQ_LIST_LENGTH&lt;/span&gt;&lt;/a&gt; attribute.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Minimum_Frequency_List_Duration">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Minimum Frequency List Duration&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;minimumFrequencyListDuration&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Returns the minimum duration that the signal generator allows in a step of a frequency list. NI-FGEN obtains this value from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MIN_FREQ_LIST_DURATION.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MIN_FREQ_LIST_DURATION&lt;/span&gt;&lt;/a&gt; attribute.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Maximum_Frequency_List_Duration">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Maximum Frequency List Duration&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;maximumFrequencyListDuration&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Returns the maximum duration that the signal generator allows in a step of a frequency list. NI-FGEN obtains this value from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MAX_FREQ_LIST_DURATION.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MAX_FREQ_LIST_DURATION&lt;/span&gt;&lt;/a&gt; attribute.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Frequency_List_Duration_Quantum">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Frequency List Duration Quantum&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;frequencyListDurationQuantum&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Returns the quantum of which all durations must be a multiple in a frequency list. NI-FGEN obtains this value from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_FREQ_LIST_DURATION_QUANTUM.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_FREQ_LIST_DURATION_QUANTUM&lt;/span&gt;&lt;/a&gt; attribute.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int QueryFreqListCapabilities(out int Maximum_Number_Of_Freq_Lists, out int Minimum_Frequency_List_Length, out int Maximum_Frequency_List_Length, out double Minimum_Frequency_List_Duration, out double Maximum_Frequency_List_Duration, out double Frequency_List_Duration_Quantum)
        {
            int pInvokeResult = PInvoke.QueryFreqListCapabilities(this._handle, out Maximum_Number_Of_Freq_Lists, out Minimum_Frequency_List_Length, out Maximum_Frequency_List_Length, out Minimum_Frequency_List_Duration, out Maximum_Frequency_List_Duration, out Frequency_List_Duration_Quantum);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureGain&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureGain&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureGain&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViReal64&amp;nbsp;gain);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the amount of gain to apply to the waveform.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;&lt;/td&gt;
        /// &lt;td&gt;You must call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureOutputMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function  to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_ARB&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to configure the gain.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Gain">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Gain&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;gain&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the factor by which the signal generator scales the arbitrary waveforms in the sequence. When you create an arbitrary waveform, you must first normalize the data points to a range of &amp;#8211;1.00 to +1.00. You can use this parameter to scale the waveform to other ranges. The gain is applied before the offset is added.
        /// 
        /// &lt;p class="Body"&gt;For example, to configure the output signal to range from &amp;#8211;2.00 to +2.00&amp;nbsp;V, set &lt;strong&gt;gain&lt;/strong&gt; to 2.00.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: unitless&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureGain(string Channel_Name, double Gain)
        {
            int pInvokeResult = PInvoke.ConfigureGain(this._handle, Channel_Name, Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureSampleRate&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureSampleRate&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureSampleRate&amp;nbsp;(ViSession&amp;nbsp;vi, ViReal64&amp;nbsp;sampleRate);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ARB_SAMPLE_RATE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ARB_SAMPLE_RATE&lt;/span&gt;&lt;/a&gt; attribute, which determines the rate at which the signal generator produces arbitrary waveforms.  When you configure the signal generator to produce an arbitrary sequence, this value is the sample rate for all arbitrary waveforms in the sequence.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// You must call the &lt;a href="javascript:LaunchHelp('fgencref.chm::/cviniFgen_ConfigureOutputMode.html')"&gt; &lt;span class="Monospace"&gt; niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_ARB&lt;/span&gt;, &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SEQ&lt;/span&gt;, or &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SCRIPT&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Sample_Rate">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Sample Rate&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;sampleRate&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the sample rate at which you want the signal generator to generate arbitrary waveforms. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ARB_SAMPLE_RATE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ARB_SAMPLE_RATE&lt;/span&gt;&lt;/a&gt; attribute to this value. 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: Samples/s&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureSampleRate(double Sample_Rate)
        {
            int pInvokeResult = PInvoke.ConfigureSampleRate(this._handle, Sample_Rate);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_QueryArbWfmCapabilities&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_QueryArbWfmCapabilities&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_QueryArbWfmCapabilities&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32*&amp;nbsp;maximumNumberofWaveforms, ViInt32*&amp;nbsp;waveformQuantum, ViInt32*&amp;nbsp;minimumWaveformSize, ViInt32*&amp;nbsp;maximumWaveformSize);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Returns the attributes of the signal generator that are related to creating arbitrary waveforms. These attributes are the maximum number of waveforms, waveform quantum, minimum waveform size, and maximum waveform size.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; If you do not want to obtain the waveform quantum, pass a value of &lt;span class="monospace"&gt;VI_NULL&lt;/span&gt; for this parameter.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Maximum_Number_of_Waveforms">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Maximum Number of Waveforms&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;maximumNumberofWaveforms&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Returns the maximum number of arbitrary waveforms that the signal generator allows. NI-FGEN obtains this value from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MAX_NUM_WAVEFORMS.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MAX_NUM_WAVEFORMS&lt;/span&gt;&lt;/a&gt; attribute.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Quantum">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Quantum&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformQuantum&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;The size (number of points) of each waveform must be a multiple of a constant quantum value. This parameter obtains the quantum value that the signal generator uses. NI-FGEN returns this value from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_WAVEFORM_QUANTUM.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_WAVEFORM_QUANTUM&lt;/span&gt;&lt;/a&gt; attribute.
        /// 
        /// &lt;p class="Body"&gt;For example, when this attribute returns a value of 8, all waveform sizes must be a multiple of 8.&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Minimum_Waveform_Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Minimum Waveform Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;minimumWaveformSize&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Returns the minimum number of points that the signal generator allows in a waveform. NI-FGEN obtains this value from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MIN_WAVEFORM_SIZE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MIN_WAVEFORM_SIZE&lt;/span&gt;&lt;/a&gt; attribute.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Maximum_Waveform_Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Maximum Waveform Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;maximumWaveformSize&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Returns the maximum number of points that the signal generator allows in a waveform. NI-FGEN obtains this value from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MAX_WAVEFORM_SIZE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MAX_WAVEFORM_SIZE&lt;/span&gt;&lt;/a&gt; attribute.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int QueryArbWfmCapabilities(out int Maximum_Number_of_Waveforms, out int Waveform_Quantum, out int Minimum_Waveform_Size, out int Maximum_Waveform_Size)
        {
            int pInvokeResult = PInvoke.QueryArbWfmCapabilities(this._handle, out Maximum_Number_of_Waveforms, out Waveform_Quantum, out Minimum_Waveform_Size, out Maximum_Waveform_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CreateWaveformF64&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CreateWaveformF64&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CreateWaveformF64&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;waveformSize, ViReal64[]&amp;nbsp;waveformDataArray, ViInt32*&amp;nbsp;waveformHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Creates an onboard waveform from binary F64 (floating point double) data for use in Arbitrary Waveform output mode or Arbitrary Sequence output mode.  The &lt;strong&gt;waveformHandle&lt;/strong&gt; returned  can later be used for setting the active waveform, changing the data in the waveform, building sequences of waveforms, or deleting the waveform when it is no longer needed.
        /// &lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; You must call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureOutputMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_ARB&lt;/span&gt; or &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SEQ&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to create the waveform.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformSize&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the size of the arbitrary waveform that you want to create.
        /// &lt;br&gt;&lt;br&gt;The size must meet the following restrictions:
        /// 
        /// &lt;ul&gt;
        /// &lt;li&gt; The size must be less than or equal to the maximum waveform size that the device allows.&lt;/li&gt;
        /// &lt;li&gt;The size must be greater than or equal to the minimum waveform size that the device allows.&lt;/li&gt;
        /// &lt;li&gt; The size must be an integer multiple of the device waveform quantum.&lt;/li&gt;
        /// &lt;/ul&gt;
        /// &lt;p class="body"&gt;You can obtain these values from the &lt;strong&gt;maximumWaveformSize&lt;/strong&gt;, &lt;strong&gt;minimumWaveformSize&lt;/strong&gt;, and &lt;strong&gt;waveformQuantum&lt;/strong&gt; parameters of the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_QueryArbWfmCapabilities.html')"&gt;&lt;span class="monospace"&gt;niFgen_QueryArbWfmCapabilities&lt;/span&gt;&lt;/a&gt; function.&lt;/p&gt;&lt;strong&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:&lt;/strong&gt; None&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Data_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Data Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformDataArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data you want to use for the new arbitrary waveform. The array must have at least as many elements as the value that you specify in &lt;strong&gt;waveformSize&lt;/strong&gt;.
        /// 
        /// &lt;p class="Body"&gt;You must normalize the data points in the array to be between &amp;#8211;1.00 and +1.00.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;The handle that identifies the new waveform.  This handle is used later when referring to this waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CreateWaveformF64(string Channel_Name, int Waveform_Size, double[] Waveform_Data_Array, out int Waveform_Handle)
        {
            int pInvokeResult = PInvoke.CreateWaveformF64(this._handle, Channel_Name, Waveform_Size, Waveform_Data_Array, out Waveform_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CreateWaveformI16&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CreateWaveformI16&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CreateWaveformI16&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;waveformSize, ViInt16[]&amp;nbsp;waveformDataArray, ViInt32*&amp;nbsp;waveformHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Creates an onboard waveform from binary 16-bit signed integer (I16) data for use in Arbitrary Waveform or Arbitrary Sequence output mode.  The &lt;strong&gt;waveformHandle&lt;/strong&gt; returned  can later be used for setting the active waveform, changing the data in the waveform, building sequences of waveforms, or deleting the waveform when it is no longer needed.
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; You must call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureOutputMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_ARB&lt;/span&gt; or &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SEQ&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to create the waveform.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformSize&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the size of the arbitrary waveform that you want to create.&lt;br&gt;&lt;br&gt;The size must meet the following restrictions:
        /// &lt;ul&gt;
        /// &lt;li&gt; The size must be less than or equal to the maximum waveform size that the device allows.&lt;/li&gt;
        /// &lt;li&gt; The size must be greater than or equal to the minimum waveform size that the device allows.&lt;/li&gt;
        /// &lt;li&gt; The size must be an integer multiple of the device waveform quantum.&lt;/li&gt;
        /// &lt;/ul&gt;
        /// &lt;p class="body"&gt;You can obtain these values from the &lt;strong&gt;maximumWaveformSize&lt;/strong&gt;, &lt;strong&gt;minimumWaveformSize&lt;/strong&gt;, and &lt;strong&gt;waveformQuantum&lt;/strong&gt; parameters of the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_QueryArbWfmCapabilities.html')"&gt;&lt;span class="monospace"&gt;niFgen_QueryArbWfmCapabilities&lt;/span&gt;&lt;/a&gt; function.&lt;/p&gt;&lt;br&gt;&lt;strong&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:&lt;/strong&gt; None&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Data_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Data Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformDataArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt16[]&lt;/td&gt;
        /// &lt;td&gt;Specify the array of data that you want to use for the new arbitrary waveform. The array must have at least as many elements as the value that you specify in the Waveform Size parameter.
        /// &lt;br&gt;
        /// &lt;br&gt;You must normalize the data points in the array to be between -32768 and +32767.
        /// &lt;br&gt;
        /// &lt;br&gt;&lt;strong&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:&lt;/strong&gt; None&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;The handle that identifies the new waveform.  This handle is used later when referring to this waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CreateWaveformI16(string Channel_Name, int Waveform_Size, short[] Waveform_Data_Array, out int Waveform_Handle)
        {
            int pInvokeResult = PInvoke.CreateWaveformI16(this._handle, Channel_Name, Waveform_Size, Waveform_Data_Array, out Waveform_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CreateWaveformComplexF64&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CreateWaveformComplexF64&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CreateWaveformComplexF64&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;numberofSamples, niFgen_ComplexF64[]&amp;nbsp;waveformDataArray, ViInt32*&amp;nbsp;waveformHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Creates an onboard waveform from complex double-precision floating-point (F64) data for use with the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_OUTPUT_MODE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_OUTPUT_MODE&lt;/span&gt;&lt;/a&gt; attribute set to Arbitrary Waveform or Arbitrary Sequence output mode on devices with the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_OUTPUT_ENABLED.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_OUTPUT_ENABLED&lt;/span&gt;&lt;/a&gt; attribute set to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt; and the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_OSP_DATA_PROCESSING_MODE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_OSP_DATA_PROCESSING_MODE&lt;/span&gt;&lt;/a&gt; attribute set to &lt;span class="monospace"&gt;NIFGEN_VAL_OSP_COMPLEX&lt;/span&gt;. The &lt;strong&gt;waveformHandle&lt;/strong&gt; returned by the function can be used later for setting the active waveform, changing the data in the waveform, building sequences of waveforms, or deleting the waveform when it is no longer needed.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; You must call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureOutputMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_ARB&lt;/span&gt; or &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SEQ&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to create the waveform.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Number_of_Samples">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Number of Samples&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;numberofSamples&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the size of the arbitrary waveform that you want to create.&lt;p class="body"&gt;The size must meet the following restrictions:&lt;/p&gt;
        /// 
        /// &lt;ul&gt;
        /// &lt;li&gt; The size must be less than or equal to the maximum waveform size that the device allows.&lt;/li&gt;
        /// &lt;li&gt; The size must be greater than or equal to the minimum waveform size that the device allows.&lt;/li&gt;
        /// &lt;li&gt;The size must be an integer multiple of the device waveform quantum.&lt;/li&gt;
        /// &lt;/ul&gt;
        /// 
        /// &lt;p class="body"&gt;You can obtain these values from the &lt;strong&gt;maximumWaveformSize&lt;/strong&gt;, &lt;strong&gt;minimumWaveformSize&lt;/strong&gt;, and &lt;strong&gt;waveformQuantum&lt;/strong&gt; parameters of the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_QueryArbWfmCapabilities.html')"&gt;&lt;span class="monospace"&gt;niFgen_QueryArbWfmCapabilities&lt;/span&gt;&lt;/a&gt; function.&lt;/p&gt;&lt;br&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Data_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Data Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformDataArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data you want to use for the new arbitrary waveform. The array must have at least as many elements as the value that you specify in &lt;strong&gt;waveformSize&lt;/strong&gt;.
        /// 
        /// &lt;p class="Body"&gt;You must normalize the data points in the array to be between &amp;#8211;1.00 and +1.00.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;The handle that identifies the new waveform.  This handle is used later when referring to this waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CreateWaveformComplexF64(string Channel_Name, int Number_of_Samples, nicomplexnumber[] Waveform_Data_Array, out int Waveform_Handle)
        {
            int pInvokeResult = PInvoke.CreateWaveformComplexF64(this._handle, Channel_Name, Number_of_Samples, Waveform_Data_Array, out Waveform_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CreateWaveformFromFileI16&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CreateWaveformFromFileI16&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CreateWaveformFromFileI16&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViConstString&amp;nbsp;filename, ViInt32&amp;nbsp;byteOrder, ViInt32*&amp;nbsp;waveformHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Takes the binary 16-bit signed integer (I16) data from the specified file and creates an onboard waveform for use in Arbitrary Waveform or Arbitrary Sequence output mode. The &lt;strong&gt;waveformHandle&lt;/strong&gt; returned  by this function can later be used for setting the active waveform, changing the data in the waveform, building sequences of waveforms, or deleting the waveform when it is no longer needed.
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp; The I16 data (values between &amp;#8211;32768 and +32767) is assumed to represent &amp;#8211;1 to +1 V.  Use the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_DIGITAL_GAIN.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_DIGITAL_GAIN&lt;/span&gt;&lt;/a&gt; attribute to generate different voltage outputs.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;
        /// &lt;td&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// You must call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureOutputMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_ARB&lt;/span&gt; or &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SEQ&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to create the waveform.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="FileName">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;File Name&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;fileName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;The full path and name of the file where the waveform data resides.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Byte_Order">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Byte Order&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;byteOrder&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the byte order of the data in the file.
        /// 
        /// &lt;table class="Borderless"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif" alt="Note"&gt;&lt;/td&gt;
        /// &lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Data written by most applications in Windows (including LabWindows&amp;#8482;/CVI&amp;#8482;) is in Little Endian format. Data written to a file from LabVIEW is in Big Endian format by default on all platforms. Big Endian and Little Endian refer to the way data is stored in memory, which can differ on different processors.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_LITTLE_ENDIAN&lt;/span&gt;&lt;/td&gt; &lt;td class="bordered"&gt;Little Endian Data&amp;#8212;The least significant bit is stored at the lowest address, followed by the other bits, in order of increasing significance.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_BIG_ENDIAN&lt;/span&gt;&lt;/td&gt; &lt;td class="bordered"&gt;Big Endian Data&amp;#8212;The most significant bit is stored at the lowest address, followed by the other bits, in order of decreasing significance.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;br&gt;
        /// &lt;br&gt;&lt;strong&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:&lt;/strong&gt; &lt;span class="monospace"&gt;NIFGEN_VAL_LITTLE_ENDIAN&lt;/span&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;The handle that identifies the new waveform.  This handle is used later when referring to this waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CreateWaveformFromFileI16(string Channel_Name, string FileName, int Byte_Order, out int Waveform_Handle)
        {
            int pInvokeResult = PInvoke.CreateWaveformFromFileI16(this._handle, Channel_Name, FileName, Byte_Order, out Waveform_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CreateWaveformFromFileF64&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CreateWaveformFromFileF64&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CreateWaveformFromFileF64&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViConstString&amp;nbsp;filename, ViInt32&amp;nbsp;byteOrder, ViInt32*&amp;nbsp;waveformHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;This function takes the floating point double (F64) data from the specified file and creates an onboard waveform for use in Arbitrary Waveform or Arbitrary Sequence output mode. The &lt;strong&gt;waveformHandle&lt;/strong&gt; returned  by this function can later be used  for setting the active waveform, changing the data in the waveform, building sequences of waveforms, or deleting the waveform when it is no longer needed.
        /// 
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp; The F64 data must be between &amp;#8211;1.0 and +1.0 V.  Use the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_DIGITAL_GAIN.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_DIGITAL_GAIN&lt;/span&gt;&lt;/a&gt; attribute to generate different voltage outputs. &lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;&lt;/td&gt;
        /// &lt;td&gt; You must call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureOutputMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_ARB&lt;/span&gt; or &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SEQ&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to create the waveform.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Defined Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="FileName">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;File Name&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;fileName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;The full path and name of the file where the waveform data resides.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Byte_Order">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Byte Order&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;byteOrder&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the byte order of the data in the file.
        /// 
        /// &lt;table class="Borderless"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif" alt="Note"&gt;&lt;/td&gt;
        /// &lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Data written by most applications in Windows (including LabWindows&amp;#8482;/CVI&amp;#8482;) is in Little Endian format. Data written to a file from LabVIEW is in Big Endian format by default on all platforms. Big Endian and Little Endian refer to the way data is stored in memory, which can differ on different processors.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_LITTLE_ENDIAN&lt;/span&gt;&lt;/td&gt; &lt;td class="bordered"&gt;Little Endian Data&amp;#8212;The least significant bit is stored at the lowest address, followed by the other bits, in order of increasing significance.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_BIG_ENDIAN&lt;/span&gt;&lt;/td&gt; &lt;td class="bordered"&gt;Big Endian Data&amp;#8212;The most significant bit is stored at the lowest address, followed by the other bits, in order of decreasing significance.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;br&gt;
        /// &lt;br&gt;&lt;strong&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:&lt;/strong&gt; &lt;span class="monospace"&gt;NIFGEN_VAL_LITTLE_ENDIAN&lt;/span&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;The handle that identifies the new waveform.  This handle is used later when referring to this waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CreateWaveformFromFileF64(string Channel_Name, string FileName, int Byte_Order, out int Waveform_Handle)
        {
            int pInvokeResult = PInvoke.CreateWaveformFromFileF64(this._handle, Channel_Name, FileName, Byte_Order, out Waveform_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CreateWaveformFromFileHWS&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// 
        /// 
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CreateWaveformFromFileHWS&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CreateWaveformFromFileHWS&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViConstString&amp;nbsp;filename, ViBoolean&amp;nbsp;useRateFromWaveform, ViBoolean&amp;nbsp;useGain&amp;amp;OffsetFromWaveform, ViInt32*&amp;nbsp;waveformHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Takes the waveform data from the specified HWS (Hierarchical Waveform Storage) file and creates an onboard  waveform for use in Arbitrary Waveform or Arbitrary Sequence output mode. The &lt;strong&gt;waveformHandle&lt;/strong&gt; returned by this function can be used later for setting the active waveform, changing the data in the waveform, building sequences of waveforms, or deleting the waveform when it is no longer needed.
        /// &lt;br&gt;&lt;br&gt;
        /// When the Analog Waveform Editor saves data in an HWS file, it also stores the rate, gain, and offset with the data. If the &lt;strong&gt;useRateFromWaveform&lt;/strong&gt; and &lt;strong&gt;useGain&amp;amp;OffsetFromWaveform&lt;/strong&gt; parameters are set to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, this function also sets those properties.&lt;/p&gt;
        /// &lt;br&gt;
        /// 
        /// &lt;table class="Borderless"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif" alt="Note"&gt;&lt;/td&gt;
        /// &lt;td&gt;&lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;If you choose to have this function set the gain and offset properties for you, you should &lt;strong&gt;not&lt;/strong&gt; use the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ConfigureArbWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureArbWaveform&lt;/span&gt;&lt;/a&gt; or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ConfigureArbSequence.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureArbSequence&lt;/span&gt;&lt;/a&gt; functions, as they also set the gain and offset, thereby overriding the values set by this function.  Instead, use the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ARB_WAVEFORM_HANDLE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ARB_WAVEFORM_HANDLE&lt;/span&gt;&lt;/a&gt; or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ARB_SEQUENCE_HANDLE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ARB_SEQUENCE_HANDLE&lt;/span&gt;&lt;/a&gt; attributes.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// 
        /// 
        /// &lt;tr&gt;
        /// &lt;td&gt;&lt;/td&gt;
        /// &lt;td&gt; HWS files may contain I16 or DBL data, depending on how it was saved.  This function automatically adapts to either data type.  If the file contains DBL data, it must be between &amp;#8211;1.0 and +1.0.  Check the &amp;quot;Scale Data to +/&amp;#8211; 1V&amp;quot; option in the Analog Waveform Editor to ensure your data is between &amp;#8211;1.0 and +1.0.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to create the waveform.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Defined Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="FileName">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;File Name&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;fileName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;The full path and name of the file where the waveform data resides.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Use_Rate_From_Waveform">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Use Rate From Waveform&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;useRateFromWaveform&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViBoolean&lt;/td&gt;
        /// &lt;td&gt;If you set this parameter input to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt; and if onboard signal processing (OSP) is enabled, the rate from the waveform is interpreted as the data rate, and FGEN sets the data rate attribute for you. In all other cases, it is interpreted as the sample rate, and FGEN sets the sample rate attribute for you.
        /// &lt;br&gt;
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="Bordered"&gt;
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Use rate from waveform.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt; Do not use rate from waveform.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// &lt;br&gt;
        /// &lt;br&gt;&lt;strong&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:&lt;/strong&gt; &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;br&gt;&lt;br&gt; &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Use_Gain___Offset_From_Waveform">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Use Gain &amp; Offset From Waveform&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;useGain&amp;amp;OffsetFromWaveform&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViBoolean&lt;/td&gt;
        /// &lt;td&gt;If this input is set to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, NI-FGEN retrieves the gain and offset values from the specified HWS file and applies them to the NI-FGEN driver.
        /// &lt;br&gt;
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="Bordered"&gt;
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Use gain and offset from waveform.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt; Do not use gain and offset from waveform.
        /// &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// &lt;br&gt;&lt;strong&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:&lt;/strong&gt; &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;The handle that identifies the new waveform.  This handle is used later when referring to this waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CreateWaveformFromFileHWS(string Channel_Name, string FileName, bool Use_Rate_From_Waveform, bool Use_Gain___Offset_From_Waveform, out int Waveform_Handle)
        {
            int pInvokeResult = PInvoke.CreateWaveformFromFileHWS(this._handle, Channel_Name, FileName, System.Convert.ToUInt16(Use_Rate_From_Waveform), System.Convert.ToUInt16(Use_Gain___Offset_From_Waveform), out Waveform_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureArbWaveform&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureArbWaveform&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureArbWaveform&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;waveformHandle, ViReal64&amp;nbsp;gain, ViReal64&amp;nbsp;offset);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the attributes of the signal generator that affect arbitrary waveform generation. Sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ARB_WAVEFORM_HANDLE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ARB_WAVEFORM_HANDLE&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ARB_GAIN.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ARB_GAIN&lt;/span&gt;&lt;/a&gt;, and &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ARB_OFFSET.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ARB_OFFSET&lt;/span&gt;&lt;/a&gt; attributes.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt; You must call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureOutputMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function  to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_ARB&lt;/span&gt; before calling this function.&lt;/td&gt;
        /// 
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to configure an arbitrary waveform.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// 
        /// &lt;td&gt;Specifies the handle of the arbitrary waveform you want the signal generator to produce. 
        /// NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ARB_WAVEFORM_HANDLE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ARB_WAVEFORM_HANDLE&lt;/span&gt;&lt;/a&gt; attribute 
        /// to this value. You can create an arbitrary waveform using one of the following niFgen Create Waveform functions:
        /// 
        /// &lt;ul&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_CreateWaveformF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt;
        /// 
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_CreateWaveformI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// 
        /// &lt;li&gt;
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_CreateWaveformFromFileI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// 
        /// &lt;li&gt;
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_CreateWaveformFromFileF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// 
        /// &lt;li&gt;
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_CreateWaveformFromFileHWS.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileHWS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// 
        /// &lt;/ul&gt;
        /// 
        /// &lt;p class="body"&gt;These functions return a handle that you use to identify the waveform.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Gain">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Gain&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;gain&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the factor by which the signal generator scales the arbitrary waveforms in the sequence. When you create an arbitrary waveform, you must first normalize the data points to a range of &amp;#8211;1.00 to +1.00. You can use this parameter to scale the waveform to other ranges. The gain is applied before the offset is added.
        /// 
        /// &lt;p class="Body"&gt;For example, to configure the output signal to range from &amp;#8211;2.00 to +2.00&amp;nbsp;V, set &lt;strong&gt;gain&lt;/strong&gt; to 2.00.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: unitless&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Offset">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Offset&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;offset&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the value the signal generator adds to the arbitrary waveform data. When you create arbitrary waveforms, you must first normalize the data points to a range of &amp;#8211;1.00 to +1.00&amp;nbsp;V. You can use this parameter to shift the range of the arbitrary waveform. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ARB_OFFSET.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ARB_OFFSET&lt;/span&gt;&lt;/a&gt; attribute to this value.
        /// 
        /// &lt;p class="Body"&gt;For example, to configure the output signal to range from 0.00 to 2.00&amp;nbsp;V instead of &amp;#8211;1.00 to 1.00&amp;nbsp;V, set the offset to 1.00.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: volts&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureArbWaveform(string Channel_Name, int Waveform_Handle, double Gain, double Offset)
        {
            int pInvokeResult = PInvoke.ConfigureArbWaveform(this._handle, Channel_Name, Waveform_Handle, Gain, Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ClearArbWaveform&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ClearArbWaveform&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ClearArbWaveform&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;waveformHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Removes a previously created arbitrary waveform from the signal generator memory and invalidates the waveform handle.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;waveformHandle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the handle of the arbitrary waveform that you want the signal generator to remove. 
        /// &lt;p class="body"&gt;You can create multiple arbitrary waveforms using one of the following niFgen Create 
        /// Waveform functions:&lt;/p&gt;
        /// 
        /// &lt;ul&gt;
        /// &lt;li&gt;
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_CreateWaveformF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_CreateWaveformI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_CreateWaveformFromFileI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_CreateWaveformFromFileF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_CreateWaveformFromFileHWS.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileHWS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;/ul&gt;
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Defined Value&lt;/strong&gt;:&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_ALL_WAVEFORMS&lt;/span&gt;&amp;#8212;Remove all waveforms from the signal generator.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ClearArbWaveform(int Waveform_Handle)
        {
            int pInvokeResult = PInvoke.ClearArbWaveform(this._handle, Waveform_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_QueryArbSeqCapabilities&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_QueryArbSeqCapabilities&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_QueryArbSeqCapabilities&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32*&amp;nbsp;maximumNumberofSequences, ViInt32*&amp;nbsp;minimumSequenceLength, ViInt32*&amp;nbsp;maximumSequenceLength, ViInt32*&amp;nbsp;maximumLoopCount);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Returns the attributes of the signal generator that are related to creating arbitrary sequences (the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MAX_NUM_SEQUENCES.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MAX_NUM_SEQUENCES&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MIN_SEQUENCE_LENGTH.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MIN_SEQUENCE_LENGTH&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MAX_SEQUENCE_LENGTH.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MAX_SEQUENCE_LENGTH&lt;/span&gt;&lt;/a&gt;, and &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MAX_LOOP_COUNT.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MAX_LOOP_COUNT&lt;/span&gt;&lt;/a&gt; attributes).&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Maximum_Number_of_Sequences">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Maximum Number of Sequences&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;maximumNumberofSequences&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Returns the maximum number of arbitrary waveform sequences that the signal generator allows.  NI-FGEN obtains this value from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MAX_NUM_SEQUENCES.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MAX_NUM_SEQUENCES&lt;/span&gt;&lt;/a&gt; attribute.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Minimum_Sequence_Length">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Minimum Sequence Length&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;minimumSequenceLength&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Returns the minimum number of arbitrary waveforms the signal generator allows in a sequence.  NI-FGEN obtains this value from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MIN_SEQUENCE_LENGTH.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MIN_SEQUENCE_LENGTH&lt;/span&gt;&lt;/a&gt; attribute.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Maximum_Sequence_Length">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Maximum Sequence Length&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;maximumSequenceLength&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Returns the maximum number of arbitrary waveforms the signal generator allows in a sequence.  NI-FGEN obtains this value from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MAX_SEQUENCE_LENGTH.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MAX_SEQUENCE_LENGTH&lt;/span&gt;&lt;/a&gt; attribute.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Maximum_Loop_Count">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Maximum Loop Count&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;maximumLoopCount&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Returns the maximum number of times the signal generator can repeat an arbitrary waveform in a sequence.  NI-FGEN obtains this value from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_MAX_LOOP_COUNT.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_MAX_LOOP_COUNT&lt;/span&gt;&lt;/a&gt; attribute.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int QueryArbSeqCapabilities(out int Maximum_Number_of_Sequences, out int Minimum_Sequence_Length, out int Maximum_Sequence_Length, out int Maximum_Loop_Count)
        {
            int pInvokeResult = PInvoke.QueryArbSeqCapabilities(this._handle, out Maximum_Number_of_Sequences, out Minimum_Sequence_Length, out Maximum_Sequence_Length, out Maximum_Loop_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CreateArbSequence&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CreateArbSequence&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CreateArbSequence&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;sequenceLength, ViInt32[]&amp;nbsp;waveformHandlesArray, ViInt32[]&amp;nbsp;loopCountsArray, ViInt32*&amp;nbsp;sequenceHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;Creates an arbitrary sequence from an array of waveform handles and an array of corresponding loop counts. This function returns a handle that identifies the sequence. You pass this handle to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureArbSequence.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureArbSequence&lt;/span&gt;&lt;/a&gt; function to specify what arbitrary sequence you want the signal generator to produce.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;You must call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureOutputMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function  to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SEQ&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="body"&gt;An arbitrary sequence consists of multiple waveforms. For each waveform, you can specify the number of times that the signal generator produces the waveform before proceeding to the next waveform. The number of times to repeat a specific waveform is called the loop count.&lt;/p&gt;
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Sequence_Length">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Sequence Length&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;sequenceLength&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of waveforms in the new arbitrary sequence that you want to create. The value you pass must be between the minimum and maximum sequence lengths that the signal generator allows. You can obtain the minimum and maximum sequence lengths from &lt;strong&gt;minimumSequenceLength&lt;/strong&gt; and &lt;strong&gt;maximumSequenceLength&lt;/strong&gt; in the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_QueryArbSeqCapabilities.html')"&gt;&lt;span class="monospace"&gt;niFgen_QueryArbSeqCapabilities&lt;/span&gt;&lt;/a&gt; function.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handles_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Handles Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandlesArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of waveform handles from which you want to create a new arbitrary 
        /// sequence. The array must have at least as many elements as the value that you specify in 
        /// &lt;strong&gt;sequenceLength&lt;/strong&gt;. Each &lt;strong&gt;waveformHandlesArray&lt;/strong&gt; element has a 
        /// corresponding &lt;strong&gt;loopCountsArray&lt;/strong&gt; element that indicates how many times that 
        /// waveform is repeated. You obtain waveform handles when you create arbitrary waveforms with the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AllocateWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt; function or one of the following niFgen CreateWaveform functions:
        /// 
        /// &lt;ul&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileHWS.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileHWS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;/ul&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Loop_Counts_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Loop Counts Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;loopCountsArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of loop counts you want to use to create a new arbitrary sequence. The array must have at least as many elements as the value that you specify in the &lt;strong&gt;sequenceLength&lt;/strong&gt; parameter. Each &lt;strong&gt;loopCountsArray&lt;/strong&gt; element corresponds to a &lt;strong&gt;waveformHandlesArray&lt;/strong&gt; element and indicates how many times to repeat that waveform. Each element of the &lt;strong&gt;loopCountsArray&lt;/strong&gt; must be less than or equal to the maximum number of loop counts that the signal generator allows. You can obtain the maximum loop count from &lt;strong&gt;maximumLoopCount&lt;/strong&gt; in the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_QueryArbSeqCapabilities.html')"&gt;&lt;span class="monospace"&gt;niFgen_QueryArbSeqCapabilities&lt;/span&gt;&lt;/a&gt; function.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Sequence_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Sequence Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;sequenceHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Returns the handle that identifies the new arbitrary sequence.  You can pass this handle to &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureArbSequence.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureArbSequence&lt;/span&gt;&lt;/a&gt; to generate the arbitrary sequence.&lt;/td&gt;
        /// 
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CreateArbSequence(int Sequence_Length, int[] Waveform_Handles_Array, int[] Loop_Counts_Array, out int Sequence_Handle)
        {
            int pInvokeResult = PInvoke.CreateArbSequence(this._handle, Sequence_Length, Waveform_Handles_Array, Loop_Counts_Array, out Sequence_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CreateAdvancedArbSequence&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CreateAdvancedArbSequence&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CreateAdvancedArbSequence&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;sequenceLength, ViInt32[]&amp;nbsp;waveformHandlesArray, ViInt32[]&amp;nbsp;loopCountsArray, 
        /// ViInt32[]&amp;nbsp;sampleCountsArray, 
        /// ViInt32[]&amp;nbsp;markerLocationArray, 
        /// ViInt32[]&amp;nbsp;coercedMarkersArray, 
        /// ViInt32*&amp;nbsp;sequenceHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;
        /// 
        /// Creates an arbitrary sequence from an array of waveform handles and an array of corresponding loop counts. This function returns a handle that identifies the sequence. You pass this handle to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ConfigureArbSequence.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureArbSequence&lt;/span&gt;&lt;/a&gt; function to specify what arbitrary sequence you want the signal generator to produce.&lt;/p&gt;
        /// 
        /// &lt;p class="body"&gt;The &lt;span class="monospace"&gt;niFgen_CreateAdvancedArbSequence&lt;/span&gt; function extends on the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_CreateArbSequence.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateArbSequence&lt;/span&gt;&lt;/a&gt; function by adding the ability to set the number of samples in each sequence step and to set marker locations.&lt;/p&gt;
        /// 
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;The signal generator must not be in the Generating state when you call this function.&lt;br&gt;&lt;br&gt;You must call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureOutputMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function  to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SEQ&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="body"&gt;An arbitrary sequence consists of multiple waveforms. For each waveform, you specify the number of times the signal generator produces the waveform before proceeding to the next waveform. The number of times to repeat a specific waveform is called the loop count.&lt;/p&gt;
        /// 
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Sequence_Length">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Sequence Length&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;sequenceLength&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of waveforms in the new arbitrary sequence that you want to create. The value you pass must be between the minimum and maximum sequence lengths that the signal generator allows. You can obtain the minimum and maximum sequence lengths from &lt;strong&gt;minimumSequenceLength&lt;/strong&gt; and &lt;strong&gt;maximumSequenceLength&lt;/strong&gt; in the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_QueryArbSeqCapabilities.html')"&gt;&lt;span class="monospace"&gt;niFgen_QueryArbSeqCapabilities&lt;/span&gt;&lt;/a&gt; function.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handles_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Handles Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandlesArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of waveform handles from which you want to create a new arbitrary 
        /// sequence. The array must have at least as many elements as the value that you specify in 
        /// &lt;strong&gt;sequenceLength&lt;/strong&gt;. Each &lt;strong&gt;waveformHandlesArray&lt;/strong&gt; element has a 
        /// corresponding &lt;strong&gt;loopCountsArray&lt;/strong&gt; element that indicates how many times that 
        /// waveform is repeated. You obtain waveform handles when you create arbitrary waveforms with the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AllocateWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt; function or one of the following niFgen CreateWaveform functions:
        /// 
        /// &lt;ul&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileHWS.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileHWS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;/ul&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Loop_Counts_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Loop Counts Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;loopCountsArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of loop counts you want to use to create a new arbitrary sequence. The array must have at least as many elements as the value that you specify in the &lt;strong&gt;sequenceLength&lt;/strong&gt; parameter. Each &lt;strong&gt;loopCountsArray&lt;/strong&gt; element corresponds to a &lt;strong&gt;waveformHandlesArray&lt;/strong&gt; element and indicates how many times to repeat that waveform. Each element of the &lt;strong&gt;loopCountsArray&lt;/strong&gt; must be less than or equal to the maximum number of loop counts that the signal generator allows. You can obtain the maximum loop count from &lt;strong&gt;maximumLoopCount&lt;/strong&gt; in the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_QueryArbSeqCapabilities.html')"&gt;&lt;span class="monospace"&gt;niFgen_QueryArbSeqCapabilities&lt;/span&gt;&lt;/a&gt; function.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Sample_Counts_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Sample Counts Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;sampleCountsArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of sample counts that you want to use to create a new arbitrary sequence.  The array must have at least as many elements as the value you specify in the &lt;strong&gt;sequenceLength&lt;/strong&gt; parameter.  Each &lt;strong&gt;sampleCountsArray&lt;/strong&gt; element corresponds to a &lt;strong&gt;waveformHandlesArray&lt;/strong&gt; element and indicates the subset, in samples, of the given waveform to generate.  Each element of the &lt;strong&gt;sampleCountsArray&lt;/strong&gt; must be larger than the minimum waveform size, a multiple of the waveform quantum and no larger than the number of samples in the corresponding waveform.  You can obtain these values by calling the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_QueryArbWfmCapabilities.html')"&gt;&lt;span class="monospace"&gt;niFgen_QueryArbWfmCapabilities&lt;/span&gt;&lt;/a&gt; function. 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Marker_Location_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Marker Location Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;markerLocationArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of marker locations to where you want a marker to be generated in the sequence.  The array must have at least as many elements as the value you specify in the &lt;strong&gt;sequenceLength&lt;/strong&gt; parameter.  Each &lt;strong&gt;markerLocationArray&lt;/strong&gt; element corresponds to a &lt;strong&gt;waveformHandlesArray&lt;/strong&gt; element and indicates where in the waveform a marker is to generate.  The marker location must be less than the size of the waveform the marker is in.  The markers are coerced to the nearest marker quantum and the coerced values are returned in the &lt;strong&gt;coercedMarkersArray&lt;/strong&gt; parameter.
        /// 
        /// &lt;p class="Body"&gt;If you do not want a marker generated for a particular sequence stage, set this parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_NO_MARKER&lt;/span&gt;.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Defined Value&lt;/strong&gt;: &lt;span class="monospace"&gt;NIFGEN_VAL_NO_MARKER&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None
        /// &lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Coerced_Markers_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Coerced Markers Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;coercedMarkersArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Returns an array of all given markers that are coerced (rounded) to the nearest marker quantum. Not all devices coerce markers. 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Sequence_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Sequence Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;sequenceHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Returns the handle that identifies the new arbitrary sequence.  You can pass this handle to &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureArbSequence.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureArbSequence&lt;/span&gt;&lt;/a&gt; to generate the arbitrary sequence.&lt;/td&gt;
        /// 
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CreateAdvancedArbSequence(int Sequence_Length, int[] Waveform_Handles_Array, int[] Loop_Counts_Array, int[] Sample_Counts_Array, int[] Marker_Location_Array, int[] Coerced_Markers_Array, out int Sequence_Handle)
        {
            int pInvokeResult = PInvoke.CreateAdvancedArbSequence(this._handle, Sequence_Length, Waveform_Handles_Array, Loop_Counts_Array, Sample_Counts_Array, Marker_Location_Array, Coerced_Markers_Array, out Sequence_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureArbSequence&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureArbSequence&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureArbSequence&amp;nbsp;(ViSession&amp;nbsp;vi, VViConstString channelName,
        /// ViInt32 sequenceHandle, ViReal64 gain, ViReal64 offset;&lt;/span&gt;&lt;/p&gt;
        /// 
        /// 
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the signal generator attributes that affect arbitrary sequence generation. Sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ARB_SEQUENCE_HANDLE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ARB_SEQUENCE_HANDLE&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ARB_GAIN.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ARB_GAIN&lt;/span&gt;&lt;/a&gt;, and &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ARB_OFFSET.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ARB_OFFSET&lt;/span&gt;&lt;/a&gt; attributes.
        /// 
        /// &lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;
        /// &lt;td &gt;&lt;/td&gt;
        /// &lt;td&gt;You must call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureOutputMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function  to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SEQ&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name from which you want to configure an arbitrary sequence.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Sequence_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Sequence Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;sequenceHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// 
        /// &lt;td&gt;Specifies the handle of the arbitrary sequence that you want the signal generator to produce. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ARB_SEQUENCE_HANDLE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ARB_SEQUENCE_HANDLE&lt;/span&gt;&lt;/a&gt; attribute to this value. You can create an arbitrary sequence using the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_CreateArbSequence.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateArbSequence&lt;/span&gt;&lt;/a&gt; or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_CreateAdvancedArbSequence.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateAdvancedArbSequence&lt;/span&gt;&lt;/a&gt; function. These functions return a handle that you use to identify the sequence.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// </param>
        /// <param name="Gain">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Gain&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;gain&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the factor by which the signal generator scales the arbitrary waveforms in the sequence. When you create an arbitrary waveform, you must first normalize the data points to a range of &amp;#8211;1.00 to +1.00. You can use this parameter to scale the waveform to other ranges. The gain is applied before the offset is added.
        /// 
        /// &lt;p class="Body"&gt;For example, to configure the output signal to range from &amp;#8211;2.00 to +2.00&amp;nbsp;V, set &lt;strong&gt;gain&lt;/strong&gt; to 2.00.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: unitless&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Offset">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Offset&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;offset&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the value the signal generator adds to the arbitrary waveform data. When you create arbitrary waveforms, you must first normalize the data points to a range of &amp;#8211;1.00 to +1.00&amp;nbsp;V. You can use this parameter to shift the range of the arbitrary waveform. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_ARB_OFFSET.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_ARB_OFFSET&lt;/span&gt;&lt;/a&gt; attribute to this value.
        /// 
        /// &lt;p class="Body"&gt;For example, to configure the output signal to range from 0.00 to 2.00&amp;nbsp;V instead of &amp;#8211;1.00 to 1.00&amp;nbsp;V, set the offset to 1.00.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: volts&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureArbSequence(string Channel_Name, int Sequence_Handle, double Gain, double Offset)
        {
            int pInvokeResult = PInvoke.ConfigureArbSequence(this._handle, Channel_Name, Sequence_Handle, Gain, Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ClearArbSequence&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ClearArbSequence&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ClearArbSequence&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;sequenceHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Removes a previously created arbitrary sequence from the signal generator memory and invalidates the sequence handle.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;  The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Sequence_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Sequence Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;sequenceHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// 
        /// 
        /// 
        /// 
        /// &lt;td&gt;Specifies the handle of the arbitrary sequence that you want the signal generator to remove.  You can create an arbitrary sequence using the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateArbSequence.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateArbSequence&lt;/span&gt;&lt;/a&gt; or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateAdvancedArbSequence.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateAdvancedArbSequence&lt;/span&gt;&lt;/a&gt; function. These functions return a handle that you use to identify the sequence.
        /// 
        /// &lt;p class="body"&gt;&lt;strong&gt;Defined Value&lt;/strong&gt;:&lt;br&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_ALL_SEQUENCES&lt;/span&gt;&amp;#8212;Remove all sequences from the signal generator&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ClearArbSequence(int Sequence_Handle)
        {
            int pInvokeResult = PInvoke.ClearArbSequence(this._handle, Sequence_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ClearArbMemory&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ClearArbMemory&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ClearArbMemory&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Removes all previously created arbitrary waveforms, sequences, and scripts from the signal generator memory and invalidates all waveform handles, sequence handles, and waveform names.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;  The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ClearArbMemory()
        {
            int pInvokeResult = PInvoke.ClearArbMemory(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_AllocateWaveform&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_AllocateWaveform&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_AllocateWaveform&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;waveformSize, ViInt32*&amp;nbsp;waveformHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Specifies the size of a waveform so that it can be allocated in onboard memory before loading the associated data. Data can then be loaded in smaller blocks with the Write Binary 16 Waveform functions.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;&lt;/td&gt;
        /// &lt;td&gt;You must call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureOutputMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function  to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SEQ&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to allocate the waveform.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformSize&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies, in samples, the size of the waveform to allocate.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;The handle that identifies the new waveform.  This handle is used later when referring to this waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int AllocateWaveform(string Channel_Name, int Waveform_Size, out int Waveform_Handle)
        {
            int pInvokeResult = PInvoke.AllocateWaveform(this._handle, Channel_Name, Waveform_Size, out Waveform_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_SetWaveformNextWritePosition&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_SetWaveformNextWritePosition&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_SetWaveformNextWritePosition&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;waveformHandle, ViInt32&amp;nbsp;relativeto, ViInt32&amp;nbsp;offset);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Sets the position in the waveform at which the next waveform data is written. 
        /// This function allows you to write to arbitrary locations within the waveform. These settings 
        /// apply only to the next write to the waveform specified by the &lt;span class="bold"&gt;waveformHandle&lt;/span&gt; 
        /// parameter. Subsequent writes to that waveform begin where the last write left off, unless 
        /// this function is called again. The &lt;span class="bold"&gt;waveformHandle&lt;/span&gt; passed in must have been created by a call 
        /// to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AllocateWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt; function or one of the following
        /// niFgen CreateWaveform functions:&lt;/p&gt;
        /// 
        /// 
        /// &lt;ul&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileHWS.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileHWS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;/ul&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel on which to the waveform data should be loaded.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;waveformHandle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;
        /// Specifies the handle of the arbitrary waveform previously allocated with the 
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AllocateWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt; function. 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="relativeTo">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;relativeTo&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;relativeTo&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the reference position in the waveform. This position and &lt;strong&gt;offset&lt;/strong&gt; together determine where to start loading data into the waveform.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="Bordered"&gt;&lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WAVEFORM_POSITION_START&lt;/span&gt;&amp;nbsp;(0)  &lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Use the start of the waveform as the reference position.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WAVEFORM_POSITION_CURRENT&lt;/span&gt;&amp;nbsp;(1)&lt;/td&gt; 
        /// &lt;td class="Bordered"&gt;Use the current position within the waveform as the reference position.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="offset">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;offset&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;offset&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the offset from &lt;strong&gt;relativeTo&lt;/strong&gt; at which to start loading the data into the waveform.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int SetWaveformNextWritePosition(string Channel_Name, int Waveform_Handle, int relativeTo, int offset)
        {
            int pInvokeResult = PInvoke.SetWaveformNextWritePosition(this._handle, Channel_Name, Waveform_Handle, relativeTo, offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_WriteWaveform&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_WriteWaveform&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_WriteWaveform&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;waveformHandle, ViInt32&amp;nbsp;size, ViReal64[]&amp;nbsp;data);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Writes floating-point data to the waveform in onboard memory. 
        /// The waveform handle passed in must have been created by a call to the 
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AllocateWaveform.html')"&gt;&lt;span class="Monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt; function or one of the following 
        /// niFgen CreateWaveform functions:&lt;/p&gt;
        /// &lt;ul&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileHWS.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileHWS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;/ul&gt;
        /// &lt;p class="body"&gt;By default, the subsequent call to the &lt;span class="monospace"&gt;niFgen_WriteWaveform&lt;/span&gt; function continues writing data from the position of the last sample written. You can set the write position and offset by calling the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_SetWaveformNextWritePosition.html')"&gt;&lt;span class="monospace"&gt;niFgen_SetWaveformNextWritePosition&lt;/span&gt;&lt;/a&gt; function. If streaming is enabled, you can write more data than the allocated waveform size in onboard memory. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'streaming.html')"&gt;Streaming&lt;/a&gt; topic for more information about streaming data.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;The channel onto which the waveform data should be loaded. 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;waveformHandle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;
        /// Specifies the handle of the arbitrary waveform previously allocated with the
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AllocateWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt; function. 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;size&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of samples to load into the waveform.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: 0&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </param>
        /// <param name="Data">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Data&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;data&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data to load into the waveform. The array must have at least as many elements as the value in &lt;strong&gt;size&lt;/strong&gt;.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int WriteWaveform(string Channel_Name, int Waveform_Handle, int Size, double[] Data)
        {
            int pInvokeResult = PInvoke.WriteWaveform(this._handle, Channel_Name, Waveform_Handle, Size, Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_WriteWaveformComplexF64&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_WriteWaveformComplexF64&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_WriteWaveformComplexF64&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;numberofSamples, niFgen_ComplexF64[]&amp;nbsp;data, ViInt32&amp;nbsp;waveformHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Writes complex data to the waveform in onboard memory on devices with the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_OUTPUT_ENABLED.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_OUTPUT_ENABLED&lt;/span&gt;&lt;/a&gt; attribute set to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt; and the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_OSP_DATA_PROCESSING_MODE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_OSP_DATA_PROCESSING_MODE&lt;/span&gt;&lt;/a&gt; attribute set to &lt;span class="monospace"&gt;NIFGEN_VAL_OSP_COMPLEX&lt;/span&gt;. The waveform handle passed in must have been created by a call to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AllocateWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt; function or to one of the following niFgen Create Waveform functions:&lt;/p&gt;
        /// 
        /// &lt;ul&gt;
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileHWS.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileHWS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;/ul&gt;
        /// 
        /// 
        /// &lt;p class="body"&gt;By default, the subsequent call to the &lt;span class="monospace"&gt;niFgen_WriteWaveformComplexF64&lt;/span&gt; function continues writing data from the position of the last sample written. You can set the write position and offset by calling the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_SetWaveformNextWritePosition.html')"&gt;&lt;span class="monospace"&gt;niFgen_SetWaveformNextWritePosition&lt;/span&gt;&lt;/a&gt; function. If streaming is enabled, you can write more data than the allocated waveform size in onboard memory. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'streaming.html')"&gt;Streaming&lt;/a&gt; topic for more information about streaming data.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel onto which the waveform data should be loaded. 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Number_of_Samples">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Number of Samples&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;numberofSamples&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of samples to load into the waveform.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;0&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Data">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Data&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;data&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;niFgen_ComplexF64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data to load into the waveform. You must normalize the data points in the array to be between &amp;#8211;1.00 and +1.00. The array must have at least as many elements as the value in the &lt;strong&gt;numberOfSamples&lt;/strong&gt; parameter.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;waveformHandle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;
        /// Specifies the handle of the arbitrary waveform previously allocated with the  
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_AllocateWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt; function. 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int WriteWaveformComplexF64(string Channel_Name, int Number_of_Samples, nicomplexnumber[] Data, int Waveform_Handle)
        {
            int pInvokeResult = PInvoke.WriteWaveformComplexF64(this._handle, Channel_Name, Number_of_Samples, Data, Waveform_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_WriteBinary16Waveform&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_WriteBinary16Waveform&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_WriteBinary16Waveform&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;waveformHandle, ViInt32&amp;nbsp;size, ViInt16[]&amp;nbsp;data);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Writes binary data to the waveform in onboard memory. The waveform handle 
        /// passed must have been created by a call to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AllocateWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt;
        /// or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformI16&lt;/span&gt;&lt;/a&gt; function.&lt;/p&gt;
        /// &lt;p class="body"&gt;By default, the subsequent call to the &lt;span class="monospace"&gt;niFgen_WriteBinary16Waveform&lt;/span&gt; function continues writing data from the position of the last sample written. You can set the write position and offset by calling the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_SetWaveformNextWritePosition.html')"&gt;&lt;span class="monospace"&gt;niFgen_SetWaveformNextWritePosition&lt;/span&gt;&lt;/a&gt; function. If streaming is enabled, you can write more data than the allocated waveform size in onboard memory. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'streaming.html')"&gt;Streaming&lt;/a&gt; topic for more information about streaming data.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel on which to the waveform data should be loaded.  
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;waveformHandle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;
        /// Specifies the handle of the arbitrary waveform previously allocated with the 
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AllocateWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt; function. 
        /// &lt;/td&gt; 
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;size&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of samples to load into the waveform.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: 0&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </param>
        /// <param name="Data">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Data&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;data&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt16 []&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data to load into the waveform. The array must have at least as many elements as the value in &lt;strong&gt;size&lt;/strong&gt;. The binary data is left-justified.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int WriteBinary16Waveform(string Channel_Name, int Waveform_Handle, int Size, short[] Data)
        {
            int pInvokeResult = PInvoke.WriteBinary16Waveform(this._handle, Channel_Name, Waveform_Handle, Size, Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_WriteComplexBinary16Waveform&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_WriteComplexBinary16Waveform&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_WriteComplexBinary16Waveform&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;waveformHandle, ViInt32&amp;nbsp;size, NIComplexI16[]&amp;nbsp;data);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Writes binary data to the waveform in onboard memory. The waveform handle passed in must have been created by a call to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AllocateWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformI16&lt;/span&gt;&lt;/a&gt; function.&lt;/p&gt;
        /// &lt;p class="body"&gt;By default, the subsequent call to the &lt;span class="monospace"&gt;niFgen_WriteComplexBinary16Waveform&lt;/span&gt; function continues writing data from the position of the last sample written. You can set the write position and offset by calling the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_SetWaveformNextWritePosition.html')"&gt;&lt;span class="monospace"&gt;niFgen_SetWaveformNextWritePosition&lt;/span&gt;&lt;/a&gt; function. If streaming is enabled, you can write more data than the allocated waveform size in onboard memory. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'streaming.html')"&gt;Streaming&lt;/a&gt; topic for more information about streaming data.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies channel on which to the waveform data should be loaded.  
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;waveformHandle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;
        /// Specifies the handle of the arbitrary waveform previously allocated with the 
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AllocateWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt; function. 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;size&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of samples to load into the waveform.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: 0&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </param>
        /// <param name="Data">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Data&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;data&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;NIComplexI16&amp;nbsp;[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data to load into the waveform. The array must have at least as many elements as the value in &lt;strong&gt;size&lt;/strong&gt;. The binary data is left-justified.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int WriteComplexBinary16Waveform(string Channel_Name, int Waveform_Handle, int Size, short Data)
        {
            int pInvokeResult = PInvoke.WriteComplexBinary16Waveform(this._handle, Channel_Name, Waveform_Handle, Size, Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureReferenceClock&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureReferenceClock&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureReferenceClock&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;referenceClockSource, ViReal64&amp;nbsp;referenceClockFrequency);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the signal generator Reference Clock source and frequency. 
        /// 
        /// The signal generator uses the Reference Clock to tune the Sample Clock timebase of the signal generator so that the frequency stability and accuracy of the Sample Clock timebase matches that of the Reference Clock.&lt;/p&gt;
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Reference_Clock_Source">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Reference Clock Source&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;referenceClockSource&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the source for the Reference Clock.
        /// 
        /// 
        /// 
        /// For example, when you set this parameter to &amp;quot;ClkIn,&amp;quot; the signal generator uses the signal it receives at its CLK IN front panel connector as the Reference Clock. The Reference Clock phase-locks with the signal generator Sample Clock timebase to allow the frequency stability and accuracy of the Sample Clock timebase to match that of the Reference Clock.
        /// 
        /// 
        /// &lt;table class="Borderless"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif" alt="Note"&gt;&lt;/td&gt;
        /// &lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; The following &lt;strong&gt;Defined Values&lt;/strong&gt; are examples of possible Reference Clock sources. For a complete list of the Reference Clock sources available on your device, refer to the Routes topic for your device or the &lt;strong&gt;Device Routes&lt;/strong&gt; tab in MAX.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;br&gt;
        /// 
        /// &lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;None&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;No Reference Clock&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Clk&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;10 MHz backplane Reference Clock&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ClkIn&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;CLK IN front panel connector&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;OnboardReferenceClock&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Onboard Reference Clock&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;RTSI7&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;RTSI line 7&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;RefIn&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;REF IN front panel connector&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;/table&gt;
        /// &lt;br&gt;
        /// &lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;None&amp;quot;
        /// 
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Reference_Clock_Frequency">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Reference Clock Frequency&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;referenceClockFrequency&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;The Reference Clock frequency in hertz.
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: 10000000&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureReferenceClock(string Reference_Clock_Source, double Reference_Clock_Frequency)
        {
            int pInvokeResult = PInvoke.ConfigureReferenceClock(this._handle, Reference_Clock_Source, Reference_Clock_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureSampleClockSource&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureSampleClockSource&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureSampleClockSource&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;sampleClockSource);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Sets the source of the Sample Clock (Update Clock) of the signal generator.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Sample_Clock_Source">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;SampleClockSource&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;sampleClockSource&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the Sample Clock source the signal generator uses. &lt;br&gt;&lt;br&gt;
        /// 
        /// 
        /// &lt;table class="Borderless"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif" alt="Note"&gt;&lt;/td&gt;
        /// &lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; The following &lt;strong&gt;Defined Values&lt;/strong&gt; are examples of possible Sample Clock sources. For a complete list of the Sample Clock sources available on your device, refer to the Routes topic for your device or the &lt;strong&gt;Device Routes&lt;/strong&gt; tab in MAX.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;br&gt;
        /// &lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;OnboardClock&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Onboard Clock&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ClkIn&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;CLK IN front panel connector&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Star&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PXI star trigger line&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig0&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 0 or RTSI line 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig1&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 1 or RTSI line 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig2&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 2 or RTSI line 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig3&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 3 or RTSI line 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig4&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 4 or RTSI line 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig5&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 5 or RTSI line 5&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig6&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 6 or RTSI line 6&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig7&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 7 or RTSI line 7&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;DDC_ClkIn&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Sample Clock from DDC connector&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;/table&gt;
        /// 
        /// &lt;br&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;OnboardClock&amp;quot;
        /// 
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureSampleClockSource(string Sample_Clock_Source)
        {
            int pInvokeResult = PInvoke.ConfigureSampleClockSource(this._handle, Sample_Clock_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureClockMode&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureClockMode&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureClockMode&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;clockMode);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Selects the clock mode for the signal generator.  &lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;Some signal generators allow you to switch the Sample Clock to High-Resolution or Automatic Sampling mode with this function.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;When you select &lt;span class="monospace"&gt;NIFGEN_VAL_DIVIDE_DOWN&lt;/span&gt;, NI-FGEN rounds the sample rate to a frequency that can be achieved by dividing down the board clock (Sample Clock timebase). However, if you select &lt;span class="monospace"&gt;NIFGEN_VAL_HIGH_RESOLUTION&lt;/span&gt;, you can set the sample rate to any value. If you select &lt;span class="monospace"&gt;NIFGEN_VAL_AUTOMATIC&lt;/span&gt;, NI-FGEN selects the clock mode based on the sample rate, using divide-down sampling when possible.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;&lt;/td&gt;
        /// &lt;td&gt;You must call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureOutputMode.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureOutputMode&lt;/span&gt;&lt;/a&gt; function  to set the &lt;strong&gt;outputMode&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SEQ&lt;/span&gt;, &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_ARB&lt;/span&gt;, or &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SCRIPT&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Clock_Mode">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Clock Mode&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;clockMode&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Sets the clock mode of the signal generator. 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="bordered"&gt;&lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_DIVIDE_DOWN&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;&lt;strong&gt;Divide down sampling&lt;/strong&gt;&amp;#8212;Sample rates are generated by dividing the source frequency.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_HIGH_RESOLUTION&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;&lt;strong&gt;High resolution sampling&lt;/strong&gt;&amp;#8212;Sample rate is generated by a high-resolution clock source.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_AUTOMATIC&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;&lt;strong&gt;Automatic Selection&lt;/strong&gt;&amp;#8212;NI-FGEN selects between the divide-down and high-resolution clocking modes.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;NIFGEN_VAL_HIGH_RESOLUTION&lt;/span&gt; (NI 5450, NI 5451), &lt;span class="monospace"&gt;NIFGEN_VAL_DIVIDE_DOWN&lt;/span&gt; (all other devices)&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureClockMode(int Clock_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureClockMode(this._handle, Clock_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_AdjustSampleClockRelativeDelay&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_AdjustSampleClockRelativeDelay&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_AdjustSampleClockRelativeDelay&amp;nbsp;(ViSession&amp;nbsp;vi, ViReal64&amp;nbsp;adjustmentTime);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Delays (or phase shifts) the Sample Clock, which delays the generated signal.  Delaying the Sample Clock can be useful when synchronizing the output of multiple modules or when intentionally phase shifting the output relative to a fixed reference, such as the PLL Reference Clock. &lt;/p&gt; 
        /// &lt;p class="Body"&gt;Adjustment time can be positive or negative, but it must be less than or equal to the Sample Clock period.  The delay takes effect immediately after this function is called.  To delay an external Sample Clock, use the 
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_SAMPLE_CLOCK_ABSOLUTE_DELAY.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_SAMPLE_CLOCK_ABSOLUTE_DELAY&lt;/span&gt;&lt;/a&gt; attribute.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Adjustment_Time">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Adjustment Time&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;adjustmentTime&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the amount of time to adjust the Sample Clock delay.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: Seconds&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: 0&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int AdjustSampleClockRelativeDelay(double Adjustment_Time)
        {
            int pInvokeResult = PInvoke.AdjustSampleClockRelativeDelay(this._handle, Adjustment_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureDigitalEdgeStartTrigger&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureDigitalEdgeStartTrigger&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureDigitalEdgeStartTrigger&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;source, ViInt32&amp;nbsp;edge);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the Start Trigger for digital edge triggering.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Source">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Source&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;source&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies which trigger source the signal generator uses.
        /// &lt;p class="body"&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/p&gt;
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI0&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI1&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI2&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI3&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI4&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI5&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 5&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI6&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 6&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI7&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 7&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig0&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 0 or RTSI line 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig1&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 1 or RTSI line 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig2&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 2 or RTSI line 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig3&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 3 or RTSI line 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig4&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 4 or RTSI line 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig5&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 5 or RTSI line 5&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig6&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 6 or RTSI line 6&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig7&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 7 or RTSI line 7&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Star&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PXI star trigger line&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// 
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:  &amp;quot;PFI0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;
        /// &lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Edge">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Edge&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;edge&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the edge to detect. 
        /// 
        /// &lt;p class="body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RISING_EDGE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Occurs when the signal transitions from low level to high level.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_FALLING_EDGE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Occurs when the signal transitions from high level to low level.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;p class="body"&gt;&lt;strong&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:&lt;/strong&gt;
        /// &lt;span class="monospace"&gt;NIFGEN_VAL_RISING_EDGE&lt;/span&gt;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureDigitalEdgeStartTrigger(string Source, int Edge)
        {
            int pInvokeResult = PInvoke.ConfigureDigitalEdgeStartTrigger(this._handle, Source, Edge);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureP2PEndpointFullnessStartTrigger&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureP2PEndpointFullnessStartTrigger&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureP2PEndpointFullnessStartTrigger&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;p2pEndpointFullnessLevel);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the Start Trigger for to detect peer-to-peer endpoint fullness. Generation begins when the number of samples in the peer-to-peer endpoint reaches the threshold indicated by the &lt;strong&gt;p2pEndpointFullnessLevel&lt;/strong&gt; parameter.
        /// 
        /// &lt;/p&gt;
        /// &lt;table class="Borderless"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif" alt="Note"&gt;&lt;/td&gt;
        /// &lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Because there is an additional internal FIFO in the signal generator, the writer peer must actually write 2,304 bytes more than the quantity of data specified by this function to satisfy the trigger level.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="p2pEndpointFullnessLevel">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;p2pEndpointFullnessLevel&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;p2pEndpointFullnessLevel&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the quantity of data in the FIFO endpoint that asserts the trigger. The value&amp;nbsp;&lt;span class="monospace"&gt;&amp;#8211;1&lt;/span&gt; specifies that NI-FGEN uses a default value based on your endpoint configuration.
        /// 
        /// &lt;p class="body"&gt;&lt;strong&gt;Units&lt;/strong&gt;: samples per channel&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureP2PEndpointFullnessStartTrigger(int p2pEndpointFullnessLevel)
        {
            int pInvokeResult = PInvoke.ConfigureP2PEndpointFullnessStartTrigger(this._handle, p2pEndpointFullnessLevel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureSoftwareEdgeStartTrigger&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureSoftwareEdgeStartTrigger&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureSoftwareEdgeStartTrigger&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the Start Trigger for software edge triggering.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureSoftwareEdgeStartTrigger()
        {
            int pInvokeResult = PInvoke.ConfigureSoftwareEdgeStartTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_DisableStartTrigger&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_DisableStartTrigger&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_DisableStartTrigger&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Disables the Start Trigger.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int DisableStartTrigger()
        {
            int pInvokeResult = PInvoke.DisableStartTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureDigitalEdgeScriptTrigger&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureDigitalEdgeScriptTrigger&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureDigitalEdgeScriptTrigger&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;triggerID, ViConstString&amp;nbsp;source, ViInt32&amp;nbsp;edge);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the specified Script Trigger for digital edge triggering.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Trigger_ID">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Trigger ID&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;triggerID&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the Script Trigger used for triggering.
        /// &lt;p class="body"&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/p&gt;
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger0&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 0&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger1&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 1&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger2&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 2&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger3&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 3&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;ScriptTrigger0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;
        /// &lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Source">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Source&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;source&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies which trigger source the signal generator uses.
        /// &lt;p class="body"&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/p&gt;
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI0&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI1&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI2&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI3&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI4&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI5&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 5&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI6&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 6&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI7&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 7&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig0&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 0 or RTSI line 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig1&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 1 or RTSI line 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig2&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 2 or RTSI line 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig3&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 3 or RTSI line 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig4&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 4 or RTSI line 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig5&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 5 or RTSI line 5&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig6&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 6 or RTSI line 6&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig7&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 7 or RTSI line 7&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Star&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PXI star trigger line&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// 
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:  &amp;quot;PFI0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;
        /// &lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Edge">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Edge&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;edge&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the edge to detect. 
        /// 
        /// &lt;p class="body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RISING_EDGE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Occurs when the signal transitions from low level to high level.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_FALLING_EDGE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Occurs when the signal transitions from high level to low level.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;p class="body"&gt;&lt;strong&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:&lt;/strong&gt;
        /// &lt;span class="monospace"&gt;NIFGEN_VAL_RISING_EDGE&lt;/span&gt;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureDigitalEdgeScriptTrigger(string Trigger_ID, string Source, int Edge)
        {
            int pInvokeResult = PInvoke.ConfigureDigitalEdgeScriptTrigger(this._handle, Trigger_ID, Source, Edge);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureDigitalLevelScriptTrigger&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureDigitalLevelScriptTrigger&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureDigitalLevelScriptTrigger&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;triggerID, ViConstString&amp;nbsp;source, ViInt32&amp;nbsp;triggerWhen);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the specified Script Trigger for digital level triggering.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Trigger_ID">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Trigger ID&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;triggerID&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the Script Trigger used for triggering.
        /// &lt;p class="body"&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/p&gt;
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger0&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 0&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger1&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 1&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger2&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 2&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger3&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 3&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;ScriptTrigger0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;
        /// &lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Source">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Source&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;source&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies which trigger source the signal generator uses.
        /// &lt;p class="body"&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/p&gt;
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI0&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI1&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI2&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI3&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI4&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI5&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 5&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI6&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 6&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PFI7&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PFI 7&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig0&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 0 or RTSI line 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig1&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 1 or RTSI line 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig2&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 2 or RTSI line 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig3&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 3 or RTSI line 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig4&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 4 or RTSI line 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig5&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 5 or RTSI line 5&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig6&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 6 or RTSI line 6&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Trig7&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI trigger line 7 or RTSI line 7&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;PXI_Star&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;PXI star trigger line&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// 
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:  &amp;quot;PFI0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;
        /// &lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Trigger_When">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Trigger When&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;triggerWhen&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies whether the Script Trigger asserts on a high or low digital level.
        /// &lt;p class="body"&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/p&gt;
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;HighLevel&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger asserts on a high digital level.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;LowLevel&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger asserts on a low digital level.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;HighLevel&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureDigitalLevelScriptTrigger(string Trigger_ID, string Source, int Trigger_When)
        {
            int pInvokeResult = PInvoke.ConfigureDigitalLevelScriptTrigger(this._handle, Trigger_ID, Source, Trigger_When);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureSoftwareEdgeScriptTrigger&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureSoftwareEdgeScriptTrigger&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureSoftwareEdgeScriptTrigger&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;triggerID);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the specified Script Trigger for software edge triggering.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Trigger_ID">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Trigger ID&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;triggerID&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the Script Trigger used for triggering.
        /// &lt;p class="body"&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/p&gt;
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger0&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 0&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger1&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 1&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger2&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 2&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger3&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 3&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;ScriptTrigger0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;
        /// &lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureSoftwareEdgeScriptTrigger(string Trigger_ID)
        {
            int pInvokeResult = PInvoke.ConfigureSoftwareEdgeScriptTrigger(this._handle, Trigger_ID);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_DisableScriptTrigger&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_DisableScriptTrigger&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_DisableScriptTrigger&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;triggerID);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Disables the specified Script Trigger.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Trigger_ID">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Trigger ID&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;triggerID&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the Script Trigger used for triggering.
        /// &lt;p class="body"&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/p&gt;
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger0&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 0&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger1&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 1&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger2&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 2&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger3&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 3&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;ScriptTrigger0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;
        /// &lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int DisableScriptTrigger(string Trigger_ID)
        {
            int pInvokeResult = PInvoke.DisableScriptTrigger(this._handle, Trigger_ID);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureTriggerMode&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureTriggerMode&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureTriggerMode&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;triggerMode);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Sets the trigger mode for your device. Refer to the &lt;em&gt;Trigger Modes&lt;/em&gt; topic for your device in the &lt;em&gt;NI&amp;nbsp;Signal Generators Help&lt;/em&gt; for descriptions of the specific behavior for supported trigger modes.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif" alt="Note"&gt;&lt;/td&gt;
        /// &lt;td&gt;&lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;The signal generator must not be in the Generating state when you call this function.&lt;br&gt;&lt;br&gt;
        /// In Frequency List output mode, Stepped trigger mode is the same as Burst trigger mode.
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to configure the trigger mode.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Trigger_Mode">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Trigger Mode&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;triggerMode&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the trigger mode.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="Bordered"&gt;&lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_SINGLE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;The waveform that you describe in the sequence list generates only once by going through the entire staging list. Only one trigger is required to start the waveform generation. You can use Single trigger mode in any output mode. After a trigger is received, the waveform generation starts from the first stage and continues through to the last stage.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_CONTINUOUS&lt;/span&gt;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;The waveform that you describe in the staging list generates infinitely by repeatedly cycling through the staging list. After a trigger is received, the waveform generation starts from the first stage and continues through to the last stage. After the last stage is completed, the waveform generation loops back to the start of the first stage and continues until it is stopped. Only one trigger is required to start the waveform generation.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_STEPPED&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;After a Start Trigger is received, the waveform described by the first stage generates. Then, the device waits for the next trigger signal. On the next trigger, the waveform described by the second stage generates, and so on. After the staging list is exhausted, the waveform generation returns to the first stage and continues to repeat the cycle.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_BURST&lt;/span&gt;&lt;/td&gt;
        /// &lt;td&gt;After a Start Trigger is received, the waveform described by the first stage generates until another trigger is received. At the next trigger, the buffer of the previous stage completes, then the waveform described by the second stage generates. After the staging list is exhausted, the waveform generation returns to the first stage and continues to repeat the cycle. In Frequency List mode, the duration instruction is ignored, and the trigger switches the frequency to the next frequency in the list.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;NIFGEN_VAL_CONTINUOUS&lt;/span&gt;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureTriggerMode(string Channel_Name, int Trigger_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerMode(this._handle, Channel_Name, Trigger_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_SendSoftwareEdgeTrigger&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_SendSoftwareEdgeTrigger&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_SendSoftwareEdgeTrigger&amp;nbsp;(ViSession&amp;nbsp;vi, viInt32&amp;nbsp;trigger, viConstString&amp;nbsp;triggerID);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Sends a command to trigger the signal generator. This VI can act as an override for an external edge trigger. 
        /// &lt;/p&gt;
        /// 
        /// &lt;table class="Borderless"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif" alt="Note"&gt;&lt;/td&gt;
        /// &lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;This VI does not override external digital edge triggers of the NI&amp;nbsp;5401/5411/5431.
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Trigger">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Trigger&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;trigger&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the type of trigger to send.
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_START_TRIGGER&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Transitions the device from an Idle state to a Generation state where the device can respond to Sample clocks.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_SCRIPT_TRIGGER&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Allows you to create sophisticated generation operations that are determined by the generation script.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;NIFGEN_VAL_START_TRIGGER&lt;/span&gt;&lt;/p&gt;
        /// &lt;/td&gt;
        /// 
        /// 
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Trigger_ID">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Trigger ID&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;triggerID&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Identifies the specific trigger to use.
        /// &lt;p class="body"&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/p&gt;
        /// &lt;table class="bordered"&gt;&lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;None&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;None&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger0&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 0&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger1&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 1&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger2&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 2&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger3&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 3&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;p class="body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;None&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int SendSoftwareEdgeTrigger(int Trigger, string Trigger_ID)
        {
            int pInvokeResult = PInvoke.SendSoftwareEdgeTrigger(this._handle, Trigger, Trigger_ID);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureSynchronization&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureSynchronization&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureSynchronization&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;synchronizationSource);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Sets the signal generator to receive a synchronization signal to synchronize two or more NI&amp;nbsp;5401/5411/5431 signal generators. One signal generator should route a SYNC signal to a RTSI line by calling the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ExportSignal.html')"&gt;&lt;span class="monospace"&gt;niFgen_ExportSignal&lt;/span&gt;&lt;/a&gt; function (use the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_RouteSignalOut.html')"&gt;&lt;span class="monospace"&gt;niFgen_RouteSignalOut&lt;/span&gt;&lt;/a&gt; function for the NI 5404), and other signal generators should receive the signal by calling the &lt;span class="monospace"&gt;niFgen_ConfigureSynchronization&lt;/span&gt; function.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;The signal generator must not be in the Generating state when you call this function.&lt;br&gt;&lt;br&gt;
        /// Only the NI&amp;nbsp;5401/5411/5431 signal generators require this function to be called for proper synchronization.
        /// &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to configure the synchronization signal.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Synchronization_Source">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Synchronization Source&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;synchronizationSource&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specify the source of the synchronization signal you want to use. 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="Bordered"&gt;&lt;tr&gt;&lt;td&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_NONE&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Specifies that no synchronization source is used.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_0&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Specifies that RTSI 0 or PXI_Trig 0 is used as the synchronization source.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_1&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Specifies that RTSI 1 or PXI_Trig 1 is used as the synchronization source.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_2&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Specifies that RTSI 2 or PXI_Trig 2 is used as the synchronization source.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_3&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Specifies that RTSI 3 or PXI_Trig 3 is used as the synchronization source.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_4&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Specifies that RTSI 4 or PXI_Trig 4 is used as the synchronization source.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_5&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Specifies that RTSI 5 or PXI_Trig 5 is used as the synchronization source.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_6&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Specifies that RTSI 6 or PXI_Trig 6 is used as the synchronization source.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_TTL0&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Specifies that TTL 0 is used as the synchronization source.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_TTL1&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Specifies that TTL 1 is used as the synchronization source.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_TTL2&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Specifies that TTL 2 is used as the synchronization source.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_TTL3&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Specifies that TTL 3 is used as the synchronization source.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_TTL4&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Specifies that TTL 4 is used as the synchronization source.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_TTL5&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Specifies that TTL 5 is used as the synchronization source.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_TTL6&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Specifies that TTL 6 is used as the synchronization source.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;NIFGEN_VAL_NONE&lt;/span&gt;&lt;/p&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureSynchronization(string Channel_Name, int Synchronization_Source)
        {
            int pInvokeResult = PInvoke.ConfigureSynchronization(this._handle, Channel_Name, Synchronization_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ExportSignal&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ExportSignal&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus&amp;nbsp;niFgen_ExportSignal&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;signal, ViConstString&amp;nbsp;signalIdentifier, ViConstString&amp;nbsp;outputTerminal);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Routes signals (clocks, triggers, and events) to the output terminal you specify.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;Any routes created within a session persist after the session closes to prevent signal glitching. To unconfigure signal routes created in previous sessions, set &lt;strong&gt;resetDevice&lt;/strong&gt; in the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt; function to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt; or use the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ResetDevice.html')"&gt;&lt;span class="monospace"&gt;niFgen_ResetDevice&lt;/span&gt;&lt;/a&gt; function.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If you export a signal with this function and commit the session, the signal is routed to the output terminal you specify.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Signal">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;signal&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;signal&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the source of the signal to route.&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;
        /// 
        /// &lt;table class="bordered"&gt;
        /// 
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_ONBOARD_REFERENCE_CLOCK&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Onboard 10 MHz synchronization clock (PCI only)&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_SYNC_OUT&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;SYNC OUT signal &lt;br&gt;&lt;br&gt;The SYNC OUT signal is normally generated on the SYNC OUT front panel connector.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_START_TRIGGER&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Start Trigger&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_MARKER_EVENT&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Marker Event&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_SAMPLE_CLOCK_TIMEBASE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;The clock from which the Sample Clock is derived&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_SYNCHRONIZATION&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Synchronization strobe (NI 5404/5411/5431 only) &lt;br&gt;&lt;br&gt;A synchronization strobe is used to guarantee absolute synchronization between two or more signal generators.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_SAMPLE_CLOCK&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Sample Clock&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_REFERENCE_CLOCK&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;PLL Reference Clock&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_SCRIPT_TRIGGER&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_READY_FOR_START_EVENT&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Ready For Start Event&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_STARTED_EVENT&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Started Event&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_DONE_EVENT&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Done Event&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_DATA_MARKER_EVENT&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Data Marker Event&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// 
        /// &lt;/table&gt;
        /// 
        /// &lt;/td&gt;
        /// &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Signal_Identifier">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;signalIdentifier&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;signalIdentifier&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies which instance of the selected signal to export.
        /// 
        /// &lt;br&gt;&lt;br&gt;
        /// &lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;&amp;quot; (empty string)&lt;/td&gt;&lt;td class="bordered"&gt;Default (for non instance-based signals)&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger0&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger1&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger2&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;ScriptTrigger3&amp;quot;&lt;/td&gt;&lt;td class="bordered"&gt;Script Trigger 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;Marker0&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Marker 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;Marker1&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Marker 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;Marker2&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Marker 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;Marker3&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Marker 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;DataMarker0&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Data Marker 0*&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;DataMarker1&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Data Marker 1*&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;DataMarker2&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Data Marker 2*&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&amp;quot;DataMarker3&amp;quot;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Data Marker 3*&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered" colspan="2"&gt;* These Data Marker values apply only to single-channel devices or to multichannel devices that are configured for single-channel operation. When using a device that is configured for multichannel operation, specify the channel number along with the signal identifier. For example, to export Data Marker 0 on channel 1 of a device configured for multichannel operation, use the value &amp;#34;1/ DataMarker0.&amp;#34; If you do not specify a channel when using a device configured for multichannel generation, DataMarker0  generates on all channels.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;/table&gt;
        /// 
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Output_Terminal">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;outputTerminal&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;outputTerminal&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the output terminal to export the signal.
        /// 
        /// &lt;br&gt;
        /// 
        /// &lt;table class="Borderless"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif" alt="Note"&gt;&lt;/td&gt;
        /// &lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; The following &lt;strong&gt;Defined Values&lt;/strong&gt; are examples of possible output terminals. For a complete list of the output terminals available on your device, refer to the Routes topic for your device or the &lt;strong&gt;Device Routes&lt;/strong&gt; tab in MAX.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;br&gt;
        /// &lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;&amp;quot;&amp;quot; (empty string)&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Do not export signal&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;&amp;quot;PFI0&amp;quot;&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;PFI line 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;&amp;quot;PFI1&amp;quot;&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;PFI line 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;&amp;quot;PFI4&amp;quot;&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;PFI line 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;&amp;quot;PFI5&amp;quot;&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;PFI line 5&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;&amp;quot;PXI_Trig0&amp;quot;&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI or RTSI line 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;&amp;quot;PXI_Trig1&amp;quot;&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI or RTSI line 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;&amp;quot;PXI_Trig2&amp;quot;&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI or RTSI line 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;&amp;quot;PXI_Trig3&amp;quot;&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI or RTSI line 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;&amp;quot;PXI_Trig4&amp;quot;&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI or RTSI line 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;&amp;quot;PXI_Trig5&amp;quot;&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI or RTSI line 5&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;&amp;quot;PXI_Trig6&amp;quot;&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI or RTSI line 6&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;&amp;quot;PXI_Trig7&amp;quot;&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI or RTSI line 7&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;&amp;quot;DDC_ClkOut&amp;quot;&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Clock out from DDC connector&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;&amp;quot;PXI_Star&amp;quot;&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;PXI star trigger line&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// 
        /// &lt;/table&gt;
        /// 
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ExportSignal(int Signal, string Signal_Identifier, string Output_Terminal)
        {
            int pInvokeResult = PInvoke.ExportSignal(this._handle, Signal, Signal_Identifier, Output_Terminal);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_RouteSignalOut&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_RouteSignalOut&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_RouteSignalOut&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;routeSignalFrom, ViInt32&amp;nbsp;routeSignalTo);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Routes various signals in the signal generator to the RTSI lines and front 
        /// panel terminals. &lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// You can clear a previously routed signal by routing &lt;span class="monospace"&gt;NIFGEN_VAL_NONE&lt;/span&gt; to the destination terminal.
        /// &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to route a signal.
        /// 
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Route_Signal_From">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Route Signal From&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;routeSignalFrom&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Various signals can be routed out the RTSI lines.  
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="bordered"&gt;&lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_NONE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Nothing &lt;br&gt;&lt;br&gt;Sending this value clears the line.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_MARKER&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Marker Event&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_SYNC_OUT&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;SYNC signal &lt;br&gt;&lt;br&gt;This signal normally appears on the SYNC OUT front panel connector.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_OUT_START_TRIGGER&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Start Trigger &lt;br&gt;&lt;br&gt;The Start Trigger is normally generated at the start of the sequence. Call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureTriggerSource.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureTriggerSource&lt;/span&gt;&lt;/a&gt; function to receive this trigger.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_BOARD_CLOCK&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Signal generator board clock &lt;br&gt;&lt;br&gt;The signal generator board clock is 20&amp;nbsp;MHz for the NI&amp;nbsp;PCI-5401/5411/5431. The NI&amp;nbsp;PXI-5404 has a 20&amp;nbsp;MHz board clock, and the NI&amp;nbsp;PXI-5421 has integer divisors of 100&amp;nbsp;MHz. The NI&amp;nbsp;PXI-5401/5411/5431 does not support routing a Board Clock to RTSI lines or front panel connectors.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_SYNCHRONIZATION&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Synchronization strobe &lt;br&gt;&lt;br&gt;A synchronization strobe is used to guarantee absolute synchronization between two or more signal generators. Call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureSynchronization.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureSynchronization&lt;/span&gt;&lt;/a&gt; function to receive the strobe.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_SOFTWARE_TRIG&lt;/span&gt;&lt;/td&gt;
        /// &lt;td&gt;Software trigger&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_OUT_UPDATE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;&amp;#8212;&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_REF_OUT&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Reference Clock out front panel connector&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PXI_CLK10&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI 10&amp;nbsp;MHz backplane Reference Clock&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PXI_STAR&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI star trigger line&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PFI_0&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PFI 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_0&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 0 or PXI_Trig 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_1&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 1 or PXI_Trig 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_2&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 2 or PXI_Trig 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_3&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 3 or PXI_Trig 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_4&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 4 or PXI_Trig 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_5&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 5 or PXI_Trig 5&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_6&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 6 or PXI_Trig 6&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_7&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 7 or PXI_Trig 7&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_REF_CLOCK_RTSI_CLOCK&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI clock&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_ONBOARD_REFERENCE_CLOCK&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Onboard Reference Clock&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_UPDATE_CLOCK&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Sample Clock&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PLL_REF_SOURCE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PLL Reference Clock&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Route_Signal_To">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Route Signal To&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;routeSignalTo&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;The possible RTSI lines to which you can route a signal.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="bordered"&gt;&lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_0&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 0 or PXI_Trig 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_1&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 1 or PXI_Trig 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_2&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 2 or PXI_Trig 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_3&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 3 or PXI_Trig 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_4&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 4 or PXI_Trig 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_5&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 5 or PXI_Trig 5&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_6&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 6 or PXI_Trig 6&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_7&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI 7 or PXI_Trig 7&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_REF_CLOCK_RTSI_CLOCK&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;RTSI clock&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_REF_OUT&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Reference Clock out front panel connector&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PFI_0&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PFI 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PFI_1&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PFI 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PFI_4&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PFI 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PFI_5&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PFI 5&lt;/td&gt;&lt;/tr&gt;
        ///  
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PXI_STAR&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI star trigger line&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PXI_CLK10&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;PXI 10&amp;nbsp;MHz backplane Reference Clock&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;/table&gt;
        /// 
        /// &lt;/td&gt;
        /// 
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int RouteSignalOut(string Channel_Name, int Route_Signal_From, int Route_Signal_To)
        {
            int pInvokeResult = PInvoke.RouteSignalOut(this._handle, Channel_Name, Route_Signal_From, Route_Signal_To);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_AllocateNamedWaveform&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_AllocateNamedWaveform&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_AllocateNamedWaveform&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViConstString&amp;nbsp;waveformName, ViInt32&amp;nbsp;waveformSize);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Specifies the size of a named waveform up front so that it can be allocated in onboard memory before loading the associated data. Data can then be loaded in smaller blocks with the niFgen Write (Binary16) Waveform functions.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to allocate the named waveform.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Name&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name to associate with the allocated waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformSize&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the size of the waveform to allocate in samples.
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;4096&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int AllocateNamedWaveform(string Channel_Name, string Waveform_Name, int Waveform_Size)
        {
            int pInvokeResult = PInvoke.AllocateNamedWaveform(this._handle, Channel_Name, Waveform_Name, Waveform_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_SetNamedWaveformNextWritePosition&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_SetNamedWaveformNextWritePosition&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_SetNamedWaveformNextWritePosition&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViConstString&amp;nbsp;waveformName, ViInt32&amp;nbsp;relativeto, ViInt32&amp;nbsp;offset);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Sets the position in the waveform to which data is written at the next write. This function allows you to write to arbitrary locations within the waveform. These settings apply only to the next write to the waveform specified by the &lt;strong&gt;waveformHandle&lt;/strong&gt; parameter. Subsequent writes to that waveform begin where the last write left off, unless this function is called again. The &lt;strong&gt;waveformHandle&lt;/strong&gt; passed in must have been created with a call to one of the following functions:&lt;/p&gt;
        /// 
        /// &lt;ul&gt;
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AllocateWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt;&lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileHWS.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileHWS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// &lt;/ul&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel onto which the waveform data should be loaded.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Name&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name to associate with the allocated waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="relativeTo">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;relativeTo&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;relativeTo&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the reference position in the waveform. This position and &lt;strong&gt;offset&lt;/strong&gt; together determine where to start loading data into the waveform.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="Bordered"&gt;&lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WAVEFORM_POSITION_START&lt;/span&gt;&amp;nbsp;(0)  &lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Use the start of the waveform as the reference position.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WAVEFORM_POSITION_CURRENT&lt;/span&gt;&amp;nbsp;(1)&lt;/td&gt; 
        /// &lt;td class="Bordered"&gt;Use the current position within the waveform as the reference position.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="offset">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Offset&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;offset&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the offset from the &lt;strong&gt;relativeTo&lt;/strong&gt; parameter at which to start loading the data into the waveform.
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int SetNamedWaveformNextWritePosition(string Channel_Name, string Waveform_Name, int relativeTo, int offset)
        {
            int pInvokeResult = PInvoke.SetNamedWaveformNextWritePosition(this._handle, Channel_Name, Waveform_Name, relativeTo, offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_WriteNamedWaveformF64&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_WriteNamedWaveformF64&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_WriteNamedWaveformF64&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViConstString&amp;nbsp;waveformName, ViInt32&amp;nbsp;size, ViReal64[]&amp;nbsp;data);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Writes floating-point data to the waveform in onboard memory.  The waveform handle passed in must have been created by a call to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AllocateWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt; function or to one of the following niFgen Create Waveform functions:
        /// 
        /// &lt;ul&gt;
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileHWS.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileHWS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
        /// 
        /// &lt;p class="body"&gt;By default, the subsequent call to the &lt;span class="monospace"&gt;niFgen_WriteNamedWaveformF64&lt;/span&gt; function continues writing data from the position of the last sample written. You can set the write position and offset by calling the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_SetNamedWaveformNextWritePosition.html')"&gt;&lt;span class="monospace"&gt;niFgen_SetNamedWaveformNextWritePosition&lt;/span&gt;&lt;/a&gt; function. If streaming is enabled, you can write more data than the allocated waveform size in onboard memory. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'streaming.html')"&gt;Streaming&lt;/a&gt; topic for more information about streaming data.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel onto which the waveform data should be loaded.  
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Name&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name to associate with the allocated waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;size&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of samples to load into the waveform.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: 0&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </param>
        /// <param name="Data">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Data&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;data&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64 []&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data to load into the waveform. The array must have at least as many elements as the value in &lt;strong&gt;size&lt;/strong&gt;.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int WriteNamedWaveformF64(string Channel_Name, string Waveform_Name, int Size, double[] Data)
        {
            int pInvokeResult = PInvoke.WriteNamedWaveformF64(this._handle, Channel_Name, Waveform_Name, Size, Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_WriteNamedWaveformI16&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_WriteNamedWaveformI16&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_WriteNamedWaveformI16&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViConstString&amp;nbsp;waveformName, ViInt32&amp;nbsp;size, ViInt16[]&amp;nbsp;data);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Writes binary data to the named waveform in onboard memory.
        /// &lt;p class="body"&gt;By default, the subsequent call to the &lt;span class="monospace"&gt;niFgen_WriteNamedWaveformI16&lt;/span&gt; function continues writing data from the position of the last sample written. You can set the write position and offset by calling the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_SetNamedWaveformNextWritePosition.html')"&gt;&lt;span class="monospace"&gt;niFgen_SetNamedWaveformNextWritePosition&lt;/span&gt;&lt;/a&gt; function. If streaming is enabled, you can write more data than the allocated waveform size in onboard memory. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'streaming.html')"&gt;Streaming&lt;/a&gt; topic for more information about streaming data.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel onto which the waveform data should be loaded.  
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Name&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name to associate with the allocated waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;size&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of samples to load into the waveform.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: 0&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </param>
        /// <param name="Data">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Data&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;data&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt16 []&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data to load into the waveform. The array must have at least as many elements as the value in &lt;strong&gt;size&lt;/strong&gt;.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int WriteNamedWaveformI16(string Channel_Name, string Waveform_Name, int Size, short[] Data)
        {
            int pInvokeResult = PInvoke.WriteNamedWaveformI16(this._handle, Channel_Name, Waveform_Name, Size, Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_WriteNamedWaveformComplexF64&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_WriteNamedWaveformComplexF64&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_WriteNamedWaveformComplexF64&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViConstString&amp;nbsp;waveformName, ViInt32&amp;nbsp;size, NIComplexNumber[]&amp;nbsp;data);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Writes complex floating&amp;#8211;point data to the named waveform in onboard memory on devices with the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_OSP_ENABLED.html')"&gt;&lt;span class="Monospace"&gt;NIFGEN_ATTR_OSP_ENABLED&lt;/span&gt;&lt;/a&gt; attribute set to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt; and the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_OSP_DATA_PROCESSING_MODE.html')"&gt;&lt;span class="Monospace"&gt;NIFGEN_ATTR_OSP_DATA_PROCESSING_MODE&lt;/span&gt;&lt;/a&gt; attribute set to &lt;span class="Monospace"&gt;NIFGEN_VAL_OSP_COMPLEX&lt;/span&gt;.  The waveform handle passed in must have been created by a call to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AllocateWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt; function or to one of the following niFgen Create Waveform functions:&lt;/p&gt;
        /// 
        /// &lt;ul&gt;
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileHWS.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileHWS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
        /// 
        /// &lt;p class="body"&gt;By default, the subsequent call to the &lt;span class="monospace"&gt;niFgen_WriteNamedWaveformComplexF64&lt;/span&gt; function continues writing data from the position of the last sample written. You can set the write position and offset by calling the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_SetNamedWaveformNextWritePosition.html')"&gt;&lt;span class="monospace"&gt;niFgen_SetNamedWaveformNextWritePosition&lt;/span&gt;&lt;/a&gt; function. If streaming is enabled, you can write more data than the allocated waveform size in onboard memory. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'streaming.html')"&gt;Streaming&lt;/a&gt; topic for more information about streaming data.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel onto which the waveform data should be loaded.  
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Name&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name to associate with the allocated waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;size&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of samples to load into the waveform.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: 0&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </param>
        /// <param name="Data">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Data&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;data&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;NIComplexNumber []&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data to load into the waveform. The array must have at least as many elements as the value in &lt;strong&gt;size&lt;/strong&gt;.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int WriteNamedWaveformComplexF64(string Channel_Name, string Waveform_Name, int Size, nicomplexnumber[] Data)
        {
            int pInvokeResult = PInvoke.WriteNamedWaveformComplexF64(this._handle, Channel_Name, Waveform_Name, Size, Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_WriteNamedComplexWaveformI16&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_WriteNamedComplexWaveformI16&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_WriteNamedComplexWaveformI16&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViConstString&amp;nbsp;waveformName, ViInt32&amp;nbsp;size, NIComplexI16[]&amp;nbsp;data);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Writes complex binary data to the named waveform in onboard memory on devices with the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_OSP_ENABLED.html')"&gt;&lt;span class="Monospace"&gt;NIFGEN_ATTR_OSP_ENABLED&lt;/span&gt;&lt;/a&gt; attribute set to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt; and the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_OSP_DATA_PROCESSING_MODE.html')"&gt;&lt;span class="Monospace"&gt;NIFGEN_ATTR_OSP_DATA_PROCESSING_MODE&lt;/span&gt;&lt;/a&gt; attribute set to NIFGEN_VAL_OSP_COMPLEX. The waveform handle passed in must have been created by a call to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AllocateWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_AllocateWaveform&lt;/span&gt;&lt;/a&gt; function or to one of the following niFgen Create Waveform functions:
        /// 
        /// &lt;ul&gt;
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileI16&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileF64&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        /// 
        /// &lt;li&gt; &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformFromFileHWS.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformFromFileHWS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
        /// 
        /// &lt;p class="body"&gt;By default, the subsequent call to the &lt;span class="monospace"&gt;niFgen_WriteNamedWaveformComplexi16&lt;/span&gt; function continues writing data from the position of the last sample written. You can set the write position and offset by calling the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_SetNamedWaveformNextWritePosition.html')"&gt;&lt;span class="monospace"&gt;niFgen_SetNamedWaveformNextWritePosition&lt;/span&gt;&lt;/a&gt; function. If streaming is enabled, you can write more data than the allocated waveform size in onboard memory. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'streaming.html')"&gt;Streaming&lt;/a&gt; topic for more information about streaming data.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel onto which the waveform data should be loaded.  
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Name&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name to associate with the allocated waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;size&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of samples to load into the waveform.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: 0&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </param>
        /// <param name="Data">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Data&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;data&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;NIComplexI16 []&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data to load into the waveform. The array must have at least as many elements as the value in &lt;strong&gt;size&lt;/strong&gt;.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int WriteNamedWaveformComplexI16(string Channel_Name, string Waveform_Name, int Size, short Data)
        {
            int pInvokeResult = PInvoke.WriteNamedWaveformComplexI16(this._handle, Channel_Name, Waveform_Name, Size, Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_DeleteNamedWaveform&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_DeleteNamedWaveform&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_DeleteNamedWaveform&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViConstString&amp;nbsp;waveformName);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Removes a previously created arbitrary waveform from the signal generator memory and invalidates the waveform handle.
        /// 
        /// &lt;table class="Borderless"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif" alt="Note"&gt;&lt;/td&gt;
        /// &lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel onto which the named waveform is loaded.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Name&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name to associate with the allocated waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int DeleteNamedWaveform(string Channel_Name, string Waveform_Name)
        {
            int pInvokeResult = PInvoke.DeleteNamedWaveform(this._handle, Channel_Name, Waveform_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_WriteScript&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_WriteScript&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_WriteScript&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViConstString&amp;nbsp;script);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Writes a string containing one or more scripts that govern the generation of waveforms.&lt;/P&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel on which the script is loaded. 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Script">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Script&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;script&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Contains the text of the script you want to use for your generation operation. Refer to &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'niscripted.chm', 'scripting_instructions.html')"&gt;Scripting Instructions&lt;/a&gt; for more information about writing scripts.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int WriteScript(string Channel_Name, string Script)
        {
            int pInvokeResult = PInvoke.WriteScript(this._handle, Channel_Name, Script);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_DeleteScript&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_DeleteScript&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_DeleteScript&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViConstString&amp;nbsp;scriptName);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Deletes the specified script from onboard memory.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel onto which the script is loaded.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Script_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Script Name&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;scriptName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name of the script you want to delete. The script name appears in the text of the script following the &lt;span class="monospace"&gt;script&lt;/span&gt; keyword.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int DeleteScript(string Channel_Name, string Script_Name)
        {
            int pInvokeResult = PInvoke.DeleteScript(this._handle, Channel_Name, Script_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ConfigureCustomFIRFilterCoefficients&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ConfigureCustomFIRFilterCoefficients&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureCustomFIRFilterCoefficients&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;numberofCoefficients, ViReal64[]&amp;nbsp;coefficientsArray);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Sets the FIR filter coefficients used by the onboard signal processing block. The values are coerced to the closest settings achievable by the signal generator.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;Refer to the &lt;em&gt;FIR Filter&lt;/em&gt; topic for your device in the &lt;em&gt;NI&amp;nbsp;Signal Generators Help&lt;/em&gt; for more information about FIR filter coefficients.  This function is supported only for the NI 5441.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif" alt="Note"&gt;&lt;/td&gt;
        /// &lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to configure the operation mode.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Defined Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Number_of_Coefficients">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Number of Coefficients&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;numberofCoefficients&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of coefficients. The NI 5441 requires 95.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Coefficients_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Coefficients Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;coefficientsArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data the onboard signal processor uses for the FIR filter coefficients. For the NI&amp;nbsp;5441, provide a symmetric array of 95 coefficients to this parameter. The array must have at least as many elements as the value that you specify in the &lt;strong&gt;numberOfCoefficients&lt;/strong&gt; parameter in this function.&lt;br&gt;&lt;br&gt;The coefficients should range between &amp;#8211;1.00 and +1.00.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureCustomFIRFilterCoefficients(string Channel_Name, int Number_of_Coefficients, double[] Coefficients_Array)
        {
            int pInvokeResult = PInvoke.ConfigureCustomFIRFilterCoefficients(this._handle, Channel_Name, Number_of_Coefficients, Coefficients_Array);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_GetFIRFilterCoefficients&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_GetFIRFilterCoefficients&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_GetFIRFilterCoefficients&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;arraySize, ViReal64[]&amp;nbsp;coefficientsArray, ViInt32*&amp;nbsp;numberofCoefficientsRead);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;
        /// 
        /// Returns the FIR filter coefficients used by the onboard signal processing block. These coefficients are determined by NI-FGEN and based on the FIR filter type and corresponding attribute (Alpha, Passband, BT) unless you are using the custom filter. If you are using a custom filter, the coefficients returned are those set with the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureCustomFIRFilterCoefficients.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureCustomFIRFilterCoefficients&lt;/span&gt;&lt;/a&gt;  function coerced to the quantized values used by the device.&lt;br&gt;&lt;br&gt;
        /// 
        /// To use this function, first call an instance of the &lt;span class="monospace"&gt;niFgen_GetFIRFilterCoefficients&lt;/span&gt; function with the &lt;strong&gt;coefficientsArray&lt;/strong&gt; parameter set to &lt;span class="monospace"&gt;VI_NULL&lt;/span&gt;. Calling the function in this state returns the current size of the &lt;strong&gt;coefficientsArray&lt;/strong&gt; as the value of the &lt;strong&gt;numberOfCoefficientsRead&lt;/strong&gt; parameter. Create an array of this size, and call the &lt;span class="monospace"&gt;niFgen_GetFIRFilterCoefficients&lt;/span&gt; function a second time, passing the new array as the &lt;strong&gt;coefficientsArray&lt;/strong&gt; parameter and the size as the &lt;strong&gt;arraySize&lt;/strong&gt; parameter.  This second function call populates the array with the FIR filter coefficients. 
        /// 
        /// 
        /// 
        /// &lt;br&gt;&lt;br&gt;Refer to the FIR Filter topic for your device in the &lt;em&gt;NI&amp;nbsp;Signal Generators Help&lt;/em&gt; for more information about FIR filter coefficients. This function is supported only for the NI 5441.
        /// 
        /// &lt;br&gt;&lt;br&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to configure the operation mode.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Defined Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Array_Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Array Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;arraySize&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the size of the coefficient array&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Coefficients_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Coefficients Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;coefficientsArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data the onboard signal processor uses for the FIR filter coefficients. For the NI&amp;nbsp;5441, provide a symmetric array of 95 coefficients to this parameter. The array must have at least as many elements as the value that you specify in the &lt;strong&gt;numberOfCoefficients&lt;/strong&gt; parameter in this function.&lt;br&gt;&lt;br&gt;The coefficients should range between &amp;#8211;1.00 and +1.00.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Number_of_Coefficients_Read">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Number of Coefficients Read&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;numberofCoefficientsRead&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data containing the number of coefficients you want to read.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int GetFIRFilterCoefficients(string Channel_Name, int Array_Size, double[] Coefficients_Array, int[] Number_of_Coefficients_Read)
        {
            int pInvokeResult = PInvoke.GetFIRFilterCoefficients(this._handle, Channel_Name, Array_Size, Coefficients_Array, Number_of_Coefficients_Read);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ManualEnableP2PStream&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ManualEnableP2PStream&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ManualEnableP2PStream&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;endpointName[]&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Enables a peer-to-peer data stream using manual flow control.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Endpoint_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Endpoint Name&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;endpointName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString []&lt;/td&gt;
        /// &lt;td&gt;Specifies the stream endpoint FIFO to configure. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm',  'P2P_Streaming.html')"&gt;Peer-to-Peer Data Streaming&lt;/a&gt; documentation in the &lt;em&gt;NI Signal Generators Help&lt;/em&gt; for more information.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ManualEnableP2PStream(string Endpoint_Name)
        {
            int pInvokeResult = PInvoke.ManualEnableP2PStream(this._handle, Endpoint_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_WriteP2PEndpointI16&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_WriteP2PEndpointI16&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_WriteP2PEndpointI16&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;endpointName, ViInt32&amp;nbsp;numberOfSamples, ViInt16&amp;nbsp;endpointData[])&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Writes I16 data to the peer-to-peer endpoint. Use this function to write initial data from the host to the endpoint before starting generation to avoid an underflow at start.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Endpoint_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Endpoint Name&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;endpointName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString []&lt;/td&gt;
        /// &lt;td&gt;Specifies the name of the FIFO endpoint. Data is written to the endpoint FIFO.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Number_Of_Samples">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Number of Samples&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;numberOfSamples&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of samples to write into the endpoint FIFO.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Endpoint_Data">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Endpoint Data&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;endpointData&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt16 []&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data to write into the endpoint FIFO. The binary data is left-justified.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int WriteP2PEndpointI16(string Endpoint_Name, int Number_Of_Samples, short[] Endpoint_Data)
        {
            int pInvokeResult = PInvoke.WriteP2PEndpointI16(this._handle, Endpoint_Name, Number_Of_Samples, Endpoint_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_GetStreamEndpointHandle&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_GetStreamEndpointHandle&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_GetStreamEndpointHandle&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;streamEndpoint, ViInt32*&amp;nbsp;readerHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Returns a reader endpoint handle that can be used with NI-P2P to configure a peer-to-peer stream with a signal generator endpoint.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="streamEndpoint">
        /// 
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Enabled&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;streamEndpoint&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// 
        /// &lt;td&gt;Specifies the stream endpoint FIFO to configure. Refer to the device-specific documentation for peer-to-peer streaming  in the &lt;em&gt;NI Signal Generators Help&lt;/em&gt; for more information.
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="readerHandle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;State&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;readerHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Specifies the reader endpoint handle that is used with NI-P2P to create a stream with the signal generator as an endpoint.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int GetStreamEndpointHandle(string streamEndpoint, out uint readerHandle)
        {
            int pInvokeResult = PInvoke.GetStreamEndpointHandle(this._handle, streamEndpoint, out readerHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ResetAttribute&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ResetAttribute&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ResetAttribute&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViAttr&amp;nbsp;attributeID);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Resets the attribute to its default value.&lt;/p&gt;
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name of the channel on which to check the attribute value if the attribute is channel-based.  If the attribute is not channel-based, then pass &lt;span class="monospace"&gt;VI_NULL&lt;/span&gt; or an empty string (&amp;quot;&amp;quot;). 
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;&amp;quot; (empty string) &lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Attribute_ID">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Attribute ID&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;attributeID&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViAttr&lt;/td&gt;
        /// &lt;td&gt;Specifies the ID of an attribute.
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ResetAttribute(string Channel_Name, int Attribute_ID)
        {
            int pInvokeResult = PInvoke.ResetAttribute(this._handle, Channel_Name, Attribute_ID);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_InitiateGeneration&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_InitiateGeneration&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_InitiateGeneration&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Initiates signal generation.  If you want to abort signal generation, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_AbortGeneration.html')"&gt;&lt;span class="monospace"&gt;niFgen_AbortGeneration&lt;/span&gt;&lt;/a&gt; function. After the signal generation is aborted, you can call the &lt;span class="monospace"&gt;niFgen_InitiateGeneration&lt;/span&gt; function to cause the signal generator to produce a signal again.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int InitiateGeneration()
        {
            int pInvokeResult = PInvoke.InitiateGeneration(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_AbortGeneration&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_AbortGeneration&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_AbortGeneration&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Aborts any previously initiated signal generation. Call the 
        /// &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitiateGeneration.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitiateGeneration&lt;/span&gt;&lt;/a&gt; function to cause the signal generator to produce a signal again.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int AbortGeneration()
        {
            int pInvokeResult = PInvoke.AbortGeneration(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_GetHardwareState&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_GetHardwareState&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_GetHardwareState&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32*&amp;nbsp;state);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Returns the current hardware state of the device and, if the device is in the hardware error state, the current hardware error.  &lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;  Hardware states do not necessarily correspond to NI-FGEN states.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="state">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;State&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;state&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Returns the hardware state of the signal generator.&lt;p class="body"&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="bordered"&gt;&lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_IDLE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;The device is in the Idle state.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_WAITING_FOR_START_TRIGGER&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;The device is waiting for Start Trigger.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RUNNING&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;The device is in the Running state.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_DONE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;The generation has completed successfully.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_HARDWARE_ERROR&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="bordered"&gt;There is a hardware error.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int GetHardwareState(out int state)
        {
            int pInvokeResult = PInvoke.GetHardwareState(this._handle, out state);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_WaitUntilDone&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_WaitUntilDone&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_WaitUntilDone&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;maxtime);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Waits until the device is done generating or until the maximum time has expired.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="maxTime">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;maxTime&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;maxTime&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the timeout value in milliseconds.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int WaitUntilDone(int maxTime)
        {
            int pInvokeResult = PInvoke.WaitUntilDone(this._handle, maxTime);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_IsDone&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_IsDone&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_IsDone&amp;nbsp;(ViSession&amp;nbsp;vi, ViBoolean*&amp;nbsp;done);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Determines whether the current generation is complete.  This function sets the &lt;strong&gt;done&lt;/strong&gt; parameter to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt; if the session is in the Idle or Committed states.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif" alt="Note"&gt;&lt;/td&gt;
        /// &lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;NI-FGEN only reports the &lt;strong&gt;done&lt;/strong&gt; parameter as &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt; after the current generation is complete in Single trigger mode.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Done">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Done&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// &lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;done&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViBoolean*&lt;/td&gt;
        /// &lt;td&gt;Returns information about the completion of waveform generation.
        /// 
        /// &lt;p class="body"&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Generation is complete.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Generation is not complete.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int IsDone(out bool Done)
        {
            ushort DoneAsUShort;
            int pInvokeResult = PInvoke.IsDone(this._handle, out DoneAsUShort);
            Done = System.Convert.ToBoolean(DoneAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ResetWithDefaults&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ResetWithDefaults&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ResetWithDefaults&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Resets the instrument and reapplies initial user&amp;#8211;specified settings from the logical name that was used to initialize the session.  If the session was created without a logical name, this function is equivalent to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_reset.html')"&gt;&lt;span class="monospace"&gt;niFgen_reset&lt;/span&gt;&lt;/a&gt; function.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ResetWithDefaults()
        {
            int pInvokeResult = PInvoke.ResetWithDefaults(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ResetDevice&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ResetDevice&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ResetDevice&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Performs a hard reset on the device.  Generation is stopped, all routes are released, external bidirectional terminals are tristated, FPGAs are reset, hardware is configured to its default state, and all session attributes are reset to their default states.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ResetDevice()
        {
            int pInvokeResult = PInvoke.ResetDevice(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_Disable&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_Disable&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_Disable&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Places the instrument in a quiescent state where it has minimal or no impact on the system to which it is connected. The analog output and all exported signals are disabled. &lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int Disable()
        {
            int pInvokeResult = PInvoke.Disable(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_self_test&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_self_test&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_self_test&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt16*&amp;nbsp;selfTestResult, ViChar[]&amp;nbsp;selfTestMessage);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Runs the instrument self-test routine and returns the test result(s).&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif" alt="Note"&gt;&lt;/td&gt;
        /// &lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;When used on some signal generators, the device is reset after the &lt;span class="monospace"&gt;niFgen_self_test&lt;/span&gt; function runs. If you use the &lt;span class="monospace"&gt;niFgen_self_test&lt;/span&gt; function, your device may not be in its previously configured state after the function runs. &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Self_Test_Result">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Self Test Result&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;selfTestResult&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt16&lt;/td&gt;
        /// &lt;td&gt;Contains the value returned from the instrument self-test.  A value of &lt;span class="monospace"&gt;0&lt;/span&gt; indicates success. &lt;br&gt;&lt;br&gt;
        /// 
        /// &lt;table class="Bordered"&gt;&lt;tr&gt;&lt;th class="Bordered"&gt;Self-Test Code    &lt;/th&gt;
        /// &lt;th class="Bordered"&gt;Description&lt;/th&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;div align="center"&gt;0&lt;/div&gt;              &lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Passed self-test&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;div align="center"&gt;1&lt;/div&gt;              &lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Self-test failed&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Self_Test_Message">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Self-Test Message&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;selfTestMessage&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViChar[]&lt;/td&gt;
        /// &lt;td&gt;Returns the self-test response string from the instrument. 
        /// 
        /// &lt;p class="Body"&gt;You must pass a ViChar array with at least 256 bytes.&lt;/p&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int self_test(out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message)
        {
            int pInvokeResult = PInvoke.self_test(this._handle, out Self_Test_Result, Self_Test_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_revision_query&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_revision_query&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_revision_query&amp;nbsp;(ViSession&amp;nbsp;vi, ViChar[]&amp;nbsp;instrumentDriverRevision, ViChar[]&amp;nbsp;firmwareRevision);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Returns the revision numbers of the NI-FGEN and instrument firmware.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Instrument_Driver_Revision">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Instrument Driver Revision&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;instrumentDriverRevision&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViChar[]&lt;/td&gt;
        /// &lt;td&gt;Returns the NI-FGEN software revision numbers in the form of a string.
        /// 
        /// &lt;p class="Body"&gt;You must pass a ViChar array with at least 256 bytes.&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Firmware_Revision">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Firmware Revision&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;firmwareRevision&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViChar[]&lt;/td&gt;
        /// &lt;td&gt;Returns the instrument firmware revision numbers in the form of a string.
        /// 
        /// &lt;p class="Body"&gt;You must pass a ViChar array with at least 256 bytes.&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int revision_query(System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision)
        {
            int pInvokeResult = PInvoke.revision_query(this._handle, Instrument_Driver_Revision, Firmware_Revision);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_GetNextCoercionRecord&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_GetNextCoercionRecord&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_GetNextCoercionRecord&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;bufferSize, ViChar[]&amp;nbsp;coercionRecord);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Returns the coercion information associated with the IVI session.  This function retrieves and clears the oldest instance in which the NI-FGEN coerced a value you specified to another value.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If you set the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_RECORD_COERCIONS.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_RECORD_COERCIONS&lt;/span&gt;&lt;/a&gt; attribute to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, NI-FGEN keeps a list of all coercions it makes on ViInt32 or ViReal64 values that you pass to NI-FGEN functions.  You use this function to retrieve information from that list.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies &lt;strong&gt;bufferSize&lt;/strong&gt; &amp;#8211; 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is &lt;span class="monospace"&gt;123456&lt;/span&gt; and &lt;strong&gt;bufferSize&lt;/strong&gt; is 4, the function places &lt;span class="monospace"&gt;123&lt;/span&gt; into the buffer and returns &lt;span class="monospace"&gt;7&lt;/span&gt;.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If you pass 0, you can pass &lt;span class="monospace"&gt;VI_NULL&lt;/span&gt; for the &lt;strong&gt;coercionRecord&lt;/strong&gt; buffer parameter.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;The function returns an empty string in the &lt;strong&gt;coercionRecord&lt;/strong&gt; parameter if no coercion records remain for the session.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Buffer Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;bufferSize&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of bytes in the ViChar array you specify for the &lt;strong&gt;coercionRecord&lt;/strong&gt; parameter.
        /// 
        /// &lt;p class="Body"&gt;If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies &lt;strong&gt;bufferSize&lt;/strong&gt; &amp;#8211; 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size that you must pass to get the entire value.  For example, if the value is &lt;span class="monospace"&gt;123456&lt;/span&gt; and the buffer size is 4, the function places &lt;span class="monospace"&gt;123&lt;/span&gt; into the buffer and returns &lt;span class="monospace"&gt;7&lt;/span&gt;.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If you pass 0, you can pass &lt;span class="monospace"&gt;VI_NULL&lt;/span&gt; for the &lt;strong&gt;coercionRecord&lt;/strong&gt; buffer parameter.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:  None
        /// &lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Coercion_Record">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Coercion Record&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;coercionRecord&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViChar[]&lt;/td&gt;
        /// &lt;td&gt;Returns the next coercion record for the IVI session.  If there are no coercion records, the function returns an empty string.
        /// 
        /// &lt;p class="Body"&gt;The buffer must contain at least as many elements as the value you specify with the &lt;strong&gt;bufferSize&lt;/strong&gt; parameter.  If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate with the &lt;strong&gt;bufferSize&lt;/strong&gt; parameter, the function copies &lt;strong&gt;bufferSize&lt;/strong&gt; &amp;#8211; 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size that you must pass to get the entire value.  For example, if the value is &amp;quot;123456&amp;quot; and &lt;strong&gt;bufferSize&lt;/strong&gt; is 4, the function places &amp;quot;123&amp;quot; into the buffer and returns 7.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;This parameter returns an empty string if no coercion records remain for the session.&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;Status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_error_message.html')"&gt; &lt;span class="monospace"&gt; niFgen_error_message&lt;/span&gt;&lt;/a&gt;. To obtain additional information about the error condition, call &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_GetError.html')"&gt; &lt;span class="Monospace"&gt; niFgen_GetError&lt;/span&gt;&lt;/a&gt;. To clear the error information from NI-FGEN, call &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ClearError.html')"&gt; &lt;span class="Monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt;. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int GetNextCoercionRecord(int Buffer_Size, System.Text.StringBuilder Coercion_Record)
        {
            int pInvokeResult = PInvoke.GetNextCoercionRecord(this._handle, Buffer_Size, Coercion_Record);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_error_query&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_error_query&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_error_query&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32*&amp;nbsp;errorCode, ViChar[]&amp;nbsp;Error_Message);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Reads an error code and a message from the instrument error queue.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Error_Code">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Error Code&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;errorCode&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Returns the error code read from the instrument error queue.
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Error_Message">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Error Message&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;errorMessage&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViChar[]&lt;/td&gt;
        /// &lt;td&gt;Returns the error message string read from the instrument error message queue.
        /// 
        /// &lt;p class="Body"&gt;You must pass a ViChar array with at least 256 bytes.&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int error_query(out int Error_Code, System.Text.StringBuilder Error_Message)
        {
            int pInvokeResult = PInvoke.error_query(this._handle, out Error_Code, Error_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ErrorHandler&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ErrorHandler&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ErrorHandler&amp;nbsp;(ViSession&amp;nbsp;vi, ViStatus&amp;nbsp;errorCode, ViChar[]&amp;nbsp;errorMessage);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Converts a status code returned by an NI-FGEN function into a user-readable string and returns any error elaborations.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt; functions and identifies a
        ///             particular instrument session.  
        /// &lt;p class="Body"&gt;You can pass &lt;span class="monospace"&gt;VI_NULL&lt;/span&gt; for this parameter.  Passing &lt;span class="monospace"&gt;VI_NULL&lt;/span&gt; is useful when one of the initialize functions fails.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:  &lt;span class="monospace"&gt;VI_NULL&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Error_Code">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Error Code&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;errorCode&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Specifies the &lt;strong&gt;status&lt;/strong&gt; parameter that is returned from any of the NI-FGEN functions.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:  0  (&lt;span class="monospace"&gt;VI_SUCCESS&lt;/span&gt;)&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Error_Message">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Error Message&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;errorMessage&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViChar[]&lt;/td&gt;
        /// &lt;td&gt;Returns the error message string read from the instrument error message queue.
        /// 
        /// &lt;p class="Body"&gt;You must pass a ViChar array with at least 256 bytes.&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ErrorHandler(int Error_Code, System.Text.StringBuilder Error_Message)
        {
            int pInvokeResult = PInvoke.ErrorHandler(this._handle, Error_Code, Error_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_GetNextInterchangeWarning&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_GetNextInterchangeWarning&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_GetNextInterchangeWarning&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;bufferSize, ViChar[]&amp;nbsp;interchangeWarning);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Returns the interchangeability warnings associated with the IVI session. It retrieves and clears the oldest instance in which the class driver recorded an interchangeability warning.  Interchangeability warnings indicate that using your application with a different instrument might cause different behavior. Use this function to retrieve interchangeability warnings.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;NI-FGEN performs interchangeability checking when the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_INTERCHANGE_CHECK.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_INTERCHANGE_CHECK&lt;/span&gt;&lt;/a&gt; attribute is set to &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;The function returns an empty string in the &lt;strong&gt;interchangeWarning&lt;/strong&gt; parameter if no interchangeability warnings remain for the session.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;In general, NI-FGEN generates interchangeability warnings when an attribute that affects the behavior of the instrument is in a state that you did not specify.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Buffer Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;bufferSize&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of bytes in the ViChar array you specify for the &lt;strong&gt;interchangeWarning&lt;/strong&gt; parameter.
        /// 
        /// &lt;p class="Body"&gt;If the next interchangeability warning string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies &lt;strong&gt;bufferSize&lt;/strong&gt; &amp;#8211; 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size that you must pass to get the entire value. For example, if the value is &lt;span class="monospace"&gt;123456&lt;/span&gt; and &lt;strong&gt;bufferSize&lt;/strong&gt; is 4, the function places &lt;span class="monospace"&gt;123&lt;/span&gt; into the buffer and returns &lt;span class="monospace"&gt;7&lt;/span&gt;.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If you pass 0, you can pass &lt;span class="monospace"&gt;VI_NULL&lt;/span&gt; for the &lt;strong&gt;interchangeWarning&lt;/strong&gt; buffer parameter.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:  None&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Interchange_Warning">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Interchange Warning&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;interchangeWarning&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViChar[]&lt;/td&gt;
        /// &lt;td&gt;Returns the next interchange warning for the IVI session. If there are no interchange warnings, the function returns an empty string.
        /// 
        /// &lt;p class="Body"&gt;The buffer must contain at least as many elements as the value you specify with the &lt;strong&gt;bufferSize&lt;/strong&gt; parameter. If the next interchangeability warning string, including the terminating NUL byte, contains more bytes than you indicate with the &lt;strong&gt;bufferSize&lt;/strong&gt; parameter, the function copies &lt;strong&gt;bufferSize&lt;/strong&gt; &amp;#8211; 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size that you must pass to get the entire value.  For example, if the value is &lt;span class="monospace"&gt;123456&lt;/span&gt; and &lt;strong&gt;bufferSize&lt;/strong&gt; is 4, the function places &lt;span class="monospace"&gt;123&lt;/span&gt; into the buffer and returns &lt;span class="monospace"&gt;7&lt;/span&gt;.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;This parameter returns an empty string if no interchangeability warnings remain for the session.&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;Status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="Monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt;. To obtain additional information about the error condition, call &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="Monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt;. To clear the error information from NI-FGEN, call &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="Monospace"&gt;niFgen_ClearError&lt;/span&gt;&lt;/a&gt;. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int GetNextInterchangeWarning(int Buffer_Size, System.Text.StringBuilder Interchange_Warning)
        {
            int pInvokeResult = PInvoke.GetNextInterchangeWarning(this._handle, Buffer_Size, Interchange_Warning);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ClearInterchangeWarnings&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ClearInterchangeWarnings&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ClearInterchangeWarnings&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Clears the list of current interchange warnings.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ClearInterchangeWarnings()
        {
            int pInvokeResult = PInvoke.ClearInterchangeWarnings(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ResetInterchangeCheck&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ResetInterchangeCheck&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ResetInterchangeCheck&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;This function tests the current test module for dependencies on the operation of previously executed test modules. If your module depends on the operation of previous modules, your test system has less flexibility.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;When developing a complex test system that consists of multiple test modules, NI recommends that you design the test modules so that they can run in any order.  To do so, ensure that each test module completely configures the state of each instrument it uses.  If a particular test module does not completely configure the state of an instrument, the state of the instrument depends on the configuration from a previously executed test module.  If you execute the test modules in a different order, the behavior of the instrument and the test module may change.  This change in behavior is generally instrument specific and represents an interchangeability problem.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;After you call this function, the interchangeability checking algorithms in the specific driver ignore all previous configuration operations.  By calling this function at the beginning of a test module, you can determine whether the test module has dependencies on the operation of previously executed test modules.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;This function does not clear the interchangeability warnings from the list of previously recorded interchangeability warnings.  If you want to guarantee that the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_GetNextInterchangeWarning.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetNextInterchangeWarning&lt;/span&gt;&lt;/a&gt; function only returns those interchangeability warnings that are generated after calling this function, you must clear the list of interchangeability warnings.  You can clear the interchangeability warnings list by repeatedly calling the &lt;span class="monospace"&gt;niFgen_GetNextInterchangeWarning&lt;/span&gt; function until no more interchangeability warnings are returned.  If you are not interested in the content of those warnings, you can call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ClearInterchangeWarnings.html')"&gt; &lt;span class="monospace"&gt;niFgen_ClearInterchangeWarnings&lt;/span&gt;&lt;/a&gt; function.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ResetInterchangeCheck()
        {
            int pInvokeResult = PInvoke.ResetInterchangeCheck(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CloseExtCal&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CloseExtCal&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CloseExtCal&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;action);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Closes an NI-FGEN external calibration session and, if specified, stores the new calibration constants and calibration data, such as time and temperature, in the onboard EEPROM.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Action">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Action&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;action&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies he action to perform upon closing. 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="Bordered"&gt;&lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_EXT_CAL_ABORT&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;No changes are made to the calibration constants and data in the EEPROM.&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_EXT_CAL_COMMIT&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;The new calibration constants and data determined during the external calibration session are stored in the onboard EEPROM.&lt;/td&gt;&lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;NIFGEN_VAL_EXT_CAL_ABORT&lt;/span&gt;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CloseExtCal(int Action)
        {
            int pInvokeResult = PInvoke.CloseExtCal(this._handle, Action);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_SelfCal&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_SelfCal&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_SelfCal&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Performs a full internal self-calibration on the device.  If the calibration is successful, new calibration data and constants are stored in the onboard EEPROM.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int SelfCal()
        {
            int pInvokeResult = PInvoke.SelfCal(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_InitializeAnalogOutputCalibration&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_InitializeAnalogOutputCalibration&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_InitializeAnalogOutputCalibration&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Sets up the device to start the analog output calibration.&lt;/p&gt;
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int InitializeAnalogOutputCalibration()
        {
            int pInvokeResult = PInvoke.InitializeAnalogOutputCalibration(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_WriteBinary16AnalogStaticValue&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_WriteBinary16AnalogStaticValue&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_WriteBinary16AnalogStaticValue &amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt16&amp;nbsp;value);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Writes a 16-bit value to the DAC, which can be generated as a DC voltage. This function writes to the DAC only within an external calibration session.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to write the value.  
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Value">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Value&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;value&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt16&lt;/td&gt;
        /// &lt;td&gt;Specifies the value to write.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int WriteBinary16AnalogStaticValue(string Channel_Name, short Value)
        {
            int pInvokeResult = PInvoke.WriteBinary16AnalogStaticValue(this._handle, Channel_Name, Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CalAdjustMainPathPreAmpOffset&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CalAdjustMainPathPreAmpOffset&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CalAdjustMainPathPreAmpOffset&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;configuration, ViInt32[]&amp;nbsp;gainDACValues, ViInt32[]&amp;nbsp;offsetDACValues, ViReal64[]&amp;nbsp;measuredOutputs);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Calculates calibration constants pertaining to the preamplifier offset of the main analog path. During external calibration, you can put the device in different configurations; program different gain, offset, and main DAC values; and take measurements of the resulting output voltage. Pass the configuration data, as well as the measurements, to this function to allow NI-FGEN to calculate the appropriate calibration constants and store them in the onboard EEPROM when the calibration session is committed.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name of the channel being calibrated.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Configuration">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Configuration&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;configuration&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the preamplifier stage configuration. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'nifgen_Related_Documentation.html')"&gt;calibration procedure&lt;/a&gt; for your device for information about what configurations must be calibrated.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Gain_DAC_Values">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Gain DAC Values&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;gainDACValues&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of the values programmed to the gain calibration DAC during this calibration stage.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Offset_DAC_Values">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Offset DAC Values&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;offsetDACValues&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of the values programmed to the offset calibration DAC during this calibration stage.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Measured_Outputs">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Measured Outputs&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;measuredOutputs&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of the analog output voltages measured during this calibration stage.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CalAdjustMainPathPreAmpOffset(string Channel_Name, int Configuration, int[] Gain_DAC_Values, int[] Offset_DAC_Values, double[] Measured_Outputs)
        {
            int pInvokeResult = PInvoke.CalAdjustMainPathPreAmpOffset(this._handle, Channel_Name, Configuration, Gain_DAC_Values, Offset_DAC_Values, Measured_Outputs);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CalAdjustMainPathPreAmpGain&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CalAdjustMainPathPreAmpGain&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CalAdjustMainPathPreAmpGain&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;configuration, ViInt32[]&amp;nbsp;mainDACValues, ViInt32[]&amp;nbsp;gainDACValues, ViInt32[]&amp;nbsp;offsetDACValues, ViReal64[]&amp;nbsp;measuredOutputs);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Calculates calibration constants pertaining to the preamplifier gain of the main analog path. During external calibration, you can put the device in different configurations; program different gain, offset, and main DAC values; and take measurements of the resulting output voltage. Pass the configuration data, as well as the measurements to this function to allow NI-FGEN to calculate the appropriate calibration constants and store them in the onboard EEPROM when the calibration session is committed.&lt;/p&gt;
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name of the channel being calibrated.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Configuration">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Configuration&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;configuration&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the preamplifier stage configuration. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'nifgen_Related_Documentation.html')"&gt;calibration procedure&lt;/a&gt; for your device for information on what configurations must be calibrated.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Main_DAC_Values">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Main DAC Values&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;mainDACValues&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of the values programmed to the main output DAC during this calibration stage.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Gain_DAC_Values">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Gain DAC Values&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;gainDACValues&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of the values programmed to the gain calibration DAC during this calibration stage.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Offset_DAC_Values">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Offset DAC Values&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;offsetDACValues&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of the values programmed to the offset calibration DAC during this calibration stage.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Measured_Outputs">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Measured Outputs&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;measuredOutputs&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of the analog output voltages measured during this calibration stage.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CalAdjustMainPathPreAmpGain(string Channel_Name, int Configuration, int[] Main_DAC_Values, int[] Gain_DAC_Values, int[] Offset_DAC_Values, double[] Measured_Outputs)
        {
            int pInvokeResult = PInvoke.CalAdjustMainPathPreAmpGain(this._handle, Channel_Name, Configuration, Main_DAC_Values, Gain_DAC_Values, Offset_DAC_Values, Measured_Outputs);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CalAdjustMainPathPostAmpGainAndOffset&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CalAdjustMainPathPostAmpGainAndOffset&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CalAdjustMainPathPostAmpGainAndOffset&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;configuration, ViInt32[]&amp;nbsp;mainDACValues, ViInt32[]&amp;nbsp;gainDACValues, ViInt32[]&amp;nbsp;offsetDACValues, ViReal64[]&amp;nbsp;measuredOutputs);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Calculates calibration constants pertaining to the postamplifier gain and offset of the main analog path. During external calibration, you can put the device in different configurations; program different gain, offset, and main DAC values; and take measurements of the resulting output voltage.  Pass the configuration data, as well as the measurements to this function to allow NI-FGEN to calculate the appropriate calibration constants and store them in the onboard EEPROM when the calibration session is committed.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name of the channel being calibrated.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Configuration">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Configuration&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;configuration&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the postamplifier stage configuration. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'nifgen_Related_Documentation.html')"&gt;calibration procedure&lt;/a&gt; for your device for information on what configurations must be calibrated.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Main_DAC_Values">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Main DAC Values&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;mainDACValues&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of the values programmed to the main output DAC during this calibration stage.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Gain_DAC_Values">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Gain DAC Values&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;gainDACValues&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of the values programmed to the gain calibration DAC during this calibration stage.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Offset_DAC_Values">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Offset DAC Values&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;offsetDACValues&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of the values programmed to the offset calibration DAC during this calibration stage.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Measured_Outputs">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Measured Outputs&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;measuredOutputs&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of the analog output voltages measured during this calibration stage.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CalAdjustMainPathPostAmpGainAndOffset(string Channel_Name, int Configuration, int[] Main_DAC_Values, int[] Gain_DAC_Values, int[] Offset_DAC_Values, double[] Measured_Outputs)
        {
            int pInvokeResult = PInvoke.CalAdjustMainPathPostAmpGainAndOffset(this._handle, Channel_Name, Configuration, Main_DAC_Values, Gain_DAC_Values, Offset_DAC_Values, Measured_Outputs);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CalAdjustDirectPathGain&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CalAdjustDirectPathGain&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CalAdjustDirectPathGain&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32[]&amp;nbsp;mainDACValues, ViInt32[]&amp;nbsp;gainDACValues, ViReal64[]&amp;nbsp;measuredOutputs);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Calculates calibration constants pertaining to the gain of the direct analog path. During external calibration, you can put the device in different configurations; program different gain and main DAC values; and take measurements of the resulting output voltage. Pass the configuration data, as well as the measurements, to this function to allow NI-FGEN to calculate the appropriate calibration constants and store them in the onboard EEPROM when the calibration session is committed.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name of the channel being calibrated.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Main_DAC_Values">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Main DAC Values&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;mainDACValues&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of the values programmed to the main output DAC during this calibration stage.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Gain_DAC_Values">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Gain DAC Values&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;gainDACValues&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of the values programmed to the gain calibration DAC during this calibration stage.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Measured_Outputs">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Measured Outputs&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;measuredOutputs&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of the analog output voltages measured during this calibration stage.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CalAdjustDirectPathGain(string Channel_Name, int[] Main_DAC_Values, int[] Gain_DAC_Values, double[] Measured_Outputs)
        {
            int pInvokeResult = PInvoke.CalAdjustDirectPathGain(this._handle, Channel_Name, Main_DAC_Values, Gain_DAC_Values, Measured_Outputs);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CalAdjustMainPathOutputImpedance&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CalAdjustMainPathOutputImpedance&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CalAdjustMainPathOutputImpedance&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;configuration, ViReal64&amp;nbsp;loadImpedance, ViReal64&amp;nbsp;measuredSourceVoltage, ViReal64&amp;nbsp;measuredVoltageAcrossLoad);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Calculates calibration constants pertaining to main analog path output impedance.  During external calibration, you can put the device in different configurations and take measurements of the resulting output voltage across different loads.  Pass the configuration data, as well as the measurements, to this function to allow NI-FGEN to calculate the appropriate calibration constants and store them in the onboard EEPROM when the calibration session is committed.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name of the channel being calibrated.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Configuration">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Configuration&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;configuration&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the main path output impedance configuration. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'nifgen_Related_Documentation.html')"&gt;calibration procedure&lt;/a&gt; for your device for information on what configurations must be calibrated.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Load_Impedance">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Load Impedance&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;loadImpedance&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the impedance of the load across which the measurement passed in as &lt;strong&gt;measuredVoltageAcrossLoad&lt;/strong&gt; is taken.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Measured_Source_Voltage">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Measured Source Voltage&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;measuredSourceVoltage&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the analog output voltage measured across a very high-impedance load.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Measured_Voltage_Across_Load">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Measured Voltage Across Load&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;measuredVoltageAcrossLoad&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the analog output voltage measured across the load impedance specified in the &lt;strong&gt;loadImpedance&lt;/strong&gt; parameter.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CalAdjustMainPathOutputImpedance(string Channel_Name, int Configuration, double Load_Impedance, double Measured_Source_Voltage, double Measured_Voltage_Across_Load)
        {
            int pInvokeResult = PInvoke.CalAdjustMainPathOutputImpedance(this._handle, Channel_Name, Configuration, Load_Impedance, Measured_Source_Voltage, Measured_Voltage_Across_Load);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CalAdjustDirectPathOutputImpedance&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CalAdjustDirectPathOutputImpedance&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CalAdjustDirectPathOutputImpedance&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;configuration, ViReal64&amp;nbsp;loadImpedance, ViReal64&amp;nbsp;measuredSourceVoltage, ViReal64&amp;nbsp;measuredVoltageAcrossLoad);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Calculates calibration constants pertaining to direct analog path output impedance. During external calibration, you can put the device in different configurations and take measurements of the resulting output voltage across different loads. Pass the configuration data, as well as the measurements, to this function to allow NI-FGEN to calculate the appropriate calibration constants and store them in the onboard EEPROM when the calibration session is committed.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name of the channel being calibrated.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Configuration">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Configuration&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;configuration&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the direct path output impedance configuration. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'nifgen_Related_Documentation.html')"&gt;calibration procedure&lt;/a&gt; for your device for information on what configurations must be calibrated.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Load_Impedance">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Load Impedance&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;loadImpedance&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the impedance of the load across which the measurement passed in as &lt;strong&gt;measuredVoltageAcrossLoad&lt;/strong&gt; is taken.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Measured_Source_Voltage">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Measured Source Voltage&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;measuredSourceVoltage&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the analog output voltage measured across a very high-impedance load.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Measured_Voltage_Across_Load">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Measured Voltage Across Load&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;measuredVoltageAcrossLoad&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the analog output voltage measured across the load impedance specified in the &lt;strong&gt;loadImpedance&lt;/strong&gt; parameter.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CalAdjustDirectPathOutputImpedance(string Channel_Name, int Configuration, double Load_Impedance, double Measured_Source_Voltage, double Measured_Voltage_Across_Load)
        {
            int pInvokeResult = PInvoke.CalAdjustDirectPathOutputImpedance(this._handle, Channel_Name, Configuration, Load_Impedance, Measured_Source_Voltage, Measured_Voltage_Across_Load);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_InitializeOscillatorFrequencyCalibration&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_InitializeOscillatorFrequencyCalibration&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_InitializeOscillatorFrequencyCalibration&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Sets up the device to start the VCXO calibration.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;The session handle should be the handle returned by the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt; function.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int InitializeOscillatorFrequencyCalibration()
        {
            int pInvokeResult = PInvoke.InitializeOscillatorFrequencyCalibration(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CalAdjustOscillatorFrequency&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CalAdjustOscillatorFrequency&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CalAdjustOscillatorFrequency&amp;nbsp;(ViSession&amp;nbsp;vi, ViReal64&amp;nbsp;desiredFrequency, ViReal64&amp;nbsp;measuredFrequency);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Calculates calibration constants pertaining to the VCXO.  During external calibration, you can generate sine waves and take measurements of the resulting output frequency.  Pass the desired and measured frequencies to this function to allow NI-FGEN to calculate the appropriate calibration constants and store them in the onboard EEPROM when the calibration session is committed.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Desired_Frequency">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Desired Frequency&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;desiredFrequency&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the expected frequency of the output waveform.
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Measured_Frequency">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Measured Frequency&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;measuredFrequency&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the actual measured frequency of the output waveform.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CalAdjustOscillatorFrequency(double Desired_Frequency, double Measured_Frequency)
        {
            int pInvokeResult = PInvoke.CalAdjustOscillatorFrequency(this._handle, Desired_Frequency, Measured_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_InitializeCalADCCalibration&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_InitializeCalADCCalibration&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_InitializeCalADCCalibration&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Initializes an external calibration session for ADC calibration.  For the NI 5421/5422/5441, ADC calibration involves characterizing the gain and offset of the onboard ADC.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int InitializeCalADCCalibration()
        {
            int pInvokeResult = PInvoke.InitializeCalADCCalibration(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CalAdjustADC&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CalAdjustADC&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CalAdjustADC&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString ChannelName, ViInt32 Configuration, ViReal64[]&amp;nbsp;voltagesMeasuredExternally, ViReal64[]&amp;nbsp;voltagesMeasuredWithCalADC);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Calculates calibration constants pertaining to the gain and offset of the onboard calibration ADC.  During external calibration, you can generate voltages and measure them both externally and with the calibration ADC.  Pass the measured voltages to this function to allow NI-FGEN to calculate the appropriate calibration constants and store them in the onboard EEPROM when the calibration session is committed.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name of the channel being calibrated.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Configuration">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Configuration&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;configuration&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the main path configuration.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Voltages_Measured_Externally">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Voltages Measured Externally&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;voltagesMeasuredExternally&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of analog output voltages measured with an external instrument.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Voltages_Measured_With_CalADC">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Voltages Measured With CalADC&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;voltagesMeasuredWithCalADC&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of analog output voltages measured with the onboard calibration ADC.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CalAdjustADC(string Channel_Name, int Configuration, double[] Voltages_Measured_Externally, double[] Voltages_Measured_With_CalADC)
        {
            int pInvokeResult = PInvoke.CalAdjustADC(this._handle, Channel_Name, Configuration, Voltages_Measured_Externally, Voltages_Measured_With_CalADC);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ReadCalADC&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ReadCalADC&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ReadCalADC&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;numberofReadstoAverage, ViBoolean&amp;nbsp;returnCalibratedValue, ViReal64*&amp;nbsp;calADCValue);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Takes one or more voltage measurements from the onboard calibration ADC and returns the value or the average value. The signal that the ADC actually measures can be specified using the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_CAL_ADC_INPUT.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_CAL_ADC_INPUT&lt;/span&gt;&lt;/a&gt; attribute. The ADC has some inherent gain and offset. These values can be determined during an external calibration session and stored in the calibration EEPROM.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;If the &lt;strong&gt;returnCalibratedValue&lt;/strong&gt; parameter is &lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;, NI-FGEN adjusts the value that is returned to account for the gain and offset of the ADC. Otherwise, the raw voltage value reported by the ADC is returned.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Number_of_Reads_to_Average">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Number of Reads to Average&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;numberofReadstoAverage&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of measurements to be taken and averaged to determine the return value.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Return_Calibrated_Value">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Return Calibrated Value&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;returnCalibratedValue&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViBoolean&lt;/td&gt;
        /// &lt;td&gt;Specifies whether the voltage returned from the ADC should be adjusted to account for the gain and offset of the ADC.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Cal_ADC_Value">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Cal ADC Value&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;calADCValue&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64*&lt;/td&gt;
        /// &lt;td&gt;Specifies the average of the voltage measurements taken from the onboard calibration ADC.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ReadCalADC(int Number_of_Reads_to_Average, bool Return_Calibrated_Value, out double Cal_ADC_Value)
        {
            int pInvokeResult = PInvoke.ReadCalADC(this._handle, Number_of_Reads_to_Average, System.Convert.ToUInt16(Return_Calibrated_Value), out Cal_ADC_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_InitializeFlatnessCalibration&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_InitializeFlatnessCalibration&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_InitializeFlatnessCalibration&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Initializes an external calibration session to calibrate flatness.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int InitializeFlatnessCalibration()
        {
            int pInvokeResult = PInvoke.InitializeFlatnessCalibration(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_CalAdjustFlatness&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_CalAdjustFlatness&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CalAdjustFlatness&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;configuration, ViReal64&amp;nbsp;requestedAmplitude, ViReal64[]&amp;nbsp;frequencies, ViReal64[]&amp;nbsp;measuredAmplitudes, ViInt32&amp;nbsp;numberOfMeasurements);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;During external calibration, the device is configured with the different analog settings. Measurements are taken of the resulting output voltage across different frequencies. The configuration data, as well as the measurements, are passed to this function so that NI-FGEN can calculate the appropriate calibration constants and, when the calibration session is committed, store them in the onboard EEPROM.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the name of the channel being calibrated.
        /// 
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &amp;quot;0&amp;quot;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Configuration">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Configuration&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;configuration&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the analog path configuration of the device for this stage of calibration. Refer to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'nifgen_Related_Documentation.html')"&gt;calibration procedure&lt;/a&gt; for your device for information on which configurations must be calibrated.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Requested_Amplitude">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Requested Amplitude&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;requestedAmplitude&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;Specifies the amplitude, in volts, that was used to configure NI-FGEN to generate the sine tones at different frequencies.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </param>
        /// <param name="Frequencies">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Frequencies&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;frequencies&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the frequencies of the output waveform in hertz.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Measured_Amplitudes">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Measured Amplitudes&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;measuredAmplitudes&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the actual (measured) amplitudes of the output waveform in volts.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Number_Of_Measurements">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Number of Measurements&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;numberofMeasurements&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the number of measurements to take.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CalAdjustFlatness(string Channel_Name, int Configuration, double Requested_Amplitude, double[] Frequencies, double[] Measured_Amplitudes, int Number_Of_Measurements)
        {
            int pInvokeResult = PInvoke.CalAdjustFlatness(this._handle, Channel_Name, Configuration, Requested_Amplitude, Frequencies, Measured_Amplitudes, Number_Of_Measurements);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_GetSelfCalSupported&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_GetSelfCalSupported&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_GetSelfCalSupported&amp;nbsp;(ViSession&amp;nbsp;vi, ViBoolean*&amp;nbsp;selfCalSupported);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Returns whether the device supports self&amp;#8211;calibration.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Self_Cal_Supported">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Self Cal Supported&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;selfCalSupported&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViBoolean*&lt;/td&gt;
        /// &lt;td&gt;Returns whether the device supports self-calibration. 
        /// 
        /// &lt;p class="body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;&lt;td class="bordered"&gt;&lt;span class="monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt; Self&amp;#8211;calibration is supported. &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="bordered"&gt; &lt;span class="monospace"&gt;VI_FALSE&lt;/span&gt;&lt;/td&gt;&lt;td class="bordered"&gt;Self&amp;#8211;calibration is not supported.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int GetSelfCalSupported(out bool Self_Cal_Supported)
        {
            ushort Self_Cal_SupportedAsUShort;
            int pInvokeResult = PInvoke.GetSelfCalSupported(this._handle, out Self_Cal_SupportedAsUShort);
            Self_Cal_Supported = System.Convert.ToBoolean(Self_Cal_SupportedAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_GetSelfCalLastDateAndTime&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_GetSelfCalLastDateAndTime&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_GetSelfCalLastDateAndTime &amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32*&amp;nbsp;year, ViInt32*&amp;nbsp;month, ViInt32*&amp;nbsp;day, ViInt32*&amp;nbsp;hour, ViInt32*&amp;nbsp;minute);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Returns the date and time of the last successful self-calibration.&lt;/p&gt;
        /// &lt;p class="Body"&gt;All values are returned as separate parameters. Each parameter is returned as an integer, including the year, month, day, hour, minute, and second. For example, if the device is calibrated in September 2013, this function returns &lt;span class="monospace"&gt;9&lt;/span&gt; for the &lt;strong&gt;month&lt;/strong&gt; parameter and &lt;span class="monospace"&gt;2013&lt;/span&gt; for the &lt;strong&gt;year&lt;/strong&gt; parameter.&lt;/p&gt;
        /// &lt;p class="Body"&gt;The time returned is 24-hour (military) local time. For example, if the device was calibrated at 2:30 PM, this function returns &lt;span class="monospace"&gt;14&lt;/span&gt; for the &lt;strong&gt;hours&lt;/strong&gt; parameter and &lt;span class="monospace"&gt;30&lt;/span&gt; for the &lt;strong&gt;minutes&lt;/strong&gt; parameter.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Year">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Year&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;year&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Specifies the year of the last successful calibration.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Month">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Month&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;month&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Specifies the month of the last successful calibration.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Day">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Day&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;day&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Specifies the day of the last successful calibration.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Hour">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Hour&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;hour&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Specifies the hour of the last successful calibration.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Minute">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Minute&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;minute&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Specifies the minute of the last successful calibration.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int GetSelfCalLastDateAndTime(out int Year, out int Month, out int Day, out int Hour, out int Minute)
        {
            int pInvokeResult = PInvoke.GetSelfCalLastDateAndTime(this._handle, out Year, out Month, out Day, out Hour, out Minute);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_GetExtCalLastDateAndTime&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_GetExtCalLastDateAndTime&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_GetExtCalLastDateAndTime&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32*&amp;nbsp;year, ViInt32*&amp;nbsp;month, ViInt32*&amp;nbsp;day, ViInt32*&amp;nbsp;hour, ViInt32*&amp;nbsp;minute);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Returns the date and time of the last successful external calibration.  The time returned is 24-hour (military) local time; for example, if the device was calibrated at 2:30 PM, this function returns &lt;span class="monospace"&gt;14&lt;/span&gt; for the &lt;strong&gt;hour&lt;/strong&gt; parameter and &lt;span class="monospace"&gt;30&lt;/span&gt; for the &lt;strong&gt;minute&lt;/strong&gt; parameter.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Year">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Year&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;year&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Specifies the year of the last successful calibration.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Month">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Month&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;month&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Specifies the month of the last successful calibration.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Day">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Day&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;day&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Specifies the day of the last successful calibration.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Hour">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Hour&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;hour&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Specifies the hour of the last successful calibration.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Minute">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Minute&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;minute&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Specifies the minute of the last successful calibration.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int GetExtCalLastDateAndTime(out int Year, out int Month, out int Day, out int Hour, out int Minute)
        {
            int pInvokeResult = PInvoke.GetExtCalLastDateAndTime(this._handle, out Year, out Month, out Day, out Hour, out Minute);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_GetSelfCalLastTemp&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_GetSelfCalLastTemp&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_GetSelfCalLastTemp&amp;nbsp;(ViSession&amp;nbsp;vi, ViReal64*&amp;nbsp;temperature);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Returns the temperature at the last successful self-calibration.  The temperature is returned in degrees Celsius.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Temperature">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Temperature&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;temperature&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64*&lt;/td&gt;
        /// &lt;td&gt;Specifies the temperature at the last successful calibration in degrees Celsius.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int GetSelfCalLastTemp(out double Temperature)
        {
            int pInvokeResult = PInvoke.GetSelfCalLastTemp(this._handle, out Temperature);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_GetExtCalLastTemp&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_GetExtCalLastTemp&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_GetExtCalLastTemp&amp;nbsp;(ViSession&amp;nbsp;vi, ViReal64*&amp;nbsp;temperature);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Returns the temperature at the last successful external calibration.  The temperature is returned in degrees Celsius.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Temperature">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Temperature&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;temperature&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64*&lt;/td&gt;
        /// &lt;td&gt;Specifies the temperature at the last successful calibration in degrees Celsius.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int GetExtCalLastTemp(out double Temperature)
        {
            int pInvokeResult = PInvoke.GetExtCalLastTemp(this._handle, out Temperature);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_GetExtCalRecommendedInterval&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_GetExtCalRecommendedInterval&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_GetExtCalRecommendedInterval&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32*&amp;nbsp;months);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Returns the recommended interval between external calibrations in months.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Months">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Months&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;months&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Specifies the recommended interval between external calibrations in months.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int GetExtCalRecommendedInterval(out int Months)
        {
            int pInvokeResult = PInvoke.GetExtCalRecommendedInterval(this._handle, out Months);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ChangeExtCalPassword&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ChangeExtCalPassword&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ChangeExtCalPassword&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;oldPassword, ViConstString&amp;nbsp;newPassword);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Changes the password that is required to initialize an external calibration session.  The password may be up to four characters long.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Old_Password">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Old Password&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;oldPassword&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the old (current) external calibration password.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="New_Password">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;New Password&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;newPassword&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the new (desired) external calibration password. The password may be up to four characters long.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ChangeExtCalPassword(string Old_Password, string New_Password)
        {
            int pInvokeResult = PInvoke.ChangeExtCalPassword(this._handle, Old_Password, New_Password);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_SetCalUserDefinedInfo&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_SetCalUserDefinedInfo&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_SetCalUserDefinedInfo&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;info);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Stores user-defined information in the onboard EEPROM. Call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_GetCalUserDefinedInfoMaxSize.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetCalUserDefinedInfoMaxSize&lt;/span&gt;&lt;/a&gt; function to determine the maximum number of characters that can be stored.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Info">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Info&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;info&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the information string that should be stored in the EEPROM.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int SetCalUserDefinedInfo(string Info)
        {
            int pInvokeResult = PInvoke.SetCalUserDefinedInfo(this._handle, Info);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_GetCalUserDefinedInfo&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_GetCalUserDefinedInfo&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_GetCalUserDefinedInfo&amp;nbsp;(ViSession&amp;nbsp;vi, ViString&amp;nbsp;info);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Retrieves user-defined information from the onboard EEPROM. Call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_GetCalUserDefinedInfoMaxSize.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetCalUserDefinedInfoMaxSize&lt;/span&gt;&lt;/a&gt; function to determine the number of characters that can be retrieved. The buffer you provide should be the size of the maximum number of characters stored plus one termination character.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Info">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Info&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;info&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViString&lt;/td&gt;
        /// &lt;td&gt;Specifies a string into which the user information is copied.  This parameter must point to a character buffer large enough to hold the information string.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int GetCalUserDefinedInfo(string Info)
        {
            int pInvokeResult = PInvoke.GetCalUserDefinedInfo(this._handle, Info);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_GetCalUserDefinedInfoMaxSize&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_GetCalUserDefinedInfoMaxSize&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_GetCalUserDefinedInfoMaxSize&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32*&amp;nbsp;infoSize);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Returns the maximum number of characters, excluding the termination character, of user-defined information that can be stored in the onboard EEPROM.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Info_Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Info Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;infoSize&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;Specifies the maximum number of characters of user defined info that can be stored in the onboard EEPROM.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int GetCalUserDefinedInfoMaxSize(out int Info_Size)
        {
            int pInvokeResult = PInvoke.GetCalUserDefinedInfoMaxSize(this._handle, out Info_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_ReadCurrentTemperature&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_ReadCurrentTemperature&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ReadCurrentTemperature&amp;nbsp;(ViSession&amp;nbsp;vi, ViReal64*&amp;nbsp;temperature);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Reads the current onboard temperature of the device. The temperature is returned in degrees Celsius.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt; or the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Temperature">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Temperature&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;Temperature&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64*&lt;/td&gt;
        /// &lt;td&gt;Returns the current temperature read from onboard temperature sensors, in degrees Celsius.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ReadCurrentTemperature(out double Temperature)
        {
            int pInvokeResult = PInvoke.ReadCurrentTemperature(this._handle, out Temperature);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;niFgen_RestoreLastExtCalConstants&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;niFgen_RestoreLastExtCalConstants&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_RestoreLastExtCalConstants&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Overwrites the current calibration constants with those from the last successful external calibration. This action effectively undoes any self-calibrations performed since the last time an external calibration was performed. This function should be used if a self-calibration produced invalid calibration constants.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int RestoreLastExtCalConstants()
        {
            int pInvokeResult = PInvoke.RestoreLastExtCalConstants(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;[OBSOLETE] niFgen_CalAdjustCalADC&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;[OBSOLETE] niFgen_CalAdjustCalADC&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_calAdjustCalADC&amp;nbsp;(ViSession&amp;nbsp;vi, ViReal64[]&amp;nbsp;voltagesMeasuredExternally, ViReal64[]&amp;nbsp;voltagesMeasuredWithCalADC);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Calculates calibration constants pertaining to the gain and offset of the onboard calibration ADC.  During external calibration, you can generate voltages and measure them both externally and with the calibration ADC.  Pass the measured voltages to this function to allow NI-FGEN to calculate the appropriate calibration constants and store them in the onboard EEPROM when the calibration session is committed.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitExtCal.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitExtCal&lt;/span&gt;&lt;/a&gt;  function and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Voltages_Measured_Externally">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Voltages Measured Externally&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;voltagesMeasuredExternally&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of analog output voltages measured with an external instrument.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Voltages_Measured_With_CalADC">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Voltages Measured With CalADC&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;voltagesMeasuredWithCalADC&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies an array of analog output voltages measured with the onboard calibration ADC.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CalAdjustCalADC(double[] Voltages_Measured_Externally, double[] Voltages_Measured_With_CalADC)
        {
            int pInvokeResult = PInvoke.CalAdjustCalADC(this._handle, Voltages_Measured_Externally, Voltages_Measured_With_CalADC);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;[OBSOLETE] niFgen_ConfigureTriggerSource&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;[OBSOLETE] niFgen_ConfigureTriggerSource&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureTriggerSource&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channelName, ViInt32&amp;nbsp;triggerSource);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the trigger source. The signal generator responds to a trigger depending on the operation mode in which the signal generator is operating.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp; The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;channelName&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;channelName&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViConstString&lt;/td&gt;
        /// &lt;td&gt;Specifies the channel name for which you want to configure the trigger source.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Defined Value:&lt;/strong&gt;&amp;quot;0&amp;quot;&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Trigger_Source">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Trigger Source&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;triggerSource&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Controls which trigger source the signal generator uses.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="Bordered"&gt;&lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_IMMEDIATE&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Immediate&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_EXTERNAL&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;External (maps to PFI 0)&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_SOFTWARE_TRIG&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Software trigger&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PXI_STAR&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;PXI star&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_0&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 0 or PXI_Trig 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_1&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 1 or PXI_Trig 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_2&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 2 or PXI_Trig 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_3&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 3 or PXI_Trig 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_4&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 4 or PXI_Trig 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_5&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 5 or PXI_Trig 5&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_6&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 6 or PXI_Trig 6&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_7&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 7 or PXI_Trig 7&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_TTL0&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;TTL 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_TTL1&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;TTL 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_TTL2&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;TTL 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_TTL3&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;TTL 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_TTL4&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;TTL 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_TTL5&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;TTL 5&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_TTL6&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;TTL 6&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PFI_0&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;PFI 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PFI_1&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;PFI 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PFI_2&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;PFI 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PFI_3&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;PFI 3&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;NIFGEN_VAL_IMMEDIATE&lt;/span&gt;&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureTriggerSource(string Channel_Name, int Trigger_Source)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerSource(this._handle, Channel_Name, Trigger_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;[OBSOLETE] niFgen_CreateArbWaveform&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;[OBSOLETE] niFgen_CreateArbWaveform&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CreateArbWaveform&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;waveformSize, ViReal64[]&amp;nbsp;waveformDataArray, ViInt32*&amp;nbsp;waveformHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;[OBSOLETE] This function is obsolete.  Use the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformF64&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformI16&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformComplexF64.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformComplexF64&lt;/span&gt;&lt;/a&gt; function instead of this function.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;Creates an arbitrary waveform and returns a handle that identifies that waveform. You can pass this handle to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureArbWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureArbWaveform&lt;/span&gt;&lt;/a&gt; function to produce that waveform. You can also use the handles this function returns to specify a sequence of arbitrary waveforms with the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateArbSequence.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateArbSequence&lt;/span&gt;&lt;/a&gt; function.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;You must set the output mode to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_ARB&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;You must scale the data between &amp;#8211;1.00 and +1.00. Use the &lt;strong&gt;arbGain&lt;/strong&gt; parameter to generate different output voltages.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Waveform_Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformSize&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the size of the arbitrary waveform that you want created.&lt;br&gt;&lt;br&gt;The size must meet the following restrictions:&lt;br&gt;&lt;br&gt;
        /// 
        /// &lt;ul&gt;&lt;li&gt;The size must be less than or equal to the maximum waveform size that the device allows.&lt;/li&gt;
        /// &lt;li&gt;The size must be greater than or equal to the minimum waveform size that the device allows.&lt;/li&gt;
        /// &lt;li&gt;The size must be an integer multiple of the device waveform quantum.&lt;/li&gt;
        /// &lt;/ul&gt;
        /// 
        /// &lt;br&gt;&lt;br&gt;You can obtain these values from the &lt;strong&gt;maximumWaveformSize&lt;/strong&gt;, &lt;strong&gt;minimumWaveformSize&lt;/strong&gt;, and &lt;strong&gt;waveformQuantum&lt;/strong&gt; parameters in the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_QueryArbWfmCapabilities.html')"&gt;&lt;span class="monospace"&gt;niFgen_QueryArbWfmCapabilities&lt;/span&gt;&lt;/a&gt; function.&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:&lt;/strong&gt; None&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Data_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Data Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformDataArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data you want to use for the new arbitrary waveform. The array must have at least as many elements as the value that you specify in &lt;strong&gt;waveformSize&lt;/strong&gt;.
        /// 
        /// &lt;p class="Body"&gt;You must normalize the data points in the array to be between &amp;#8211;1.00 and +1.00.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;The handle that identifies the new waveform.  This handle is used later when referring to this waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CreateArbWaveform(int Waveform_Size, double[] Waveform_Data_Array, out int Waveform_Handle)
        {
            int pInvokeResult = PInvoke.CreateArbWaveform(this._handle, Waveform_Size, Waveform_Data_Array, out Waveform_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;[OBSOLETE] niFgen_CreateBinary16ArbWaveform&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;[OBSOLETE] niFgen_CreateBinary16ArbWaveform&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_CreateBinary16ArbWaveform&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;waveformSize, ViInt16[]&amp;nbsp;waveformDataArray, ViInt32*&amp;nbsp;waveformHandle);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;[OBSOLETE] This function is obsolete.  Use the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateWaveformI16.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateWaveformI16&lt;/span&gt;&lt;/a&gt; function instead of this function.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;Creates an arbitrary waveform from binary data and returns a handle that identifies that waveform. You can pass this handle to the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_ConfigureArbWaveform.html')"&gt;&lt;span class="monospace"&gt;niFgen_ConfigureArbWaveform&lt;/span&gt;&lt;/a&gt; function to produce that waveform. You can also use the handles this function returns to specify a sequence of arbitrary waveforms with the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_CreateArbSequence.html')"&gt;&lt;span class="monospace"&gt;niFgen_CreateArbSequence&lt;/span&gt;&lt;/a&gt; function.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;You must set the output mode to &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_ARB&lt;/span&gt; or &lt;span class="monospace"&gt;NIFGEN_VAL_OUTPUT_SEQ&lt;/span&gt; before calling this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Waveform_Size">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Size&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformSize&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the size of the arbitrary waveform that you want created.&lt;br&gt;&lt;br&gt;The size must meet the following restrictions:
        /// 
        /// &lt;ul&gt;&lt;li&gt; The size must be less than or equal to the maximum waveform size that the device allows.&lt;/li&gt;
        /// &lt;li&gt; The size must be greater than or equal to the minimum waveform size that the device allows.&lt;/li&gt;
        /// &lt;li&gt; The size must be an integer multiple of the device waveform quantum.&lt;/li&gt;
        /// &lt;/ul&gt;
        /// 
        /// &lt;br&gt;&lt;br&gt;You can obtain these values from the &lt;strong&gt;maximumWaveformSize&lt;/strong&gt;, &lt;strong&gt;minimumWaveformSize&lt;/strong&gt;, and &lt;strong&gt;waveformQuantum&lt;/strong&gt; parameters in &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_QueryArbWfmCapabilities.html')"&gt;&lt;span class="monospace"&gt;niFgen_QueryArbWfmCapabilities&lt;/span&gt;&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;strong&gt;Default Value&lt;/strong&gt;:&lt;/strong&gt; None&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Data_Array">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Data Array&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformDataArray&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt16[]&lt;/td&gt;
        /// &lt;td&gt;Specifies the array of data you want to use for the new arbitrary waveform. The array must have at least as many elements as the value that you specify in &lt;strong&gt;waveformSize&lt;/strong&gt;.
        /// 
        /// &lt;p class="Body"&gt;You must normalize the data points in the array to be between &amp;#8211;32768 and 32767.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: None&lt;/p&gt;
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <param name="Waveform_Handle">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Waveform Handle&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;waveformHandle&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32*&lt;/td&gt;
        /// &lt;td&gt;The handle that identifies the new waveform.  This handle is used later when referring to this waveform.&lt;br&gt;&lt;br&gt;&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int CreateBinary16ArbWaveform(int Waveform_Size, short[] Waveform_Data_Array, out int Waveform_Handle)
        {
            int pInvokeResult = PInvoke.CreateBinary16ArbWaveform(this._handle, Waveform_Size, Waveform_Data_Array, out Waveform_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;[OBSOLETE] niFgen_ConfigureRefClockSource&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;[OBSOLETE] niFgen_ConfigureRefClockSource&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureRefClockSource&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;referenceClockSource);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the signal generator reference clock source. The signal generator uses the reference clock to derive frequencies and sample rates when generating waveforms.&lt;/p&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Reference_Clock_Source">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Reference Clock Source&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;referenceClockSource&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the reference clock source that you want the signal generator to use. NI-FGEN sets the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'NIFGEN_ATTR_REF_CLOCK_SOURCE.html')"&gt;&lt;span class="monospace"&gt;NIFGEN_ATTR_REF_CLOCK_SOURCE&lt;/span&gt;&lt;/a&gt; attribute to this value.
        /// 
        /// &lt;p class="Body"&gt;The signal generator derives the frequencies and sample rates that it uses to generate waveforms from the source you specify.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;For example, when you set this parameter to &lt;span class="monospace"&gt;NIFGEN_VAL_REF_CLOCK_EXTERNAL&lt;/span&gt;, the signal generator uses the signal it receives at its external clock terminal as the reference clock.&lt;/p&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="Bordered"&gt;&lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_REF_CLOCK_INTERNAL&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Internal clock source&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_REF_CLOCK_EXTERNAL&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;External clock source&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_REF_CLOCK_RTSI_CLOCK&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI clock&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_REF_CLOCK_TTL7&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;TTL 7&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PXI_CLK10&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;PXI 10&amp;nbsp;MHz clock&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_REF_IN&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;External clock source&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_0&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_1&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_2&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_3&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_4&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_5&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 5&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_6&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 6&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_7&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 7&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_CLK_IN&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;CLK IN front panel connector&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;NIFGEN_VAL_REF_CLOCK_INTERNAL&lt;/span&gt;&lt;/p&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureRefClockSource(int Reference_Clock_Source)
        {
            int pInvokeResult = PInvoke.ConfigureRefClockSource(this._handle, Reference_Clock_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;[OBSOLETE] niFgen_ConfigureRefClockFrequency&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;[OBSOLETE] niFgen_ConfigureRefClockFrequency&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureRefClockFrequency&amp;nbsp;(ViSession&amp;nbsp;vi, ViReal64&amp;nbsp;referenceClockFrequency);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Configures the signal generator reference clock frequency.  The signal generator uses the reference clock to derive frequencies and sample rates when generating waveforms.&lt;/p&gt;
        /// 
        /// &lt;table class="Borderless-Wide"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;
        /// &lt;td&gt;
        /// &lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;  The signal generator must not be in the Generating state when you call this function.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Reference_Clock_Frequency">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Reference Clock Frequency&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;referenceClockFrequency&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViReal64&lt;/td&gt;
        /// &lt;td&gt;The reference clock frequency in Hz.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: 10000000&lt;/p&gt;
        /// 
        /// &lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureRefClockFrequency(double Reference_Clock_Frequency)
        {
            int pInvokeResult = PInvoke.ConfigureRefClockFrequency(this._handle, Reference_Clock_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;[OBSOLETE] niFgen_ConfigureUpdateClockSource&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;[OBSOLETE] niFgen_ConfigureUpdateClockSource&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_ConfigureUpdateClockSource&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;updateClockSource);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Sets the source of the update clock of the signal generator.  The source can be internal or external.&lt;/p&gt;
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <param name="Update_Clock_Source">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Update Clock Source&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;updateClockSource&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViInt32&lt;/td&gt;
        /// &lt;td&gt;Specifies the update clock source.
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;&lt;strong&gt;Defined Values&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
        /// 
        /// &lt;table class="Bordered"&gt;&lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_INTERNAL&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Internal clock source&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_EXTERNAL&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;External clock source&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_PXI_STAR&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;PXI star&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_0&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 0 or PXI_Trig 0&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_1&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 1 or PXI_Trig 1&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_2&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 2 or PXI_Trig 2&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_3&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 3 or PXI_Trig 3&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_4&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 4 or PXI_Trig 4&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_5&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 5 or PXI_Trig 5&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_6&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 6 or PXI_Trig 6&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_RTSI_7&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;RTSI 7 or PXI_Trig 7&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_CLK_IN&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;CLK IN front panel connector&lt;/td&gt;&lt;/tr&gt;
        /// 
        /// &lt;tr&gt;&lt;td class="Bordered"&gt;&lt;span class="monospace"&gt;NIFGEN_VAL_DDC_CLK_IN&lt;/span&gt;&lt;/td&gt;
        /// &lt;td class="Bordered"&gt;Digital Data &amp;amp; Control clock in&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// 
        /// &lt;p class="Body"&gt;&lt;strong&gt;Default Value&lt;/strong&gt;: &lt;span class="monospace"&gt;NIFGEN_VAL_INTERNAL&lt;/span&gt;&lt;/p&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int ConfigureUpdateClockSource(int Update_Clock_Source)
        {
            int pInvokeResult = PInvoke.ConfigureUpdateClockSource(this._handle, Update_Clock_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// 
        /// &lt;title&gt;[OBSOLETE] niFgen_SendSoftwareTrigger&lt;/title&gt;
        /// &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;
        /// 
        /// &lt;h1 class="function"&gt;[OBSOLETE] niFgen_SendSoftwareTrigger&lt;/h1&gt;
        /// 
        /// &lt;p class="syntax"&gt;&lt;span class="monospace"&gt;ViStatus niFgen_SendSoftwareTrigger&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/span&gt;&lt;/p&gt;
        /// 
        /// &lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;
        /// 
        /// &lt;p class="Body"&gt;Sends a command to trigger the signal generator.&lt;/p&gt; 
        /// 
        /// &lt;table class="Borderless"&gt;
        /// &lt;tr&gt;
        /// &lt;td class="Icon"&gt;&lt;img src="note.gif" alt="Note"&gt;&lt;/td&gt;
        /// &lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;This function can act as an override for an external edge trigger. However, the NI&amp;nbsp;5401/5411/5431 
        /// do not support overriding an external digital edge trigger.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// </summary>
        /// <param name="vi">
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;vi&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;vi&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViSession&lt;/td&gt;
        /// &lt;td&gt;Identifies your instrument session. &lt;strong&gt;vi&lt;/strong&gt; is obtained from the 
        ///    &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_init.html')"&gt;&lt;span class="monospace"&gt;niFgen_init&lt;/span&gt;&lt;/a&gt;, &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitWithOptions.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitWithOptions&lt;/span&gt;&lt;/a&gt;, or &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cvinifgen_InitializeWithChannels.html')"&gt;&lt;span class="monospace"&gt;niFgen_InitializeWithChannels&lt;/span&gt;&lt;/a&gt; functions and identifies a particular instrument session.&lt;/td&gt;
        ///  &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// </param>
        /// <returns>
        /// &lt;html&gt;
        /// &lt;head&gt;
        /// &lt;script src="launchhelp.js" type="text/javascript"&gt;&lt;/script&gt;
        /// &lt;title&gt;Status&lt;/title&gt;
        ///  &lt;link rel="stylesheet" href="styles.css" type="text/css"&gt;
        /// 
        /// &lt;/head&gt;
        /// 
        /// &lt;body&gt;&lt;table class="borderless"&gt;&lt;tr&gt;
        /// &lt;td class="paramName"&gt;status&lt;/td&gt;
        /// &lt;td class="paramDataType"&gt;ViStatus&lt;/td&gt;
        /// &lt;td&gt;Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You can examine the status code from each call to an NI-FGEN function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call  the  &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_error_message.html')"&gt;&lt;span class="monospace"&gt;niFgen_error_message&lt;/span&gt;&lt;/a&gt; function. To obtain additional information about the error condition, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_GetError.html')"&gt;&lt;span class="monospace"&gt;niFgen_GetError&lt;/span&gt;&lt;/a&gt; function. To clear the error information from NI-FGEN, call the &lt;a href="javascript:LaunchMergedHelp('SigGenHelp.chm', 'fgencref.chm', 'cviniFgen_ClearError.html')"&gt;&lt;span class="monospace"&gt; niFgen_ClearError&lt;/span&gt;&lt;/a&gt; function. &lt;br&gt;&lt;br&gt;
        ///  
        /// 
        /// The general meaning of the status code is as follows:&lt;br&gt; &lt;br&gt;
        /// 
        /// 
        /// &lt;table class="bordered"&gt;
        /// &lt;tr&gt;
        /// &lt;th class="bordered"&gt;Value&lt;/th&gt;
        /// &lt;th class="bordered"&gt;Meaning&lt;/th&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;0&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Success&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Positive Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Warnings&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td class="bordered"&gt;Negative Values&lt;/td&gt;
        /// &lt;td class="bordered"&gt;Errors&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// 
        /// &lt;/body&gt;
        /// &lt;/html&gt;
        /// 
        /// 
        /// 
        /// 
        /// </returns>
        public int SendSoftwareTrigger()
        {
            int pInvokeResult = PInvoke.SendSoftwareTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        public void Dispose()
        {
            this.Dispose(true);
            System.GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if ((this._disposed == false))
            {
                PInvoke.close(this._handle);
                this._handle = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
            }
            this._disposed = true;
        }

        public int GetInt32(niFgenProperties propertyId, string repeatedCapabilityOrChannel)
        {
            int val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViInt32(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public int GetInt32(niFgenProperties propertyId)
        {
            return this.GetInt32(propertyId, "");
        }

        public long GetInt64(niFgenProperties propertyId, string repeatedCapabilityOrChannel)
        {
            long val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViInt64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public long GetInt64(niFgenProperties propertyId)
        {
            return this.GetInt64(propertyId, "");
        }

        public double GetDouble(niFgenProperties propertyId, string repeatedCapabilityOrChannel)
        {
            double val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViReal64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public double GetDouble(niFgenProperties propertyId)
        {
            return this.GetDouble(propertyId, "");
        }

        public string GetString(niFgenProperties propertyId, string repeatedCapabilityOrChannel)
        {
            System.Text.StringBuilder newVal = new System.Text.StringBuilder(512);
            int size = PInvoke.GetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), 512, newVal);
            if ((size < 0))
            {
                PInvoke.ThrowError(this._handle, size);
            }
            else
            {
                if ((size > 0))
                {
                    newVal.Capacity = size;
                    PInvoke.TestForError(this._handle, PInvoke.GetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), size, newVal));
                }
            }
            return newVal.ToString();
        }

        public string GetString(niFgenProperties propertyId)
        {
            return this.GetString(propertyId, "");
        }

        public bool GetBoolean(niFgenProperties propertyId, string repeatedCapabilityOrChannel)
        {
            ushort val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViBoolean(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return System.Convert.ToBoolean(val);
        }

        public bool GetBoolean(niFgenProperties propertyId)
        {
            return this.GetBoolean(propertyId, "");
        }

        public void SetInt32(niFgenProperties propertyId, string repeatedCapabilityOrChannel, int val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViInt32(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetInt32(niFgenProperties propertyId, int val)
        {
            this.SetInt32(propertyId, "", val);
        }

        public void SetInt64(niFgenProperties propertyId, string repeatedCapabilityOrChannel, long val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViInt64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetInt64(niFgenProperties propertyId, long val)
        {
            this.SetInt64(propertyId, "", val);
        }

        public void SetDouble(niFgenProperties propertyId, string repeatedCapabilityOrChannel, double val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViReal64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetDouble(niFgenProperties propertyId, double val)
        {
            this.SetDouble(propertyId, "", val);
        }

        public void SetString(niFgenProperties propertyId, string repeatedCapabilityOrChannel, string val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetString(niFgenProperties propertyId, string val)
        {
            this.SetString(propertyId, "", val);
        }

        public void SetBoolean(niFgenProperties propertyId, string repeatedCapabilityOrChannel, bool val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViBoolean(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), System.Convert.ToUInt16(val)));
        }

        public void SetBoolean(niFgenProperties propertyId, bool val)
        {
            this.SetBoolean(propertyId, "", val);
        }

        private class PInvoke
        {

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_init", CallingConvention = CallingConvention.StdCall)]
            public static extern int init(string Resource_Name, ushort ID_Query, ushort Reset_Device, out System.IntPtr vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_InitWithOptions", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitWithOptions(string Resource_Name, ushort ID_Query, ushort Reset_Device, string Option_String, out System.IntPtr vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_InitializeWithChannels", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitializeWithChannels(string Resource_Name, string Channel_Name, ushort Reset_Device, string Option_String, out System.IntPtr vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_InitExtCal", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitExtCal(string Resource_Name, string Password, out System.IntPtr vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_Commit", CallingConvention = CallingConvention.StdCall)]
            public static extern int Commit(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_reset", CallingConvention = CallingConvention.StdCall)]
            public static extern int reset(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureOperationMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOperationMode(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Operation_Mode);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureOutputMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOutputMode(System.Runtime.InteropServices.HandleRef vi, int Output_Mode);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureChannels", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureChannels(System.Runtime.InteropServices.HandleRef vi, string Channels);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureOutputEnabled", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOutputEnabled(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, ushort Enabled);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureOutputImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOutputImpedance(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, double Impedance);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_EnableAnalogFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int EnableAnalogFilter(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, double Filter_Correction_Frequency);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_DisableAnalogFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int DisableAnalogFilter(System.Runtime.InteropServices.HandleRef vi, string Channel_Name);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_EnableDigitalFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int EnableDigitalFilter(System.Runtime.InteropServices.HandleRef vi, string Channel_Name);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_DisableDigitalFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int DisableDigitalFilter(System.Runtime.InteropServices.HandleRef vi, string Channel_Name);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_EnableDigitalPatterning", CallingConvention = CallingConvention.StdCall)]
            public static extern int EnableDigitalPatterning(System.Runtime.InteropServices.HandleRef vi, string Channel_Name);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_DisableDigitalPatterning", CallingConvention = CallingConvention.StdCall)]
            public static extern int DisableDigitalPatterning(System.Runtime.InteropServices.HandleRef vi, string Channel_Name);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureStandardWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureStandardWaveform(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Waveform, double Amplitude, double DC_Offset, double Frequency, double Start_Phase);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_DefineUserStandardWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int DefineUserStandardWaveform(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Waveform_Size, double[] Waveform_Data_Array);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ClearUserStandardWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearUserStandardWaveform(System.Runtime.InteropServices.HandleRef vi, string Channel_Name);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureFrequency(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, double Frequency);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAmplitude(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, double Amplitude);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CreateFreqList", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateFreqList(System.Runtime.InteropServices.HandleRef vi, int Waveform, int Frequency_List_Length, double[] Frequency_Array, double[] Duration_Array, out int Frequency_List_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureFreqList", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureFreqList(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Frequency_List_Handle, double Amplitude, double DC_Offset, double Start_Phase);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ClearFreqList", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearFreqList(System.Runtime.InteropServices.HandleRef vi, int Frequency_List_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_QueryFreqListCapabilities", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryFreqListCapabilities(System.Runtime.InteropServices.HandleRef vi, out int Maximum_Number_Of_Freq_Lists, out int Minimum_Frequency_List_Length, out int Maximum_Frequency_List_Length, out double Minimum_Frequency_List_Duration, out double Maximum_Frequency_List_Duration, out double Frequency_List_Duration_Quantum);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureGain(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, double Gain);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureSampleRate", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSampleRate(System.Runtime.InteropServices.HandleRef vi, double Sample_Rate);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_QueryArbWfmCapabilities", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryArbWfmCapabilities(System.Runtime.InteropServices.HandleRef vi, out int Maximum_Number_of_Waveforms, out int Waveform_Quantum, out int Minimum_Waveform_Size, out int Maximum_Waveform_Size);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CreateWaveformF64", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateWaveformF64(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Waveform_Size, double[] Waveform_Data_Array, out int Waveform_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CreateWaveformI16", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateWaveformI16(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Waveform_Size, short[] Waveform_Data_Array, out int Waveform_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CreateWaveformComplexF64", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateWaveformComplexF64(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Number_of_Samples, nicomplexnumber[] Waveform_Data_Array, out int Waveform_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CreateWaveformFromFileI16", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateWaveformFromFileI16(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, string FileName, int Byte_Order, out int Waveform_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CreateWaveformFromFileF64", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateWaveformFromFileF64(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, string FileName, int Byte_Order, out int Waveform_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CreateWaveformFromFileHWS", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateWaveformFromFileHWS(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, string FileName, ushort Use_Rate_From_Waveform, ushort Use_Gain___Offset_From_Waveform, out int Waveform_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureArbWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureArbWaveform(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Waveform_Handle, double Gain, double Offset);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ClearArbWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearArbWaveform(System.Runtime.InteropServices.HandleRef vi, int Waveform_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_QueryArbSeqCapabilities", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryArbSeqCapabilities(System.Runtime.InteropServices.HandleRef vi, out int Maximum_Number_of_Sequences, out int Minimum_Sequence_Length, out int Maximum_Sequence_Length, out int Maximum_Loop_Count);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CreateArbSequence", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateArbSequence(System.Runtime.InteropServices.HandleRef vi, int Sequence_Length, int[] Waveform_Handles_Array, int[] Loop_Counts_Array, out int Sequence_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CreateAdvancedArbSequence", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateAdvancedArbSequence(System.Runtime.InteropServices.HandleRef vi, int Sequence_Length, int[] Waveform_Handles_Array, int[] Loop_Counts_Array, int[] Sample_Counts_Array, int[] Marker_Location_Array, [In, Out] int[] Coerced_Markers_Array, out int Sequence_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureArbSequence", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureArbSequence(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Sequence_Handle, double Gain, double Offset);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ClearArbSequence", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearArbSequence(System.Runtime.InteropServices.HandleRef vi, int Sequence_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ClearArbMemory", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearArbMemory(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_AllocateWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int AllocateWaveform(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Waveform_Size, out int Waveform_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_SetWaveformNextWritePosition", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetWaveformNextWritePosition(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Waveform_Handle, int relativeTo, int offset);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_WriteWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteWaveform(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Waveform_Handle, int Size, double[] Data);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_WriteWaveformComplexF64", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteWaveformComplexF64(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Number_of_Samples, nicomplexnumber[] Data, int Waveform_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_WriteBinary16Waveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteBinary16Waveform(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Waveform_Handle, int Size, short[] Data);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_WriteComplexBinary16Waveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteComplexBinary16Waveform(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Waveform_Handle, int Size, short Data);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureReferenceClock", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureReferenceClock(System.Runtime.InteropServices.HandleRef vi, string Reference_Clock_Source, double Reference_Clock_Frequency);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureSampleClockSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSampleClockSource(System.Runtime.InteropServices.HandleRef vi, string Sample_Clock_Source);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureClockMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureClockMode(System.Runtime.InteropServices.HandleRef vi, int Clock_Mode);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_AdjustSampleClockRelativeDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int AdjustSampleClockRelativeDelay(System.Runtime.InteropServices.HandleRef vi, double Adjustment_Time);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureDigitalEdgeStartTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDigitalEdgeStartTrigger(System.Runtime.InteropServices.HandleRef vi, string Source, int Edge);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureP2PEndpointFullnessStartTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureP2PEndpointFullnessStartTrigger(System.Runtime.InteropServices.HandleRef vi, int p2pEndpointFullnessLevel);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureSoftwareEdgeStartTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSoftwareEdgeStartTrigger(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_DisableStartTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int DisableStartTrigger(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureDigitalEdgeScriptTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDigitalEdgeScriptTrigger(System.Runtime.InteropServices.HandleRef vi, string Trigger_ID, string Source, int Edge);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureDigitalLevelScriptTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDigitalLevelScriptTrigger(System.Runtime.InteropServices.HandleRef vi, string Trigger_ID, string Source, int Trigger_When);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureSoftwareEdgeScriptTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSoftwareEdgeScriptTrigger(System.Runtime.InteropServices.HandleRef vi, string Trigger_ID);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_DisableScriptTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int DisableScriptTrigger(System.Runtime.InteropServices.HandleRef vi, string Trigger_ID);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureTriggerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerMode(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Trigger_Mode);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_SendSoftwareEdgeTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int SendSoftwareEdgeTrigger(System.Runtime.InteropServices.HandleRef vi, int Trigger, string Trigger_ID);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureSynchronization", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSynchronization(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Synchronization_Source);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ExportSignal", CallingConvention = CallingConvention.StdCall)]
            public static extern int ExportSignal(System.Runtime.InteropServices.HandleRef vi, int Signal, string Signal_Identifier, string Output_Terminal);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_RouteSignalOut", CallingConvention = CallingConvention.StdCall)]
            public static extern int RouteSignalOut(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Route_Signal_From, int Route_Signal_To);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_AllocateNamedWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int AllocateNamedWaveform(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, string Waveform_Name, int Waveform_Size);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_SetNamedWaveformNextWritePosition", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetNamedWaveformNextWritePosition(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, string Waveform_Name, int relativeTo, int offset);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_WriteNamedWaveformF64", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteNamedWaveformF64(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, string Waveform_Name, int Size, double[] Data);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_WriteNamedWaveformI16", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteNamedWaveformI16(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, string Waveform_Name, int Size, short[] Data);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_WriteNamedWaveformComplexF64", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteNamedWaveformComplexF64(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, string Waveform_Name, int Size, nicomplexnumber[] Data);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_WriteNamedWaveformComplexI16", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteNamedWaveformComplexI16(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, string Waveform_Name, int Size, short Data);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_DeleteNamedWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteNamedWaveform(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, string Waveform_Name);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_WriteScript", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteScript(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, string Script);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_DeleteScript", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteScript(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, string Script_Name);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureCustomFIRFilterCoefficients", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureCustomFIRFilterCoefficients(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Number_of_Coefficients, double[] Coefficients_Array);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetFIRFilterCoefficients", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFIRFilterCoefficients(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Array_Size, double[] Coefficients_Array, int[] Number_of_Coefficients_Read);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ManualEnableP2PStream", CallingConvention = CallingConvention.StdCall)]
            public static extern int ManualEnableP2PStream(System.Runtime.InteropServices.HandleRef vi, string Endpoint_Name);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_WriteP2PEndpointI16", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteP2PEndpointI16(System.Runtime.InteropServices.HandleRef vi, string Endpoint_Name, int Number_Of_Samples, short[] Endpoint_Data);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetStreamEndpointHandle", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetStreamEndpointHandle(System.Runtime.InteropServices.HandleRef vi, string streamEndpoint, out uint readerHandle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ResetAttribute", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetAttribute(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Attribute_ID);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_InitiateGeneration", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitiateGeneration(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_AbortGeneration", CallingConvention = CallingConvention.StdCall)]
            public static extern int AbortGeneration(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetHardwareState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHardwareState(System.Runtime.InteropServices.HandleRef vi, out int state);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_WaitUntilDone", CallingConvention = CallingConvention.StdCall)]
            public static extern int WaitUntilDone(System.Runtime.InteropServices.HandleRef vi, int maxTime);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_IsDone", CallingConvention = CallingConvention.StdCall)]
            public static extern int IsDone(System.Runtime.InteropServices.HandleRef vi, out ushort Done);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ResetWithDefaults", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetWithDefaults(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ResetDevice", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetDevice(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_Disable", CallingConvention = CallingConvention.StdCall)]
            public static extern int Disable(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_self_test", CallingConvention = CallingConvention.StdCall)]
            public static extern int self_test(System.Runtime.InteropServices.HandleRef vi, out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_revision_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int revision_query(System.Runtime.InteropServices.HandleRef vi, System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetNextCoercionRecord", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNextCoercionRecord(System.Runtime.InteropServices.HandleRef vi, int Buffer_Size, System.Text.StringBuilder Coercion_Record);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_error_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_query(System.Runtime.InteropServices.HandleRef vi, out int Error_Code, System.Text.StringBuilder Error_Message);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ErrorHandler", CallingConvention = CallingConvention.StdCall)]
            public static extern int ErrorHandler(System.Runtime.InteropServices.HandleRef vi, int Error_Code, System.Text.StringBuilder Error_Message);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetNextInterchangeWarning", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNextInterchangeWarning(System.Runtime.InteropServices.HandleRef vi, int Buffer_Size, System.Text.StringBuilder Interchange_Warning);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ClearInterchangeWarnings", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearInterchangeWarnings(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ResetInterchangeCheck", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetInterchangeCheck(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CloseExtCal", CallingConvention = CallingConvention.StdCall)]
            public static extern int CloseExtCal(System.Runtime.InteropServices.HandleRef vi, int Action);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_SelfCal", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelfCal(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_InitializeAnalogOutputCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitializeAnalogOutputCalibration(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_WriteBinary16AnalogStaticValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteBinary16AnalogStaticValue(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, short Value);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CalAdjustMainPathPreAmpOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustMainPathPreAmpOffset(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Configuration, int[] Gain_DAC_Values, int[] Offset_DAC_Values, double[] Measured_Outputs);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CalAdjustMainPathPreAmpGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustMainPathPreAmpGain(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Configuration, int[] Main_DAC_Values, int[] Gain_DAC_Values, int[] Offset_DAC_Values, double[] Measured_Outputs);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CalAdjustMainPathPostAmpGainAndOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustMainPathPostAmpGainAndOffset(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Configuration, int[] Main_DAC_Values, int[] Gain_DAC_Values, int[] Offset_DAC_Values, double[] Measured_Outputs);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CalAdjustDirectPathGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustDirectPathGain(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int[] Main_DAC_Values, int[] Gain_DAC_Values, double[] Measured_Outputs);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CalAdjustMainPathOutputImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustMainPathOutputImpedance(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Configuration, double Load_Impedance, double Measured_Source_Voltage, double Measured_Voltage_Across_Load);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CalAdjustDirectPathOutputImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustDirectPathOutputImpedance(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Configuration, double Load_Impedance, double Measured_Source_Voltage, double Measured_Voltage_Across_Load);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_InitializeOscillatorFrequencyCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitializeOscillatorFrequencyCalibration(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CalAdjustOscillatorFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustOscillatorFrequency(System.Runtime.InteropServices.HandleRef vi, double Desired_Frequency, double Measured_Frequency);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_InitializeCalADCCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitializeCalADCCalibration(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CalAdjustADC", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustADC(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Configuration, double[] Voltages_Measured_Externally, double[] Voltages_Measured_With_CalADC);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ReadCalADC", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadCalADC(System.Runtime.InteropServices.HandleRef vi, int Number_of_Reads_to_Average, ushort Return_Calibrated_Value, out double Cal_ADC_Value);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_InitializeFlatnessCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitializeFlatnessCalibration(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CalAdjustFlatness", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustFlatness(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Configuration, double Requested_Amplitude, double[] Frequencies, double[] Measured_Amplitudes, int Number_Of_Measurements);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetSelfCalSupported", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSelfCalSupported(System.Runtime.InteropServices.HandleRef vi, out ushort Self_Cal_Supported);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetSelfCalLastDateAndTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSelfCalLastDateAndTime(System.Runtime.InteropServices.HandleRef vi, out int Year, out int Month, out int Day, out int Hour, out int Minute);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetExtCalLastDateAndTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetExtCalLastDateAndTime(System.Runtime.InteropServices.HandleRef vi, out int Year, out int Month, out int Day, out int Hour, out int Minute);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetSelfCalLastTemp", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSelfCalLastTemp(System.Runtime.InteropServices.HandleRef vi, out double Temperature);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetExtCalLastTemp", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetExtCalLastTemp(System.Runtime.InteropServices.HandleRef vi, out double Temperature);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetExtCalRecommendedInterval", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetExtCalRecommendedInterval(System.Runtime.InteropServices.HandleRef vi, out int Months);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ChangeExtCalPassword", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChangeExtCalPassword(System.Runtime.InteropServices.HandleRef vi, string Old_Password, string New_Password);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_SetCalUserDefinedInfo", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCalUserDefinedInfo(System.Runtime.InteropServices.HandleRef vi, string Info);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetCalUserDefinedInfo", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalUserDefinedInfo(System.Runtime.InteropServices.HandleRef vi, string Info);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetCalUserDefinedInfoMaxSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalUserDefinedInfoMaxSize(System.Runtime.InteropServices.HandleRef vi, out int Info_Size);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ReadCurrentTemperature", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadCurrentTemperature(System.Runtime.InteropServices.HandleRef vi, out double Temperature);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_RestoreLastExtCalConstants", CallingConvention = CallingConvention.StdCall)]
            public static extern int RestoreLastExtCalConstants(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CalAdjustCalADC", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalAdjustCalADC(System.Runtime.InteropServices.HandleRef vi, double[] Voltages_Measured_Externally, double[] Voltages_Measured_With_CalADC);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerSource(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Trigger_Source);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CreateArbWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateArbWaveform(System.Runtime.InteropServices.HandleRef vi, int Waveform_Size, double[] Waveform_Data_Array, out int Waveform_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_CreateBinary16ArbWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateBinary16ArbWaveform(System.Runtime.InteropServices.HandleRef vi, int Waveform_Size, short[] Waveform_Data_Array, out int Waveform_Handle);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureRefClockSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureRefClockSource(System.Runtime.InteropServices.HandleRef vi, int Reference_Clock_Source);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureRefClockFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureRefClockFrequency(System.Runtime.InteropServices.HandleRef vi, double Reference_Clock_Frequency);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_ConfigureUpdateClockSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureUpdateClockSource(System.Runtime.InteropServices.HandleRef vi, int Update_Clock_Source);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_SendSoftwareTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int SendSoftwareTrigger(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_close", CallingConvention = CallingConvention.StdCall)]
            public static extern int close(System.Runtime.InteropServices.HandleRef vi);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_error_message", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_message(System.Runtime.InteropServices.HandleRef vi, int Error_Code, System.Text.StringBuilder Error_Message_2);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetAttributeViInt32", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViInt32(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Attribute_ID, out int Attribute_Value);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetAttributeViInt64", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViInt64(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Attribute_ID, out long Attribute_Value);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetAttributeViReal64", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViReal64(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Attribute_ID, out double Attribute_Value);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetAttributeViString", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViString(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Attribute_ID, int Array_Size, System.Text.StringBuilder Attribute_Value);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetAttributeViBoolean", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViBoolean(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Attribute_ID, out ushort Attribute_Value);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetAttributeViSession", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViSession(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Attribute_ID, out System.Runtime.InteropServices.HandleRef Attribute_Value);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_SetAttributeViInt32", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViInt32(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Attribute_ID, int Attribute_Value);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_SetAttributeViInt64", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViInt64(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Attribute_ID, long Attribute_Value);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_SetAttributeViReal64", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViReal64(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Attribute_ID, double Attribute_Value);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_SetAttributeViString", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViString(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Attribute_ID, string Attribute_Value);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_SetAttributeViBoolean", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViBoolean(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Attribute_ID, ushort Attribute_Value);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_SetAttributeViSession", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViSession(System.Runtime.InteropServices.HandleRef vi, string Channel_Name, int Attribute_ID, System.Runtime.InteropServices.HandleRef Attribute_Value);

            [DllImport("niFgen_32.dll", EntryPoint = "niFgen_GetError", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetError(System.Runtime.InteropServices.HandleRef vi, out int Error_Code, int Error_Description_Buffer_Size, System.Text.StringBuilder Error_Description);


            public static int TestForError(System.Runtime.InteropServices.HandleRef handle, int status)
            {
                if ((status < 0))
                {
                    PInvoke.ThrowError(handle, status);
                }
                return status;
            }

            public static int ThrowError(System.Runtime.InteropServices.HandleRef handle, int code)
            {
                int status;
                int size = PInvoke.GetError(handle, out status, 0, null);
                System.Text.StringBuilder msg = new System.Text.StringBuilder();
                if ((size >= 0))
                {
                    msg.Capacity = size;
                    PInvoke.GetError(handle, out status, size, msg);
                }
                throw new System.Runtime.InteropServices.ExternalException(msg.ToString(), code);
            }
        }
    }

    public class niFgenConstants
    {

        public const int OperateContinuous = 0;

        public const int OutputFunc = 0;

        public const int OutputFreqList = 101;

        public const int OutputArb = 1;

        public const int OutputSeq = 2;

        public const int OutputScript = 102;

        public const int WfmSine = 1;

        public const int WfmSquare = 2;

        public const int WfmTriangle = 3;

        public const int WfmRampUp = 4;

        public const int WfmRampDown = 5;

        public const int WfmDc = 6;

        public const int WfmUser = 102;

        public const int LittleEndian = 0;

        public const int BigEndian = 1;

        public const int WaveformPositionStart = 0;

        public const int WaveformPositionCurrent = 1;

        public const int DivideDown = 1;

        public const int HighResolution = 0;

        public const int Automatic = 2;

        public const int RisingEdge = 101;

        public const int FallingEdge = 102;

        public const int ActiveHigh = 101;

        public const int ActiveLow = 102;

        public const int Single = 1;

        public const int Continuous = 2;

        public const int Stepped = 3;

        public const int Burst = 4;

        public const int StartTrigger = 1004;

        public const int ScriptTrigger = 103;

        public const int None = 1000;

        public const int Ttl0 = 111;

        public const int Ttl1 = 112;

        public const int Ttl2 = 113;

        public const int Ttl3 = 114;

        public const int Ttl4 = 115;

        public const int Ttl5 = 116;

        public const int Ttl6 = 117;

        public const int Rtsi0 = 141;

        public const int Rtsi1 = 142;

        public const int Rtsi2 = 143;

        public const int Rtsi3 = 144;

        public const int Rtsi4 = 145;

        public const int Rtsi5 = 146;

        public const int Rtsi6 = 147;

        public const int SampleClock = 101;

        public const int ReferenceClock = 102;

        public const int OnboardReferenceClock = 1019;

        public const int SyncOut = 1002;

        public const int MarkerEvent = 1001;

        public const int DataMarkerEvent = 108;

        public const int ReadyForStartEvent = 105;

        public const int StartedEvent = 106;

        public const int DoneEvent = 107;

        public const int Synchronization = 1007;

        public const int Marker = 1001;

        public const int PllRefSource = 1003;

        public const int UpdateClock = 1017;

        public const int OutStartTrigger = 1004;

        public const int BoardClock = 1006;

        public const int SoftwareTrig = 2;

        public const int RefOut = 1008;

        public const int PxiClk10 = 1201;

        public const int Pfi0 = 1011;

        public const int Rtsi7 = 1010;

        public const int RefClockRtsiClock = 101;

        public const int ClockOut = 1009;

        public const int PxiStar = 131;

        public const int ExtCalAbort = 0;

        public const int ExtCalCommit = 1;

        public const int CalConfigMainPathFilterOff0db = 0;

        public const int CalConfigMainPathFilterOff3db = 1;

        public const int CalConfigMainPathFilterOff6db = 2;

        public const int CalConfigMainPathFilterOff9db = 3;

        public const int CalConfigMainPathFilterOff12db = 4;

        public const int CalConfigMainPathFilterOn0db = 5;

        public const int CalConfigMainPathFilterOn3db = 6;

        public const int CalConfigMainPathFilterOn6db = 7;

        public const int CalConfigMainPathFilterOn9db = 8;

        public const int CalConfigMainPathFilterOn12db = 9;

        public const int CalConfigMainPathLowGain0db = 0;

        public const int CalConfigMainPathLowGain12db = 1;

        public const int CalConfigMainPathLowGain24db = 2;

        public const int CalConfigMainPathLowGain36db = 3;

        public const int CalConfigMainPathHighGain0db = 4;

        public const int CalConfigMainPathHighGain12db = 5;

        public const int CalConfigMainPathHighGain24db = 6;

        public const int CalConfigMainPathHighGain36db = 7;

        public const int CalConfigMainPathLowGain0db50ohms = 0;

        public const int CalConfigMainPathLowGain0db75ohms = 1;

        public const int CalConfigMainPathLowGain12db50ohms = 2;

        public const int CalConfigMainPathLowGain12db75ohms = 3;

        public const int CalConfigMainPathLowGain24db50ohms = 4;

        public const int CalConfigMainPathLowGain24db75ohms = 5;

        public const int CalConfigMainPathLowGain36db50ohms = 6;

        public const int CalConfigMainPathLowGain36db75ohms = 7;

        public const int CalConfigMainPathHighGain0db50ohms = 8;

        public const int CalConfigMainPathHighGain0db75ohms = 9;

        public const int CalConfigMainPathHighGain12db50ohms = 10;

        public const int CalConfigMainPathHighGain12db75ohms = 11;

        public const int CalConfigMainPathHighGain24db50ohms = 12;

        public const int CalConfigMainPathHighGain24db75ohms = 13;

        public const int CalConfigMainPathHighGain36db50ohms = 14;

        public const int CalConfigMainPathHighGain36db75ohms = 15;

        public const int CalConfigMainPathDifferential = 16;

        public const int CalConfigDirectPath50ohms = 0;

        public const int CalConfigDirectPath75ohms = 1;

        public const int CalConfigDirectPathDifferential = 2;

        public const int CalConfigDirectPath = 10;

        public const int CalConfigMainPath = 11;

        public const int CalConfigLowGainPathPreAmp0db = 0;

        public const int CalConfigLowGainPathPreAmp3db = 1;

        public const int CalConfigLowGainPathPreAmp6db = 2;

        public const int CalConfigLowGainPathPreAmp9db = 3;

        public const int CalConfigLowGainPathPreAmp12db = 4;

        public const int CalConfigHighGainPathPreAmp0db = 5;

        public const int CalConfigHighGainPathPreAmp3db = 6;

        public const int CalConfigHighGainPathPreAmp6db = 7;

        public const int CalConfigHighGainPathPreAmp9db = 8;

        public const int CalConfigHighGainPathPreAmp12db = 9;

        public const int CalConfigMainPath0db = 12;

        public const int CalConfigMainPath9db = 13;

        public const int CalConfigMainPath33db = 14;

        public const int External = 1;

        public const int Immediate = 0;

        public const int Pfi1 = 1012;

        public const int Pfi2 = 1013;

        public const int Pfi3 = 1014;

        public const int Ttl7 = 118;

        public const int RefClockInternal = 0;

        public const int RefClockExternal = 1;

        public const int RefClockTtl7 = 118;

        public const int RefIn = 1200;

        public const int ClkIn = 1202;

        public const int DdcClkIn = 1203;

        public const int Internal = 0;

        public const int MainAnalogPath = 0;

        public const int DirectAnalogPath = 1;

        public const int FixedLowGainAnalogPath = 2;

        public const int FixedHighGainAnalogPath = 3;

        public const double _50Ohms = 50D;

        public const double _75Ohms = 75D;

        public const int SingleEnded = 300;

        public const int Differential = 301;

        public const int HoldLastValue = 400;

        public const int JumpToValue = 401;

        public const int OspReal = 0;

        public const int OspComplex = 1;

        public const int OspIf = 0;

        public const int OspBaseband = 1;

        public const int OspFlat = 0;

        public const int OspRaisedCosine = 1;

        public const int OspRootRaisedCosine = 2;

        public const int OspGaussian = 3;

        public const int OspCustom = 4;

        public const int ErrorReportingError = 0;

        public const int ErrorReportingDisabled = 2;

        public const int OspOverflowNone = 0;

        public const int OspOverflowPreFilterGainI = 1;

        public const int OspOverflowPreFilterGainQ = 2;

        public const int OspOverflowPreFilterOffsetI = 4;

        public const int OspOverflowPreFilterOffsetQ = 8;

        public const int OspOverflowFirFilterI = 16;

        public const int OspOverflowFirFilterQ = 32;

        public const int OspOverflowCicFilterI = 64;

        public const int OspOverflowCicFilterQ = 128;

        public const int OspOverflowComplexData = 256;

        public const int AddrPhysical = 0;

        public const int AddrVirtual = 1;

        public const int WfmNoise = 101;

        public const int Pulse = 101;

        public const int Level = 102;

        public const int SampleClockPeriods = 101;

        public const int Seconds = 102;

        public const int High = 101;

        public const int Low = 102;

        public const int TrigNone = 101;

        public const int DigitalEdge = 102;

        public const int SoftwareEdge = 104;

        public const int P2pEndpointFullness = 106;

        public const int DigitalLevel = 103;

        public const int BusInvalid = 0;

        public const int BusAt = 1;

        public const int BusPci = 2;

        public const int BusPxi = 3;

        public const int BusVxi = 4;

        public const int BusPcmcia = 5;

        public const int AnalogOutput = 0;

        public const int InternalVoltageReference = 1;

        public const int Ground = 2;

        public const int AnalogOutputDifferential = 3;

        public const int AnalogOutputPlus = 4;

        public const int AnalogOutputMinus = 5;

        public const int AnalogOutputIdle = 6;

        public const int PalB = 0;

        public const int PalD = 1;

        public const int PalG = 2;

        public const int PalH = 3;

        public const int PalI = 4;

        public const int PalM = 5;

        public const int PalN = 6;

        public const int NtscM = 7;
    }

    public enum niFgenProperties
    {

        /// <summary>
        /// System.Int32
        /// </summary>
        OutputMode = 1250001,

        /// <summary>
        /// System.Boolean
        /// </summary>
        OutputEnabled = 1250003,

        /// <summary>
        /// System.Double
        /// </summary>
        DigitalGain = 1150254,

        /// <summary>
        /// System.Int32
        /// </summary>
        AnalogPath = 1150222,

        /// <summary>
        /// System.Double
        /// </summary>
        LoadImpedance = 1150220,

        /// <summary>
        /// System.Double
        /// </summary>
        OutputImpedance = 1250004,

        /// <summary>
        /// System.Int32
        /// </summary>
        TerminalConfiguration = 1150365,

        /// <summary>
        /// System.Double
        /// </summary>
        CommonModeOffset = 1150366,

        /// <summary>
        /// System.Double
        /// </summary>
        ChannelDelay = 1150369,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AnalogFilterEnabled = 1150103,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DigitalFilterEnabled = 1150102,

        /// <summary>
        /// System.Double
        /// </summary>
        DigitalFilterInterpolationFactor = 1150218,

        /// <summary>
        /// System.Boolean
        /// </summary>
        FlatnessCorrectionEnabled = 1150323,

        /// <summary>
        /// System.Int32
        /// </summary>
        AnalogDataMask = 1150234,

        /// <summary>
        /// System.Int32
        /// </summary>
        AnalogStaticValue = 1150235,

        /// <summary>
        /// System.Int32
        /// </summary>
        DigitalDataMask = 1150236,

        /// <summary>
        /// System.Int32
        /// </summary>
        DigitalStaticValue = 1150237,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DigitalPatternEnabled = 1150101,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AuxPowerEnabled = 1150411,

        /// <summary>
        /// System.Int32
        /// </summary>
        IdleBehavior = 1150377,

        /// <summary>
        /// System.Int32
        /// </summary>
        IdleValue = 1150378,

        /// <summary>
        /// System.Int32
        /// </summary>
        WaitBehavior = 1150379,

        /// <summary>
        /// System.Int32
        /// </summary>
        WaitValue = 1150380,

        /// <summary>
        /// System.Double
        /// </summary>
        ArbGain = 1250202,

        /// <summary>
        /// System.Double
        /// </summary>
        ArbOffset = 1250203,

        /// <summary>
        /// System.Int32
        /// </summary>
        ArbWaveformHandle = 1250201,

        /// <summary>
        /// System.Int32
        /// </summary>
        ArbMarkerPosition = 1150327,

        /// <summary>
        /// System.Int32
        /// </summary>
        ArbRepeatCount = 1150328,

        /// <summary>
        /// System.Int32
        /// </summary>
        ArbSequenceHandle = 1250211,

        /// <summary>
        /// System.Int32
        /// </summary>
        MaxNumSequences = 1250212,

        /// <summary>
        /// System.Int32
        /// </summary>
        MaxSequenceLength = 1250214,

        /// <summary>
        /// System.Int32
        /// </summary>
        MinSequenceLength = 1250213,

        /// <summary>
        /// System.Int32
        /// </summary>
        MaxLoopCount = 1250215,

        /// <summary>
        /// System.String
        /// </summary>
        ScriptToGenerate = 1150270,

        /// <summary>
        /// System.Int32
        /// </summary>
        WaveformQuantum = 1250206,

        /// <summary>
        /// System.Int32
        /// </summary>
        MaxNumWaveforms = 1250205,

        /// <summary>
        /// System.Int32
        /// </summary>
        MinWaveformSize = 1250207,

        /// <summary>
        /// System.Int32
        /// </summary>
        MaxWaveformSize = 1250208,

        /// <summary>
        /// System.Int32
        /// </summary>
        DataTransferBlockSize = 1150241,

        /// <summary>
        /// System.Int32
        /// </summary>
        FileTransferBlockSize = 1150240,

        /// <summary>
        /// System.Double
        /// </summary>
        DataTransferMaximumBandwidth = 1150373,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DirectDmaEnabled = 1150244,

        /// <summary>
        /// System.Int32
        /// </summary>
        DirectDmaWindowAddress = 1150274,

        /// <summary>
        /// System.Int32
        /// </summary>
        DirectDmaWindowSize = 1150245,

        /// <summary>
        /// System.String
        /// </summary>
        StreamingWaveformName = 1150326,

        /// <summary>
        /// System.Int32
        /// </summary>
        StreamingWaveformHandle = 1150324,

        /// <summary>
        /// System.Int32
        /// </summary>
        StreamingSpaceAvailableInWaveform = 1150325,

        /// <summary>
        /// System.Double
        /// </summary>
        StreamingWriteTimeout = 1150409,

        /// <summary>
        /// System.Int32
        /// </summary>
        DataTransferMaximumInFlightReads = 1150375,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PciDmaOptimizationsEnabled = 1150362,

        /// <summary>
        /// System.Int32
        /// </summary>
        DataTransferPreferredPacketSize = 1150374,

        /// <summary>
        /// System.Boolean
        /// </summary>
        OspEnabled = 1150246,

        /// <summary>
        /// System.Double
        /// </summary>
        OspIqRate = 1150248,

        /// <summary>
        /// System.Int32
        /// </summary>
        OspDataProcessingMode = 1150247,

        /// <summary>
        /// System.Int32
        /// </summary>
        OspMode = 1150370,

        /// <summary>
        /// System.Boolean
        /// </summary>
        OspCarrierEnabled = 1150249,

        /// <summary>
        /// System.Double
        /// </summary>
        OspCarrierFrequency = 1150250,

        /// <summary>
        /// System.Double
        /// </summary>
        OspFrequencyShift = 1150371,

        /// <summary>
        /// System.Int32
        /// </summary>
        OspFirFilterType = 1150253,

        /// <summary>
        /// System.Double
        /// </summary>
        OspFirFilterFlatPassband = 1150261,

        /// <summary>
        /// System.Double
        /// </summary>
        OspFirFilterRaisedCosineAlpha = 1150260,

        /// <summary>
        /// System.Double
        /// </summary>
        OspFirFilterRootRaisedCosineAlpha = 1150259,

        /// <summary>
        /// System.Double
        /// </summary>
        OspFirFilterGaussianBt = 1150262,

        /// <summary>
        /// System.Double
        /// </summary>
        OspCarrierPhaseI = 1150251,

        /// <summary>
        /// System.Double
        /// </summary>
        OspCarrierPhaseQ = 1150252,

        /// <summary>
        /// System.Double
        /// </summary>
        OspPreFilterGainI = 1150264,

        /// <summary>
        /// System.Double
        /// </summary>
        OspPreFilterGainQ = 1150265,

        /// <summary>
        /// System.Double
        /// </summary>
        OspPreFilterOffsetI = 1150266,

        /// <summary>
        /// System.Double
        /// </summary>
        OspPreFilterOffsetQ = 1150267,

        /// <summary>
        /// System.Boolean
        /// </summary>
        OspFirFilterEnabled = 1150255,

        /// <summary>
        /// System.Double
        /// </summary>
        OspFirFilterInterpolation = 1150256,

        /// <summary>
        /// System.Boolean
        /// </summary>
        OspCicFilterEnabled = 1150257,

        /// <summary>
        /// System.Double
        /// </summary>
        OspCicFilterGain = 1150263,

        /// <summary>
        /// System.Double
        /// </summary>
        OspCicFilterInterpolation = 1150258,

        /// <summary>
        /// System.Boolean
        /// </summary>
        OspCompensateForFilterGroupDelay = 1150389,

        /// <summary>
        /// System.Int32
        /// </summary>
        OspOverflowErrorReporting = 1150268,

        /// <summary>
        /// System.Int32
        /// </summary>
        OspOverflowStatus = 1150269,

        /// <summary>
        /// System.Boolean
        /// </summary>
        P2pEnabled = 1150391,

        /// <summary>
        /// System.String
        /// </summary>
        P2pDestinationChannels = 1150392,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pEndpointSize = 1150393,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pSpaceAvailableInEndpoint = 1150394,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pMostSpaceAvailableInEndpoint = 1150395,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pEndpointCount = 1150396,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pDataTransferPermissionInterval = 1150400,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pDataTransferPermissionInitialCredits = 1150408,

        /// <summary>
        /// System.Boolean
        /// </summary>
        P2pManualConfigurationEnabled = 1150397,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pDataTransferPermissionAddress = 1150398,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pDataTransferPermissionAddressType = 1150399,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pEndpointWindowAddress = 1150401,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pEndpointWindowAddressType = 1150402,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pEndpointWindowSize = 1150403,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pDoneNotificationAddress = 1150405,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pDoneNotificationAddressType = 1150406,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pDoneNotificationValue = 1150407,

        /// <summary>
        /// System.Int32
        /// </summary>
        FuncWaveform = 1250101,

        /// <summary>
        /// System.Double
        /// </summary>
        FuncAmplitude = 1250102,

        /// <summary>
        /// System.Double
        /// </summary>
        FuncDcOffset = 1250103,

        /// <summary>
        /// System.Double
        /// </summary>
        FuncStartPhase = 1250105,

        /// <summary>
        /// System.Double
        /// </summary>
        FuncDutyCycleHigh = 1250106,

        /// <summary>
        /// System.Double
        /// </summary>
        SyncDutyCycleHigh = 1150105,

        /// <summary>
        /// System.String
        /// </summary>
        SyncOutOutputTerminal = 1150330,

        /// <summary>
        /// System.Double
        /// </summary>
        FuncFrequency = 1250104,

        /// <summary>
        /// System.Int32
        /// </summary>
        FuncBufferSize = 1150238,

        /// <summary>
        /// System.Int32
        /// </summary>
        FuncMaxBufferSize = 1150239,

        /// <summary>
        /// System.Int32
        /// </summary>
        FreqListHandle = 1150208,

        /// <summary>
        /// System.Int32
        /// </summary>
        MaxNumFreqLists = 1150209,

        /// <summary>
        /// System.Int32
        /// </summary>
        MaxFreqListLength = 1150211,

        /// <summary>
        /// System.Int32
        /// </summary>
        MinFreqListLength = 1150210,

        /// <summary>
        /// System.Double
        /// </summary>
        FreqListDurationQuantum = 1150214,

        /// <summary>
        /// System.Double
        /// </summary>
        MaxFreqListDuration = 1150213,

        /// <summary>
        /// System.Double
        /// </summary>
        MinFreqListDuration = 1150212,

        /// <summary>
        /// System.Double
        /// </summary>
        RefClockFrequency = 1150107,

        /// <summary>
        /// System.String
        /// </summary>
        ReferenceClockSource = 1150113,

        /// <summary>
        /// System.String
        /// </summary>
        ExportedReferenceClockOutputTerminal = 1150321,

        /// <summary>
        /// System.String
        /// </summary>
        ExportedOnboardReferenceClockOutputTerminal = 1150322,

        /// <summary>
        /// System.Double
        /// </summary>
        ArbSampleRate = 1250204,

        /// <summary>
        /// System.Int32
        /// </summary>
        ClockMode = 1150110,

        /// <summary>
        /// System.String
        /// </summary>
        SampleClockSource = 1150112,

        /// <summary>
        /// System.String
        /// </summary>
        ExportedSampleClockOutputTerminal = 1150320,

        /// <summary>
        /// System.Int32
        /// </summary>
        ExportedSampleClockDivisor = 1150219,

        /// <summary>
        /// System.String
        /// </summary>
        SampleClockTimebaseSource = 1150367,

        /// <summary>
        /// System.Double
        /// </summary>
        SampleClockTimebaseRate = 1150368,

        /// <summary>
        /// System.String
        /// </summary>
        ExportedSampleClockTimebaseOutputTerminal = 1150329,

        /// <summary>
        /// System.Int32
        /// </summary>
        ExportedSampleClockTimebaseDivisor = 1150230,

        /// <summary>
        /// System.Double
        /// </summary>
        ExternalSampleClockMultiplier = 1150376,

        /// <summary>
        /// System.Double
        /// </summary>
        SampleClockAbsoluteDelay = 1150231,

        /// <summary>
        /// System.Int32
        /// </summary>
        ExternalClockDelayBinaryValue = 1150233,

        /// <summary>
        /// System.Int32
        /// </summary>
        OscillatorPhaseDacValue = 1150232,

        /// <summary>
        /// System.String
        /// </summary>
        MarkerEventOutputTerminal = 1150312,

        /// <summary>
        /// System.Int32
        /// </summary>
        MarkerEventOutputBehavior = 1150342,

        /// <summary>
        /// System.Int32
        /// </summary>
        MarkerEventPulsePolarity = 1150313,

        /// <summary>
        /// System.Int32
        /// </summary>
        MarkerEventPulseWidthUnits = 1150341,

        /// <summary>
        /// System.Double
        /// </summary>
        MarkerEventPulseWidth = 1150340,

        /// <summary>
        /// System.Int32
        /// </summary>
        MarkerEventToggleInitialState = 1150343,

        /// <summary>
        /// System.Int32
        /// </summary>
        MarkerEventDelayUnits = 1150355,

        /// <summary>
        /// System.Double
        /// </summary>
        MarkerEventDelay = 1150354,

        /// <summary>
        /// System.Boolean
        /// </summary>
        MarkerEventLatchedStatus = 1150350,

        /// <summary>
        /// System.Int32
        /// </summary>
        AllMarkerEventsLatchedStatus = 1150349,

        /// <summary>
        /// System.Boolean
        /// </summary>
        MarkerEventLiveStatus = 1150345,

        /// <summary>
        /// System.Int32
        /// </summary>
        AllMarkerEventsLiveStatus = 1150344,

        /// <summary>
        /// System.String
        /// </summary>
        DataMarkerEventOutputTerminal = 1150339,

        /// <summary>
        /// System.Int32
        /// </summary>
        DataMarkerEventDataBitNumber = 1150337,

        /// <summary>
        /// System.Int32
        /// </summary>
        DataMarkerEventLevelPolarity = 1150338,

        /// <summary>
        /// System.String
        /// </summary>
        ReadyForStartEventOutputTerminal = 1150310,

        /// <summary>
        /// System.Int32
        /// </summary>
        ReadyForStartEventLevelActiveLevel = 1150311,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ReadyForStartEventLiveStatus = 1150348,

        /// <summary>
        /// System.String
        /// </summary>
        StartedEventOutputTerminal = 1150314,

        /// <summary>
        /// System.Int32
        /// </summary>
        StartedEventOutputBehavior = 1150331,

        /// <summary>
        /// System.Int32
        /// </summary>
        StartedEventPulsePolarity = 1150318,

        /// <summary>
        /// System.Int32
        /// </summary>
        StartedEventPulseWidthUnits = 1150333,

        /// <summary>
        /// System.Double
        /// </summary>
        StartedEventPulseWidth = 1150335,

        /// <summary>
        /// System.Int32
        /// </summary>
        StartedEventLevelActiveLevel = 1150316,

        /// <summary>
        /// System.Double
        /// </summary>
        StartedEventDelay = 1150356,

        /// <summary>
        /// System.Int32
        /// </summary>
        StartedEventDelayUnits = 1150357,

        /// <summary>
        /// System.Boolean
        /// </summary>
        StartedEventLatchedStatus = 1150352,

        /// <summary>
        /// System.String
        /// </summary>
        DoneEventOutputTerminal = 1150315,

        /// <summary>
        /// System.Int32
        /// </summary>
        DoneEventOutputBehavior = 1150332,

        /// <summary>
        /// System.Int32
        /// </summary>
        DoneEventPulsePolarity = 1150319,

        /// <summary>
        /// System.Int32
        /// </summary>
        DoneEventPulseWidthUnits = 1150334,

        /// <summary>
        /// System.Double
        /// </summary>
        DoneEventPulseWidth = 1150336,

        /// <summary>
        /// System.Int32
        /// </summary>
        DoneEventLevelActiveLevel = 1150317,

        /// <summary>
        /// System.Double
        /// </summary>
        DoneEventDelay = 1150358,

        /// <summary>
        /// System.Int32
        /// </summary>
        DoneEventDelayUnits = 1150359,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DoneEventLatchedStatus = 1150351,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerMode = 1150108,

        /// <summary>
        /// System.Int32
        /// </summary>
        StartTriggerType = 1150280,

        /// <summary>
        /// System.String
        /// </summary>
        ExportedStartTriggerOutputTerminal = 1150283,

        /// <summary>
        /// System.String
        /// </summary>
        DigitalEdgeStartTriggerSource = 1150281,

        /// <summary>
        /// System.Int32
        /// </summary>
        DigitalEdgeStartTriggerEdge = 1150282,

        /// <summary>
        /// System.Int32
        /// </summary>
        P2pEndpointFullnessStartTriggerLevel = 1150410,

        /// <summary>
        /// System.Int32
        /// </summary>
        ScriptTriggerType = 1150290,

        /// <summary>
        /// System.String
        /// </summary>
        ExportedScriptTriggerOutputTerminal = 1150295,

        /// <summary>
        /// System.String
        /// </summary>
        DigitalEdgeScriptTriggerSource = 1150291,

        /// <summary>
        /// System.Int32
        /// </summary>
        DigitalEdgeScriptTriggerEdge = 1150292,

        /// <summary>
        /// System.String
        /// </summary>
        DigitalLevelScriptTriggerSource = 1150293,

        /// <summary>
        /// System.Int32
        /// </summary>
        DigitalLevelScriptTriggerActiveLevel = 1150294,

        /// <summary>
        /// System.Int32
        /// </summary>
        BusType = 1150215,

        /// <summary>
        /// System.Int32
        /// </summary>
        MemorySize = 1150242,

        /// <summary>
        /// System.String
        /// </summary>
        SerialNumber = 1150243,

        /// <summary>
        /// System.Int32
        /// </summary>
        MarkerEventsCount = 1150271,

        /// <summary>
        /// System.Int32
        /// </summary>
        DataMarkerEventsCount = 1150273,

        /// <summary>
        /// System.Int32
        /// </summary>
        ScriptTriggersCount = 1150272,

        /// <summary>
        /// System.String
        /// </summary>
        FpgaBitfilePath = 1150412,

        /// <summary>
        /// System.Int32
        /// </summary>
        CalAdcInput = 1150227,

        /// <summary>
        /// System.Int32
        /// </summary>
        GainDacValue = 1150223,

        /// <summary>
        /// System.Int32
        /// </summary>
        OffsetDacValue = 1150224,

        /// <summary>
        /// System.Int32
        /// </summary>
        OscillatorFreqDacValue = 1150225,

        /// <summary>
        /// System.Double
        /// </summary>
        PreAmplifierAttenuation = 1150228,

        /// <summary>
        /// System.Double
        /// </summary>
        PostAmplifierAttenuation = 1150229,

        /// <summary>
        /// System.String
        /// </summary>
        DriverSetup = 1050007,

        /// <summary>
        /// System.String
        /// </summary>
        LogicalName = 1050305,

        /// <summary>
        /// System.String
        /// </summary>
        IoResourceDescriptor = 1050304,

        /// <summary>
        /// System.Int32
        /// </summary>
        ChannelCount = 1050203,

        /// <summary>
        /// System.String
        /// </summary>
        GroupCapabilities = 1050401,

        /// <summary>
        /// System.String
        /// </summary>
        SupportedInstrumentModels = 1050327,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverClassSpecMajorVersion = 1050515,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverClassSpecMinorVersion = 1050516,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverDescription = 1050514,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverPrefix = 1050302,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverVendor = 1050513,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverRevision = 1050551,

        /// <summary>
        /// System.String
        /// </summary>
        IdQueryResponse = 1150001,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentFirmwareRevision = 1050510,

        /// <summary>
        /// System.String
        /// </summary>
        ModuleRevision = 1150390,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentManufacturer = 1050511,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentModel = 1050512,

        /// <summary>
        /// System.Boolean
        /// </summary>
        Cache = 1050004,

        /// <summary>
        /// System.Boolean
        /// </summary>
        InterchangeCheck = 1050021,

        /// <summary>
        /// System.Boolean
        /// </summary>
        QueryInstrumentStatus = 1050003,

        /// <summary>
        /// System.Boolean
        /// </summary>
        RangeCheck = 1050002,

        /// <summary>
        /// System.Boolean
        /// </summary>
        RecordCoercions = 1050006,

        /// <summary>
        /// System.Boolean
        /// </summary>
        Simulate = 1050005,

        /// <summary>
        /// System.Double
        /// </summary>
        FilterCorrectionFrequency = 1150104,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerSource = 1250302,

        /// <summary>
        /// System.Int32
        /// </summary>
        Synchronization = 1150111,

        /// <summary>
        /// System.Int32
        /// </summary>
        VideoWaveformType = 1150216,

        /// <summary>
        /// System.String
        /// </summary>
        ErrorElaboration = 1050103,

        /// <summary>
        /// System.Int32
        /// </summary>
        PrimaryError = 1050101,

        /// <summary>
        /// System.Int32
        /// </summary>
        SecondaryError = 1050102,

        /// <summary>
        /// System.Int32
        /// </summary>
        OperationMode = 1250005,

        /// <summary>
        /// System.Int32
        /// </summary>
        RefClockSource = 1250002,

        /// <summary>
        /// System.Int32
        /// </summary>
        UpdateClockSource = 1150106,

        /// <summary>
        /// System.Int32
        /// </summary>
        CycleCount = 1250350,

        /// <summary>
        /// System.IntPtr
        /// </summary>
        IoSession = 1050322,

        /// <summary>
        /// System.Int32
        /// </summary>
        NumChannels = 1050203,

        /// <summary>
        /// System.Int32
        /// </summary>
        BurstCount = 1250350,

        /// <summary>
        /// System.Double
        /// </summary>
        ActualArbSampleRate = 1150109,

        /// <summary>
        /// System.Int32
        /// </summary>
        DaqmxTask = 1150221,
    }
}
